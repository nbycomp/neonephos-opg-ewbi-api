// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package models

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for AppMetaDataCategory.
const (
	CONNECTIVITY   AppMetaDataCategory = "CONNECTIVITY"
	EDUCATION      AppMetaDataCategory = "EDUCATION"
	ENTERTAINMENT  AppMetaDataCategory = "ENTERTAINMENT"
	GAMING         AppMetaDataCategory = "GAMING"
	HEALTHCARE     AppMetaDataCategory = "HEALTH_CARE"
	INDUSTRIAL     AppMetaDataCategory = "INDUSTRIAL"
	IOT            AppMetaDataCategory = "IOT"
	OTHERS         AppMetaDataCategory = "OTHERS"
	PRODUCTIVITY   AppMetaDataCategory = "PRODUCTIVITY"
	SECURITY       AppMetaDataCategory = "SECURITY"
	SOCIALIZING    AppMetaDataCategory = "SOCIALIZING"
	SURVEILLANCE   AppMetaDataCategory = "SURVEILLANCE"
	VIRTUALREALITY AppMetaDataCategory = "VIRTUAL_REALITY"
)

// Defines values for AppQoSProfileLatencyConstraints.
const (
	AppQoSProfileLatencyConstraintsLOW      AppQoSProfileLatencyConstraints = "LOW"
	AppQoSProfileLatencyConstraintsNONE     AppQoSProfileLatencyConstraints = "NONE"
	AppQoSProfileLatencyConstraintsULTRALOW AppQoSProfileLatencyConstraints = "ULTRALOW"
)

// Defines values for AppQoSProfileMultiUserClients.
const (
	AppQoSProfileMultiUserClientsAPPTYPEMULTIUSER  AppQoSProfileMultiUserClients = "APP_TYPE_MULTI_USER"
	AppQoSProfileMultiUserClientsAPPTYPESINGLEUSER AppQoSProfileMultiUserClients = "APP_TYPE_SINGLE_USER"
)

// Defines values for CPUArchType.
const (
	CPUArchTypeISAARM64 CPUArchType = "ISA_ARM_64"
	CPUArchTypeISAX86   CPUArchType = "ISA_X86"
	CPUArchTypeISAX8664 CPUArchType = "ISA_X86_64"
)

// Defines values for ClientLocationRadLocationCarrier.
const (
	LTE ClientLocationRadLocationCarrier = "LTE"
	N5G ClientLocationRadLocationCarrier = "5G"
)

// Defines values for CompEnvParamsEnvValueType.
const (
	PLATFORMDEFINEDDNS         CompEnvParamsEnvValueType = "PLATFORM_DEFINED_DNS"
	PLATFORMDEFINEDDYNAMICPORT CompEnvParamsEnvValueType = "PLATFORM_DEFINED_DYNAMIC_PORT"
	PLATFORMDEFINEDIP          CompEnvParamsEnvValueType = "PLATFORM_DEFINED_IP"
	USERDEFINED                CompEnvParamsEnvValueType = "USER_DEFINED"
)

// Defines values for ComponentSpecRestartPolicy.
const (
	RESTARTPOLICYALWAYS ComponentSpecRestartPolicy = "RESTART_POLICY_ALWAYS"
	RESTARTPOLICYNEVER  ComponentSpecRestartPolicy = "RESTART_POLICY_NEVER"
)

// Defines values for ComputeResourceInfoCpuArchType.
const (
	ComputeResourceInfoCpuArchTypeISAARM64 ComputeResourceInfoCpuArchType = "ISA_ARM_64"
	ComputeResourceInfoCpuArchTypeISAX8664 ComputeResourceInfoCpuArchType = "ISA_X86_64"
)

// Defines values for DeploymentConfigConfigType.
const (
	CLOUDINIT          DeploymentConfigConfigType = "CLOUD_INIT"
	DOCKERCOMPOSE      DeploymentConfigConfigType = "DOCKER_COMPOSE"
	HELMVALUES         DeploymentConfigConfigType = "HELM_VALUES"
	KUBERNETESMANIFEST DeploymentConfigConfigType = "KUBERNETES_MANIFEST"
)

// Defines values for FederationResponseDataPlatformCaps.
const (
	Anchoring   FederationResponseDataPlatformCaps = "Anchoring"
	HomeRouting FederationResponseDataPlatformCaps = "homeRouting"
)

// Defines values for GpuInfoGpuVendorType.
const (
	GPUPROVIDERAMD    GpuInfoGpuVendorType = "GPU_PROVIDER_AMD"
	GPUPROVIDERNVIDIA GpuInfoGpuVendorType = "GPU_PROVIDER_NVIDIA"
)

// Defines values for HugePagePageSize.
const (
	N1GB HugePagePageSize = "1GB"
	N2MB HugePagePageSize = "2MB"
	N4MB HugePagePageSize = "4MB"
)

// Defines values for InstanceState.
const (
	InstanceStateFAILED      InstanceState = "FAILED"
	InstanceStatePENDING     InstanceState = "PENDING"
	InstanceStateREADY       InstanceState = "READY"
	InstanceStateTERMINATING InstanceState = "TERMINATING"
)

// Defines values for InterfaceDetailsCommProtocol.
const (
	HTTPHTTPS InterfaceDetailsCommProtocol = "HTTP_HTTPS"
	TCP       InterfaceDetailsCommProtocol = "TCP"
	UDP       InterfaceDetailsCommProtocol = "UDP"
)

// Defines values for InterfaceDetailsVisibilityType.
const (
	VISIBILITYEXTERNAL InterfaceDetailsVisibilityType = "VISIBILITY_EXTERNAL"
	VISIBILITYINTERNAL InterfaceDetailsVisibilityType = "VISIBILITY_INTERNAL"
)

// Defines values for OSTypeArchitecture.
const (
	X86   OSTypeArchitecture = "x86"
	X8664 OSTypeArchitecture = "x86_64"
)

// Defines values for OSTypeDistribution.
const (
	OSTypeDistributionCOREOS  OSTypeDistribution = "COREOS"
	OSTypeDistributionFEDORA  OSTypeDistribution = "FEDORA"
	OSTypeDistributionOTHER   OSTypeDistribution = "OTHER"
	OSTypeDistributionRHEL    OSTypeDistribution = "RHEL"
	OSTypeDistributionUBUNTU  OSTypeDistribution = "UBUNTU"
	OSTypeDistributionWINDOWS OSTypeDistribution = "WINDOWS"
)

// Defines values for OSTypeLicense.
const (
	NOTSPECIFIED          OSTypeLicense = "NOT_SPECIFIED"
	OSLICENSETYPEFREE     OSTypeLicense = "OS_LICENSE_TYPE_FREE"
	OSLICENSETYPEONDEMAND OSTypeLicense = "OS_LICENSE_TYPE_ON_DEMAND"
)

// Defines values for OSTypeVersion.
const (
	OSTypeVersionOSMSWINDOWS2012R2      OSTypeVersion = "OS_MS_WINDOWS_2012_R2"
	OSTypeVersionOSVERSIONCOREOSSTABLE  OSTypeVersion = "OS_VERSION_COREOS_STABLE"
	OSTypeVersionOSVERSIONDEBIAN11      OSTypeVersion = "OS_VERSION_DEBIAN_11"
	OSTypeVersionOSVERSIONRHEL7         OSTypeVersion = "OS_VERSION_RHEL_7"
	OSTypeVersionOSVERSIONRHEL8         OSTypeVersion = "OS_VERSION_RHEL_8"
	OSTypeVersionOSVERSIONUBUNTU2204LTS OSTypeVersion = "OS_VERSION_UBUNTU_2204_LTS"
	OSTypeVersionOTHER                  OSTypeVersion = "OTHER"
)

// Defines values for PersistentVolumeDetailsAccessMode.
const (
	RO PersistentVolumeDetailsAccessMode = "RO"
	RW PersistentVolumeDetailsAccessMode = "RW"
)

// Defines values for PersistentVolumeDetailsSharingPolicy.
const (
	EXCLUSIVE PersistentVolumeDetailsSharingPolicy = "EXCLUSIVE"
	SHARED    PersistentVolumeDetailsSharingPolicy = "SHARED"
)

// Defines values for PersistentVolumeDetailsVolumeSize.
const (
	N100Gi PersistentVolumeDetailsVolumeSize = "100Gi"
	N10Gi  PersistentVolumeDetailsVolumeSize = "10Gi"
	N20Gi  PersistentVolumeDetailsVolumeSize = "20Gi"
	N50Gi  PersistentVolumeDetailsVolumeSize = "50Gi"
)

// Defines values for Status.
const (
	StatusAVAILABLE        Status = "AVAILABLE"
	StatusFAILED           Status = "FAILED"
	StatusLOCKED           Status = "LOCKED"
	StatusNOTAVAILABLE     Status = "NOT_AVAILABLE"
	StatusTEMPORARYFAILURE Status = "TEMPORARY_FAILURE"
)

// Defines values for VirtImageType.
const (
	DOCKER VirtImageType = "DOCKER"
	OVA    VirtImageType = "OVA"
	QCOW2  VirtImageType = "QCOW2"
)

// Defines values for AppStatusCallbackLinkJSONBodyStatusInfoOnboardStatusInfo.
const (
	DEBOARDING AppStatusCallbackLinkJSONBodyStatusInfoOnboardStatusInfo = "DEBOARDING"
	FAILED     AppStatusCallbackLinkJSONBodyStatusInfoOnboardStatusInfo = "FAILED"
	ONBOARDED  AppStatusCallbackLinkJSONBodyStatusInfoOnboardStatusInfo = "ONBOARDED"
	PENDING    AppStatusCallbackLinkJSONBodyStatusInfoOnboardStatusInfo = "PENDING"
	REMOVED    AppStatusCallbackLinkJSONBodyStatusInfoOnboardStatusInfo = "REMOVED"
)

// Defines values for PartnerStatusLinkJSONBodyObjectType.
const (
	PartnerStatusLinkJSONBodyObjectTypeEDGEDISCOVERYSERVICE PartnerStatusLinkJSONBodyObjectType = "EDGE_DISCOVERY_SERVICE"
	PartnerStatusLinkJSONBodyObjectTypeFEDERATION           PartnerStatusLinkJSONBodyObjectType = "FEDERATION"
	PartnerStatusLinkJSONBodyObjectTypeFIXEDNETWORKCODES    PartnerStatusLinkJSONBodyObjectType = "FIXED_NETWORK_CODES"
	PartnerStatusLinkJSONBodyObjectTypeLCMSERVICE           PartnerStatusLinkJSONBodyObjectType = "LCM_SERVICE"
	PartnerStatusLinkJSONBodyObjectTypeMOBILENETWORKCODES   PartnerStatusLinkJSONBodyObjectType = "MOBILE_NETWORK_CODES"
	PartnerStatusLinkJSONBodyObjectTypeZONES                PartnerStatusLinkJSONBodyObjectType = "ZONES"
)

// Defines values for PartnerStatusLinkJSONBodyOperationType.
const (
	PartnerStatusLinkJSONBodyOperationTypeADD    PartnerStatusLinkJSONBodyOperationType = "ADD"
	PartnerStatusLinkJSONBodyOperationTypeREMOVE PartnerStatusLinkJSONBodyOperationType = "REMOVE"
	PartnerStatusLinkJSONBodyOperationTypeSTATUS PartnerStatusLinkJSONBodyOperationType = "STATUS"
	PartnerStatusLinkJSONBodyOperationTypeUPDATE PartnerStatusLinkJSONBodyOperationType = "UPDATE"
)

// Defines values for InstallAppJSONBodyZoneInfoResourceConsumption.
const (
	RESERVEDRESAVOID  InstallAppJSONBodyZoneInfoResourceConsumption = "RESERVED_RES_AVOID"
	RESERVEDRESFORBID InstallAppJSONBodyZoneInfoResourceConsumption = "RESERVED_RES_FORBID"
	RESERVEDRESPREFER InstallAppJSONBodyZoneInfoResourceConsumption = "RESERVED_RES_PREFER"
	RESERVEDRESSHALL  InstallAppJSONBodyZoneInfoResourceConsumption = "RESERVED_RES_SHALL"
)

// Defines values for UpdateApplicationJSONBodyAppUpdQoSProfileLatencyConstraints.
const (
	UpdateApplicationJSONBodyAppUpdQoSProfileLatencyConstraintsLOW      UpdateApplicationJSONBodyAppUpdQoSProfileLatencyConstraints = "LOW"
	UpdateApplicationJSONBodyAppUpdQoSProfileLatencyConstraintsNONE     UpdateApplicationJSONBodyAppUpdQoSProfileLatencyConstraints = "NONE"
	UpdateApplicationJSONBodyAppUpdQoSProfileLatencyConstraintsULTRALOW UpdateApplicationJSONBodyAppUpdQoSProfileLatencyConstraints = "ULTRALOW"
)

// Defines values for UpdateApplicationJSONBodyAppUpdQoSProfileMultiUserClients.
const (
	UpdateApplicationJSONBodyAppUpdQoSProfileMultiUserClientsAPPTYPEMULTIUSER  UpdateApplicationJSONBodyAppUpdQoSProfileMultiUserClients = "APP_TYPE_MULTI_USER"
	UpdateApplicationJSONBodyAppUpdQoSProfileMultiUserClientsAPPTYPESINGLEUSER UpdateApplicationJSONBodyAppUpdQoSProfileMultiUserClients = "APP_TYPE_SINGLE_USER"
)

// Defines values for UploadArtefactMultipartBodyArtefactDescriptorType.
const (
	ANSIBLE       UploadArtefactMultipartBodyArtefactDescriptorType = "ANSIBLE"
	COMPONENTSPEC UploadArtefactMultipartBodyArtefactDescriptorType = "COMPONENTSPEC"
	HELM          UploadArtefactMultipartBodyArtefactDescriptorType = "HELM"
	SHELL         UploadArtefactMultipartBodyArtefactDescriptorType = "SHELL"
	TERRAFORM     UploadArtefactMultipartBodyArtefactDescriptorType = "TERRAFORM"
)

// Defines values for UploadArtefactMultipartBodyArtefactFileFormat.
const (
	TAR    UploadArtefactMultipartBodyArtefactFileFormat = "TAR"
	TARGZ  UploadArtefactMultipartBodyArtefactFileFormat = "TARGZ"
	TEXT   UploadArtefactMultipartBodyArtefactFileFormat = "TEXT"
	WINZIP UploadArtefactMultipartBodyArtefactFileFormat = "WINZIP"
)

// Defines values for UploadArtefactMultipartBodyArtefactVirtType.
const (
	CONTAINERTYPE UploadArtefactMultipartBodyArtefactVirtType = "CONTAINER_TYPE"
	VMTYPE        UploadArtefactMultipartBodyArtefactVirtType = "VM_TYPE"
)

// Defines values for UploadArtefactMultipartBodyRepoType.
const (
	UploadArtefactMultipartBodyRepoTypePRIVATEREPO UploadArtefactMultipartBodyRepoType = "PRIVATEREPO"
	UploadArtefactMultipartBodyRepoTypePUBLICREPO  UploadArtefactMultipartBodyRepoType = "PUBLICREPO"
	UploadArtefactMultipartBodyRepoTypeUPLOAD      UploadArtefactMultipartBodyRepoType = "UPLOAD"
)

// Defines values for UploadFileMultipartBodyRepoType.
const (
	UploadFileMultipartBodyRepoTypePRIVATEREPO UploadFileMultipartBodyRepoType = "PRIVATEREPO"
	UploadFileMultipartBodyRepoTypePUBLICREPO  UploadFileMultipartBodyRepoType = "PUBLICREPO"
	UploadFileMultipartBodyRepoTypeUPLOAD      UploadFileMultipartBodyRepoType = "UPLOAD"
)

// Defines values for UpdateISVResPoolJSONBodyUpdateType.
const (
	UpdateISVResPoolJSONBodyUpdateTypeADD      UpdateISVResPoolJSONBodyUpdateType = "ADD"
	UpdateISVResPoolJSONBodyUpdateTypeDURATION UpdateISVResPoolJSONBodyUpdateType = "DURATION"
	UpdateISVResPoolJSONBodyUpdateTypeREMOVE   UpdateISVResPoolJSONBodyUpdateType = "REMOVE"
)

// Defines values for UpdateFederationJSONBodyObjectType.
const (
	UpdateFederationJSONBodyObjectTypeFIXEDNETWORKCODES  UpdateFederationJSONBodyObjectType = "FIXED_NETWORK_CODES"
	UpdateFederationJSONBodyObjectTypeMOBILENETWORKCODES UpdateFederationJSONBodyObjectType = "MOBILE_NETWORK_CODES"
)

// Defines values for UpdateFederationJSONBodyOperationType.
const (
	ADDCODES    UpdateFederationJSONBodyOperationType = "ADD_CODES"
	REMOVECODES UpdateFederationJSONBodyOperationType = "REMOVE_CODES"
	UPDATECODES UpdateFederationJSONBodyOperationType = "UPDATE_CODES"
)

// AccessPointInfo Information about the IP and Port exposed by the OP. Application clients shall use these access points to reach this application instance.
type AccessPointInfo = []struct {
	AccessPoints ServiceEndpoint `json:"accessPoints"`

	// InterfaceId Each Port and corresponding traffic protocol exposed by the component is identified by a name. Application client on user device requires this to uniquely identify the interface.
	InterfaceId InterfaceId `json:"interfaceId"`
}

// AppComponentSpecs An application may consist of more than one component. Each component is associated with a descriptor and may exposes its services externally or internally. App providers are required to provide details about all these components, their associated descriptors and their DNS names.
type AppComponentSpecs = []struct {
	// ArtefactId A globally unique identifier associated with the artefact. Originating OP generates this identifier when artefact is submitted over NBI.
	ArtefactId ArtefactId `json:"artefactId"`

	// ComponentName Must be a valid RFC 1123 label name. Component name must be unique with an application
	ComponentName *string `json:"componentName,omitempty"`

	// ServiceNameEW Must be a valid RFC 1123 label name. This defines the DNS name via which the component can be accessed via peer components. Access via serviceNameEW is open on all ports. Platform shall not expose serviceNameEW externally outside edge.
	ServiceNameEW *string `json:"serviceNameEW,omitempty"`

	// ServiceNameNB Must be a valid RFC 1123 label name. This defines the DNS name via which the component can be accessed over NBI. Access via serviceNameNB is restricted on specific ports. Platform shall expose component access externally via this DNS name
	ServiceNameNB *string `json:"serviceNameNB,omitempty"`
}

// AppIdentifier Identifier used to refer to an application.
type AppIdentifier = string

// AppMetaData Application metadata details
type AppMetaData struct {
	// AccessToken An application Access key, to be used with UNI interface to authorize UCs Access to a given application
	AccessToken string `json:"accessToken"`

	// AppDescription Brief application description provided by application provider
	AppDescription *string `json:"appDescription,omitempty"`

	// AppName Name of the application. Application provider define a human readable name for the application
	AppName string `json:"appName"`

	// Category Possible categorization of the application
	Category *AppMetaDataCategory `json:"category,omitempty"`

	// MobilitySupport Indicates if an application is sensitive to user mobility and can be relocated. Default is “FALSE”
	MobilitySupport *bool `json:"mobilitySupport,omitempty"`

	// Version Version info of the application
	Version string `json:"version"`
}

// AppMetaDataCategory Possible categorization of the application
type AppMetaDataCategory string

// AppProviderId UserId of the app provider. Identifier is relevant only in context of this federation.
type AppProviderId = string

// AppQoSProfile Parameters corresponding to the performance constraints, tenancy details etc.
type AppQoSProfile struct {
	// AppProvisioning Define if application can be instantiated or not
	AppProvisioning *bool `json:"appProvisioning,omitempty"`

	// BandwidthRequired Data transfer bandwidth requirement (minimum limit) for the application. It should in Mbits/sec
	BandwidthRequired *int32 `json:"bandwidthRequired,omitempty"`

	// LatencyConstraints Latency requirements for the application. Allowed values (non-standardized) are none, low and ultra-low. Ultra-Low may corresponds to range 15 - 30 msec, Low correspond to range 30 - 50 msec. None means 51 and above
	LatencyConstraints AppQoSProfileLatencyConstraints `json:"latencyConstraints"`

	// MultiUserClients Single user type application are designed to serve just one client. Multi user type application is designed to serve multiple clients
	MultiUserClients *AppQoSProfileMultiUserClients `json:"multiUserClients,omitempty"`

	// NoOfUsersPerAppInst Maximum no of clients that can connect to an instance of this application. This parameter is relevant only for application of type multi user
	NoOfUsersPerAppInst *int `json:"noOfUsersPerAppInst,omitempty"`
}

// AppQoSProfileLatencyConstraints Latency requirements for the application. Allowed values (non-standardized) are none, low and ultra-low. Ultra-Low may corresponds to range 15 - 30 msec, Low correspond to range 30 - 50 msec. None means 51 and above
type AppQoSProfileLatencyConstraints string

// AppQoSProfileMultiUserClients Single user type application are designed to serve just one client. Multi user type application is designed to serve multiple clients
type AppQoSProfileMultiUserClients string

// ArtefactId A globally unique identifier associated with the artefact. Originating OP generates this identifier when artefact is submitted over NBI.
type ArtefactId = string

// ArtefactName Name of the artefact.
type ArtefactName = string

// AuthorizationToken A token assigned to the roaming user's during registration with home OP and the token is provided back to the visited OP by the user client on end user device when redirected to register with visited OP
type AuthorizationToken = string

// CPUArchType CPU Instruction Set Architecture (ISA) E.g., Intel, Arm etc.
type CPUArchType string

// CallbackCredentials Authentication credentials for callbacks. Callbacks use the same security scheme, flows, and scopes as the forward path.
type CallbackCredentials struct {
	// ClientId Client id for oauth2 client credentials flow.
	ClientId string `json:"clientId"`

	// ClientSecret Client secret for oauth2 client credentials flow.
	ClientSecret string `json:"clientSecret"`
	TokenUrl     Uri    `json:"tokenUrl"`
}

// ClientLocation defines model for ClientLocation.
type ClientLocation struct {
	// GeoLocation Latitude,Longitude as decimal fraction up to 4 digit precision
	GeoLocation *GeoLocation `json:"geo_location,omitempty"`

	// RadLocation Information about the 4G/5G Cell ids where the client is currently served.
	RadLocation *[]struct {
		// AreaCode Routing area code or Traffic area code where client is being served.
		AreaCode *int                             `json:"areaCode,omitempty"`
		Carrier  ClientLocationRadLocationCarrier `json:"carrier"`

		// CellId it could be a CGI (if carrier is LTE) or NCGI (if carrier is 5G).
		CellId int `json:"cellId"`

		// Mcc Mobile country code of the network as broadcasted in the serving cell
		Mcc int `json:"mcc"`

		// Mnc Mobile network code of the network as broadcasted in the serving cell
		Mnc int `json:"mnc"`
	} `json:"rad_location,omitempty"`
}

// ClientLocationRadLocationCarrier defines model for ClientLocation.RadLocation.Carrier.
type ClientLocationRadLocationCarrier string

// CommandLineParams List of commands and arguments that shall be invoked when the component instance is created. This is valid only for container based deployment.
type CommandLineParams struct {
	// Command List of commands that application should invoke when an instance is created.
	Command []string `json:"command"`

	// CommandArgs List of arguments required by the command.
	CommandArgs *[]string `json:"commandArgs,omitempty"`
}

// CompEnvParams Environment variables are key value pairs that should be injected when component in instantiated
type CompEnvParams struct {
	EnvValueType CompEnvParamsEnvValueType `json:"envValueType"`

	// EnvVarName Name of environment variable
	EnvVarName string `json:"envVarName"`

	// EnvVarSrc Full path of parameter from componentSpec that should be used to generate the environment value. Eg. networkResourceProfile[1]. interfaceId.
	EnvVarSrc *string `json:"envVarSrc,omitempty"`

	// EnvVarValue Value to be assigned to environment variable
	EnvVarValue *string `json:"envVarValue,omitempty"`
}

// CompEnvParamsEnvValueType defines model for CompEnvParams.EnvValueType.
type CompEnvParamsEnvValueType string

// ComponentSpec Details about compute, networking and storage requirements for each component of the application. App provider should define all information needed to instantiate the component. If artefact is being defined at component level this section should have information just about the component. In case the artefact is being defined at application level the section should provide details about all the components.
type ComponentSpec struct {
	// CommandLineParams List of commands and arguments that shall be invoked when the component instance is created. This is valid only for container based deployment.
	CommandLineParams *CommandLineParams `json:"commandLineParams,omitempty"`
	CompEnvParams     *[]CompEnvParams   `json:"compEnvParams,omitempty"`

	// ComponentName Must be a valid RFC 1123 label name. Component name must be unique with an application
	ComponentName          string              `json:"componentName"`
	ComputeResourceProfile ComputeResourceInfo `json:"computeResourceProfile"`

	// DeploymentConfig Configuration used when deploying a component. May override other ComponentSpec parameters related to deployment like restart policy, command line parameters, environment variables, etc.
	DeploymentConfig *DeploymentConfig `json:"deploymentConfig,omitempty"`

	// ExposedInterfaces Each application component exposes some ports either for external users or for inter component communication. Application provider is required to specify which ports are to be exposed and the type of traffic that will flow through these ports.
	ExposedInterfaces *[]InterfaceDetails `json:"exposedInterfaces,omitempty"`

	// Images List of all images associated with the component. Images are specified using the file identifiers. Partner OP provides these images using file upload api.
	Images []FileId `json:"images"`

	// NumOfInstances Number of component instances to be launched.
	NumOfInstances int32 `json:"numOfInstances"`

	// PersistentVolumes The ephemeral volume a container process may need to temporary store internal data
	PersistentVolumes *[]PersistentVolumeDetails `json:"persistentVolumes,omitempty"`

	// RestartPolicy How the platform shall handle component failure
	RestartPolicy ComponentSpecRestartPolicy `json:"restartPolicy"`
}

// ComponentSpecRestartPolicy How the platform shall handle component failure
type ComponentSpecRestartPolicy string

// ComputeResourceInfo defines model for ComputeResourceInfo.
type ComputeResourceInfo struct {
	// CpuArchType CPU Instruction Set Architecture (ISA) E.g., Intel, Arm etc.
	CpuArchType ComputeResourceInfoCpuArchType `json:"cpuArchType"`

	// CpuExclusivity Support for exclusive CPUs
	CpuExclusivity *bool `json:"cpuExclusivity,omitempty"`

	// DiskStorage Amount of disk storage in Gbytes for a given ISA type
	DiskStorage *int32 `json:"diskStorage,omitempty"`

	// Fpga Number of FPGAs available for a given ISA type
	Fpga      *int        `json:"fpga,omitempty"`
	Gpu       *[]GpuInfo  `json:"gpu,omitempty"`
	Hugepages *[]HugePage `json:"hugepages,omitempty"`

	// Memory Amount of RAM in Mbytes
	Memory int64 `json:"memory"`

	// NumCPU Number of vcpus in whole, decimal up to millivcpu, or millivcpu format.
	NumCPU Vcpu `json:"numCPU"`

	// Vpu Number of Intel VPUs available for a given ISA type
	Vpu *int `json:"vpu,omitempty"`
}

// ComputeResourceInfoCpuArchType CPU Instruction Set Architecture (ISA) E.g., Intel, Arm etc.
type ComputeResourceInfoCpuArchType string

// CountryCode ISO 3166-1 Alpha-2 code for the country of Partner operator
type CountryCode = string

// DeploymentConfig Configuration used when deploying a component. May override other ComponentSpec parameters related to deployment like restart policy, command line parameters, environment variables, etc.
type DeploymentConfig struct {
	// ConfigType Config type.
	ConfigType DeploymentConfigConfigType `json:"configType"`

	// Contents Contents of the configuration.
	Contents string `json:"contents"`
}

// DeploymentConfigConfigType Config type.
type DeploymentConfigConfigType string

// DeviceId The identifier of the application user (i.e., GPSI or preferably an identity token)
type DeviceId = string

// DiscoveredEdgeNodes List of candidate zones where application instance could be created. LatencyServiceEndpoint is responsible for responding to latency measurement request from client
type DiscoveredEdgeNodes = []struct {
	LatencyServiceEndPoints ServiceEndpoint `json:"latencyServiceEndPoints"`

	// ZoneId Human readable name of the zone.
	ZoneId ZoneIdentifier `json:"zoneId"`
}

// FederationCallbackId who knows
type FederationCallbackId = string

// FederationContextId This identifier shall be provided by the partner OP on successful verification and validation of the federation create request and is used by partner op to identify this newly created federation context. Originating OP shall provide this identifier in any subsequent request towards the partner op.
type FederationContextId = string

// FederationIdentifier Globally unique identifier allocated to an operator platform. This is valid and used only in context of MEC federation interface.
type FederationIdentifier = string

// FederationRequestData defines model for FederationRequestData.
type FederationRequestData struct {
	// InitialDate Time zone info of the federation initiated by the originating OP
	InitialDate time.Time `json:"initialDate"`

	// OrigOPCountryCode ISO 3166-1 Alpha-2 code for the country of Partner operator
	OrigOPCountryCode *CountryCode `json:"origOPCountryCode,omitempty"`

	// OrigOPFederationId Globally unique identifier allocated to an operator platform. This is valid and used only in context of MEC federation interface.
	OrigOPFederationId FederationIdentifier `json:"origOPFederationId"`

	// OrigOPFixedNetworkCodes List of network identifier associated with the fixed line network of the operator platform.
	OrigOPFixedNetworkCodes  *FixedNetworkIds  `json:"origOPFixedNetworkCodes,omitempty"`
	OrigOPMobileNetworkCodes *MobileNetworkIds `json:"origOPMobileNetworkCodes,omitempty"`

	// PartnerCallbackCredentials Authentication credentials for callbacks. Callbacks use the same security scheme, flows, and scopes as the forward path.
	PartnerCallbackCredentials *CallbackCredentials `json:"partnerCallbackCredentials,omitempty"`
	PartnerStatusLink          Uri                  `json:"partnerStatusLink"`
}

// FederationResponseData defines model for FederationResponseData.
type FederationResponseData struct {
	EdgeDiscoveryServiceEndPoint *ServiceEndpoint `json:"edgeDiscoveryServiceEndPoint,omitempty"`

	// FederationContextId This identifier shall be provided by the partner OP on successful verification and validation of the federation create request and is used by partner op to identify this newly created federation context. Originating OP shall provide this identifier in any subsequent request towards the partner op.
	FederationContextId *FederationContextId `json:"federationContextId,omitempty"`
	LcmServiceEndPoint  *ServiceEndpoint     `json:"lcmServiceEndPoint,omitempty"`

	// OfferedAvailabilityZones List of zones, which the operator platform wishes to make available to developers/ISVs of requesting operator platform.
	OfferedAvailabilityZones *[]ZoneDetails `json:"offeredAvailabilityZones,omitempty"`

	// PartnerOPCountryCode ISO 3166-1 Alpha-2 code for the country of Partner operator
	PartnerOPCountryCode *CountryCode `json:"partnerOPCountryCode,omitempty"`

	// PartnerOPFederationId Globally unique identifier allocated to an operator platform. This is valid and used only in context of MEC federation interface.
	PartnerOPFederationId FederationIdentifier `json:"partnerOPFederationId"`

	// PartnerOPFixedNetworkCodes List of network identifier associated with the fixed line network of the operator platform.
	PartnerOPFixedNetworkCodes  *FixedNetworkIds                     `json:"partnerOPFixedNetworkCodes,omitempty"`
	PartnerOPMobileNetworkCodes *MobileNetworkIds                    `json:"partnerOPMobileNetworkCodes,omitempty"`
	PlatformCaps                []FederationResponseDataPlatformCaps `json:"platformCaps"`
}

// FederationResponseDataPlatformCaps Home routing - Operator platform is capable of routing edge application data traffic from its edges to user device in their home location. This is the case where user devices are served in their home region (requesting platform region, non-roaming) but the corresponding edge application are in operator platform edges. Anchoring - Operator platform is capable of routing edge application traffic for roaming user devices to edge application in user device home network.
type FederationResponseDataPlatformCaps string

// FileId A globally unique identifier associated with the image file. Originating OP generates this identifier when file is uploaded over NBI.
type FileId = string

// FileName Name of the image file.
type FileName = string

// FixedNetworkIds List of network identifier associated with the fixed line network of the operator platform.
type FixedNetworkIds = []string

// Flavour defines model for Flavour.
type Flavour struct {
	// CpuArchType CPU Instruction Set Architecture (ISA) E.g., Intel, Arm etc.
	CpuArchType CPUArchType `json:"cpuArchType"`

	// CpuExclusivity Support for exclusive CPUs
	CpuExclusivity *bool `json:"cpuExclusivity,omitempty"`

	// FlavourId An identifier to refer to a specific combination of compute resources.
	FlavourId FlavourId `json:"flavourId"`

	// Fpga Number of FPGAs
	Fpga      *int32      `json:"fpga,omitempty"`
	Gpu       *[]GpuInfo  `json:"gpu,omitempty"`
	Hugepages *[]HugePage `json:"hugepages,omitempty"`

	// MemorySize Amount of RAM in Mbytes
	MemorySize int32 `json:"memorySize"`

	// NumCPU Number of available vCPUs
	NumCPU int32 `json:"numCPU"`

	// StorageSize Amount of disk storage in Gbytes
	StorageSize int32 `json:"storageSize"`

	// SupportedOSTypes A list of operating systems which this flavour configuration can support e.g., RHEL Linux, Ubuntu 18.04 LTS, MS Windows 2012 R2.
	SupportedOSTypes []OSType `json:"supportedOSTypes"`

	// Vpu Number of Intel VPUs available
	Vpu *int `json:"vpu,omitempty"`
}

// FlavourId An identifier to refer to a specific combination of compute resources.
type FlavourId = string

// Fqdn defines model for Fqdn.
type Fqdn = string

// GeoLocation Latitude,Longitude as decimal fraction up to 4 digit precision
type GeoLocation = string

// GpuInfo defines model for GpuInfo.
type GpuInfo struct {
	// GpuMemory GPU memory in Mbytes
	GpuMemory int `json:"gpuMemory"`

	// GpuModeName Model name corresponding to vendorType may include info e.g. for NVIDIA, model name could be “Tesla M60”, “Tesla V100” etc.
	GpuModeName string `json:"gpuModeName"`

	// GpuVendorType GPU vendor name e.g. NVIDIA, AMD etc.
	GpuVendorType GpuInfoGpuVendorType `json:"gpuVendorType"`

	// NumGPU Number of GPUs
	NumGPU int `json:"numGPU"`
}

// GpuInfoGpuVendorType GPU vendor name e.g. NVIDIA, AMD etc.
type GpuInfoGpuVendorType string

// HugePage defines model for HugePage.
type HugePage struct {
	// Number Total number of huge pages
	Number int `json:"number"`

	// PageSize Size of hugepage
	PageSize HugePagePageSize `json:"pageSize"`
}

// HugePagePageSize Size of hugepage
type HugePagePageSize string

// InstanceIdentifier Unique identifier generated by the partner OP to identify an instance of the application on a specific zone.
type InstanceIdentifier = string

// InstanceState Running status of the application instance.
type InstanceState string

// InterfaceDetails defines model for InterfaceDetails.
type InterfaceDetails struct {
	// InterfaceName Interface Name. Required only if application has to be attached to a network other than default.
	InterfaceName *string `json:"InterfaceName,omitempty"`

	// CommPort Port number exposed by the component. OP may generate a dynamic port towards the UCs corresponding to this internal port and forward the client traffic from dynamic port to container Port.
	CommPort int32 `json:"commPort"`

	// CommProtocol Defines the IP transport communication protocol i.e., TCP, UDP or HTTP
	CommProtocol InterfaceDetailsCommProtocol `json:"commProtocol"`

	// InterfaceId Each Port and corresponding traffic protocol exposed by the component is identified by a name. Application client on user device requires this to uniquely identify the interface.
	InterfaceId InterfaceId `json:"interfaceId"`

	// Network Name of the network. In case the application has to be associated with more than 1 network then app provider must define the name of the network on which this interface has to be exposed. This parameter is required only if the port has to be exposed on a specific network other than default.
	Network *string `json:"network,omitempty"`

	// VisibilityType Defines whether the interface is exposed to outer world or not i.e., external, or internal. If this is set to "external", then it is exposed to external applications otherwise it is exposed internally to edge application components within edge cloud. When exposed to external world, an external dynamic port is assigned for UC traffic and mapped to the internal container Port
	VisibilityType InterfaceDetailsVisibilityType `json:"visibilityType"`
}

// InterfaceDetailsCommProtocol Defines the IP transport communication protocol i.e., TCP, UDP or HTTP
type InterfaceDetailsCommProtocol string

// InterfaceDetailsVisibilityType Defines whether the interface is exposed to outer world or not i.e., external, or internal. If this is set to "external", then it is exposed to external applications otherwise it is exposed internally to edge application components within edge cloud. When exposed to external world, an external dynamic port is assigned for UC traffic and mapped to the internal container Port
type InterfaceDetailsVisibilityType string

// InterfaceId Each Port and corresponding traffic protocol exposed by the component is identified by a name. Application client on user device requires this to uniquely identify the interface.
type InterfaceId = string

// InvalidParam defines model for InvalidParam.
type InvalidParam struct {
	Param  string  `json:"param"`
	Reason *string `json:"reason,omitempty"`
}

// Ipv4Addr defines model for Ipv4Addr.
type Ipv4Addr = string

// Ipv6Addr defines model for Ipv6Addr.
type Ipv6Addr = interface{}

// Mcc defines model for Mcc.
type Mcc = string

// Mnc defines model for Mnc.
type Mnc = string

// MobileNetworkIds defines model for MobileNetworkIds.
type MobileNetworkIds struct {
	Mcc  *Mcc   `json:"mcc,omitempty"`
	Mncs *[]Mnc `json:"mncs,omitempty"`
}

// OSType defines model for OSType.
type OSType struct {
	Architecture OSTypeArchitecture `json:"architecture"`
	Distribution OSTypeDistribution `json:"distribution"`
	License      OSTypeLicense      `json:"license"`
	Version      OSTypeVersion      `json:"version"`
}

// OSTypeArchitecture defines model for OSType.Architecture.
type OSTypeArchitecture string

// OSTypeDistribution defines model for OSType.Distribution.
type OSTypeDistribution string

// OSTypeLicense defines model for OSType.License.
type OSTypeLicense string

// OSTypeVersion defines model for OSType.Version.
type OSTypeVersion string

// ObjectRepoLocation defines model for ObjectRepoLocation.
type ObjectRepoLocation struct {
	// Password Password to access the repository
	Password *string `json:"password,omitempty"`
	RepoURL  *Uri    `json:"repoURL,omitempty"`

	// Token Authorization token to access the repository
	Token *string `json:"token,omitempty"`

	// UserName Username to access the repository
	UserName *string `json:"userName,omitempty"`
}

// PersistentVolumeDetails defines model for PersistentVolumeDetails.
type PersistentVolumeDetails struct {
	// AccessMode Values are RW (read/write) and RO (read-only)l
	AccessMode *PersistentVolumeDetailsAccessMode `json:"accessMode,omitempty"`

	// EphemeralType It indicates the ephemeral storage on the node and contents are not preserved if containers restarts
	EphemeralType *bool `json:"ephemeralType,omitempty"`

	// SharingPolicy Exclusive or Shared. If shared, then in case of multiple containers same volume will be shared across the containers.
	SharingPolicy *PersistentVolumeDetailsSharingPolicy `json:"sharingPolicy,omitempty"`

	// VolumeMountPath Defines the mount path of the volume
	VolumeMountPath string `json:"volumeMountPath"`

	// VolumeName Human readable name for the volume
	VolumeName string `json:"volumeName"`

	// VolumeSize size of the volume given by user (10GB, 20GB, 50 GB or 100GB)
	VolumeSize PersistentVolumeDetailsVolumeSize `json:"volumeSize"`
}

// PersistentVolumeDetailsAccessMode Values are RW (read/write) and RO (read-only)l
type PersistentVolumeDetailsAccessMode string

// PersistentVolumeDetailsSharingPolicy Exclusive or Shared. If shared, then in case of multiple containers same volume will be shared across the containers.
type PersistentVolumeDetailsSharingPolicy string

// PersistentVolumeDetailsVolumeSize size of the volume given by user (10GB, 20GB, 50 GB or 100GB)
type PersistentVolumeDetailsVolumeSize string

// PoolId OP defined Identifier for the pool reserved for the ISV. It should be unique with an OP.
type PoolId = string

// PoolName ISV defined name of the resource pool.
type PoolName = string

// Port defines model for Port.
type Port = int

// ProblemDetails defines model for ProblemDetails.
type ProblemDetails struct {
	Cause         *string         `json:"cause,omitempty"`
	Detail        *string         `json:"detail,omitempty"`
	InvalidParams *[]InvalidParam `json:"invalidParams,omitempty"`
	Title         *string         `json:"title,omitempty"`
}

// ResourceReservationDuration Time period for which resources are to be reserved starting from now
type ResourceReservationDuration struct {
	// NumOfDays Number of days to be reserved
	NumOfDays *int32 `json:"numOfDays,omitempty"`

	// NumOfMonths Number of months to be reserved
	NumOfMonths *int32 `json:"numOfMonths,omitempty"`

	// NumOfYears Number of years to be reserved
	NumOfYears *int32 `json:"numOfYears,omitempty"`
}

// ServiceEndpoint defines model for ServiceEndpoint.
type ServiceEndpoint struct {
	Fqdn          *Fqdn       `json:"fqdn,omitempty"`
	Ipv4Addresses *[]Ipv4Addr `json:"ipv4Addresses,omitempty"`
	Ipv6Addresses *[]Ipv6Addr `json:"ipv6Addresses,omitempty"`
	Port          Port        `json:"port"`
	union         json.RawMessage
}

// ServiceEndpoint0 defines model for .
type ServiceEndpoint0 = interface{}

// ServiceEndpoint1 defines model for .
type ServiceEndpoint1 = interface{}

// ServiceEndpoint2 defines model for .
type ServiceEndpoint2 = interface{}

// Status defines model for Status.
type Status string

// Uri defines model for Uri.
type Uri = string

// Vcpu Number of vcpus in whole, decimal up to millivcpu, or millivcpu format.
type Vcpu = string

// VirtImageType Indicate if the file is Container image or VM image (QCOW2, OVA)
type VirtImageType string

// ZoneDetails defines model for ZoneDetails.
type ZoneDetails struct {
	// GeographyDetails Details about cities or state covered by the edge. Details about the type of locality for eg rural, urban, industrial etc. This information is defined in human readable form.
	GeographyDetails string `json:"geographyDetails"`

	// Geolocation Latitude,Longitude as decimal fraction up to 4 digit precision
	Geolocation GeoLocation `json:"geolocation"`

	// ZoneId Human readable name of the zone.
	ZoneId ZoneIdentifier `json:"zoneId"`
}

// ZoneIdentifier Human readable name of the zone.
type ZoneIdentifier = string

// ZoneRegisteredData defines model for ZoneRegisteredData.
type ZoneRegisteredData struct {
	// ComputeResourceQuotaLimits Max quota on resources partner OP allows over reserved resources.
	ComputeResourceQuotaLimits []ComputeResourceInfo `json:"computeResourceQuotaLimits"`
	FlavoursSupported          []Flavour             `json:"flavoursSupported"`
	NetworkResources           *struct {
		// DedicatedNIC Number of network interface cards which can be dedicatedly assigned to application pods on isolated networks. This includes virtual as well physical NICs
		DedicatedNIC int32 `json:"dedicatedNIC"`

		// EgressBandWidth Max dl throughput that this edge can offer. It is defined in Mbps.
		EgressBandWidth int32 `json:"egressBandWidth"`

		// SupportDPDK If this zone supports DPDK based networking.
		SupportDPDK bool `json:"supportDPDK"`

		// SupportSriov If this zone support SRIOV networks or not
		SupportSriov bool `json:"supportSriov"`
	} `json:"networkResources,omitempty"`

	// ReservedComputeResources Resources exclusively reserved for the originator OP.
	ReservedComputeResources []ComputeResourceInfo `json:"reservedComputeResources"`

	// ZoneId Human readable name of the zone.
	ZoneId ZoneIdentifier `json:"zoneId"`
}

// ZoneRegistrationRequestData defines model for ZoneRegistrationRequestData.
type ZoneRegistrationRequestData struct {
	AcceptedAvailabilityZones []ZoneIdentifier `json:"acceptedAvailabilityZones"`
	AvailZoneNotifLink        Uri              `json:"availZoneNotifLink"`
}

// ZoneRegistrationResponseData defines model for ZoneRegistrationResponseData.
type ZoneRegistrationResponseData struct {
	AcceptedZoneResourceInfo []ZoneRegisteredData `json:"acceptedZoneResourceInfo"`
}

// N400 defines model for 400.
type N400 = ProblemDetails

// N401 defines model for 401.
type N401 = ProblemDetails

// N404 defines model for 404.
type N404 = ProblemDetails

// N409 defines model for 409.
type N409 = ProblemDetails

// N422 defines model for 422.
type N422 = ProblemDetails

// N500 defines model for 500.
type N500 = ProblemDetails

// N503 defines model for 503.
type N503 = ProblemDetails

// N520 defines model for 520.
type N520 = ProblemDetails

// AppInstCallbackLinkJSONBody defines parameters for AppInstCallbackLink.
type AppInstCallbackLinkJSONBody struct {
	// AppId Identifier used to refer to an application.
	AppId AppIdentifier `json:"appId"`

	// AppInstanceId Unique identifier generated by the partner OP to identify an instance of the application on a specific zone.
	AppInstanceId   InstanceIdentifier `json:"appInstanceId"`
	AppInstanceInfo struct {
		// AccesspointInfo Information about the IP and Port exposed by the OP. Application clients shall use these access points to reach this application instance.
		AccesspointInfo *AccessPointInfo `json:"accesspointInfo,omitempty"`

		// AppInstanceState Running status of the application instance.
		AppInstanceState *InstanceState `json:"appInstanceState,omitempty"`

		// Message Event information or failure message.
		Message *string `json:"message,omitempty"`
	} `json:"appInstanceInfo"`

	// FederationContextId This identifier shall be provided by the partner OP on successful verification and validation of the federation create request and is used by partner op to identify this newly created federation context. Originating OP shall provide this identifier in any subsequent request towards the partner op.
	FederationContextId *FederationContextId `json:"federationContextId,omitempty"`

	// ModificationDate Date and time of the instance state modification by partner OP.
	ModificationDate *time.Time `json:"modificationDate,omitempty"`

	// ZoneId Human readable name of the zone.
	ZoneId ZoneIdentifier `json:"zoneId"`
}

// AppStatusCallbackLinkJSONBody defines parameters for AppStatusCallbackLink.
type AppStatusCallbackLinkJSONBody struct {
	// AppId Identifier used to refer to an application.
	AppId AppIdentifier `json:"appId"`

	// FederationContextId This identifier shall be provided by the partner OP on successful verification and validation of the federation create request and is used by partner op to identify this newly created federation context. Originating OP shall provide this identifier in any subsequent request towards the partner op.
	FederationContextId *FederationContextId `json:"federationContextId,omitempty"`
	StatusInfo          []struct {
		// OnboardStatusInfo Defines change in application status. This change could be related to application itself or an application instance status
		OnboardStatusInfo AppStatusCallbackLinkJSONBodyStatusInfoOnboardStatusInfo `json:"onboardStatusInfo"`

		// ZoneId Human readable name of the zone.
		ZoneId ZoneIdentifier `json:"zoneId"`
	} `json:"statusInfo"`
}

// AppStatusCallbackLinkJSONBodyStatusInfoOnboardStatusInfo defines parameters for AppStatusCallbackLink.
type AppStatusCallbackLinkJSONBodyStatusInfoOnboardStatusInfo string

// AvailZoneNotifLinkJSONBody defines parameters for AvailZoneNotifLink.
type AvailZoneNotifLinkJSONBody struct {
	// FederationContextId This identifier shall be provided by the partner OP on successful verification and validation of the federation create request and is used by partner op to identify this newly created federation context. Originating OP shall provide this identifier in any subsequent request towards the partner op.
	FederationContextId *FederationContextId `json:"federationContextId,omitempty"`

	// ZoneId Human readable name of the zone.
	ZoneId         ZoneIdentifier `json:"zoneId"`
	ZoneResUpdInfo []struct {
		// AvailableCompResources Resources exclusively reserved for the originator OP.
		AvailableCompResources *[]ComputeResourceInfo `json:"availableCompResources,omitempty"`
		AvailableNetResources  *struct {
			DedicatedNIC *int32 `json:"dedicatedNIC,omitempty"`

			// EgressBandWidth Max dl throughput that this edge can offer. It is defined in Mbps.
			EgressBandWidth *int32 `json:"egressBandWidth,omitempty"`

			// SupportDPDK If this zone supports DPDK based networking
			SupportDPDK *bool `json:"supportDPDK,omitempty"`

			// SupportSriov If this zone support SRIOV networks or not
			SupportSriov *bool `json:"supportSriov,omitempty"`
		} `json:"availableNetResources,omitempty"`
	} `json:"zoneResUpdInfo"`
}

// PartnerStatusLinkJSONBody defines parameters for PartnerStatusLink.
type PartnerStatusLinkJSONBody struct {
	// AddFixedNetworkIds List of network identifier associated with the fixed line network of the operator platform.
	AddFixedNetworkIds  *FixedNetworkIds  `json:"addFixedNetworkIds,omitempty"`
	AddMobileNetworkIds *MobileNetworkIds `json:"addMobileNetworkIds,omitempty"`

	// AddZones List of zones, which the operator platform wishes to make available to developers/ISVs of requesting operator platform.
	AddZones                 *[]ZoneDetails   `json:"addZones,omitempty"`
	EdgeDiscoverySvcEndPoint *ServiceEndpoint `json:"edgeDiscoverySvcEndPoint,omitempty"`

	// FederationContextId This identifier shall be provided by the partner OP on successful verification and validation of the federation create request and is used by partner op to identify this newly created federation context. Originating OP shall provide this identifier in any subsequent request towards the partner op.
	FederationContextId *FederationContextId `json:"federationContextId,omitempty"`
	FederationStatus    *Status              `json:"federationStatus,omitempty"`
	LcmSvcEndPoint      *ServiceEndpoint     `json:"lcmSvcEndPoint,omitempty"`

	// ModificationDate Date and time of the federation modification by the originating partner OP
	ModificationDate time.Time                              `json:"modificationDate"`
	ObjectType       PartnerStatusLinkJSONBodyObjectType    `json:"objectType"`
	OperationType    PartnerStatusLinkJSONBodyOperationType `json:"operationType"`

	// RemoveFixedNetworkIds List of network identifier associated with the fixed line network of the operator platform.
	RemoveFixedNetworkIds  *FixedNetworkIds  `json:"removeFixedNetworkIds,omitempty"`
	RemoveMobileNetworkIds *MobileNetworkIds `json:"removeMobileNetworkIds,omitempty"`

	// RemoveZones List of zones, which the operator platform no longer wishes to share.
	RemoveZones *[]ZoneIdentifier `json:"removeZones,omitempty"`
	ZoneStatus  *[]struct {
		Status Status `json:"status"`

		// ZoneId Human readable name of the zone.
		ZoneId ZoneIdentifier `json:"zoneId"`
	} `json:"zoneStatus,omitempty"`
}

// PartnerStatusLinkJSONBodyObjectType defines parameters for PartnerStatusLink.
type PartnerStatusLinkJSONBodyObjectType string

// PartnerStatusLinkJSONBodyOperationType defines parameters for PartnerStatusLink.
type PartnerStatusLinkJSONBodyOperationType string

// ResourceReservationCallbackLinkJSONBody defines parameters for ResourceReservationCallbackLink.
type ResourceReservationCallbackLinkJSONBody struct {
	// AppProviderId UserId of the app provider. Identifier is relevant only in context of this federation.
	AppProviderId AppProviderId `json:"appProviderId"`

	// FederationContextId This identifier shall be provided by the partner OP on successful verification and validation of the federation create request and is used by partner op to identify this newly created federation context. Originating OP shall provide this identifier in any subsequent request towards the partner op.
	FederationContextId *FederationContextId `json:"federationContextId,omitempty"`
	GrantedFlavours     []struct {
		// FlavourId An identifier to refer to a specific combination of compute resources.
		FlavourId FlavourId `json:"flavourId"`

		// NumFlavour Count of flavour
		NumFlavour int32 `json:"numFlavour"`
	} `json:"grantedFlavours"`

	// PoolId OP defined Identifier for the pool reserved for the ISV. It should be unique with an OP.
	PoolId PoolId `json:"poolId"`

	// ZoneId Human readable name of the zone.
	ZoneId ZoneIdentifier `json:"zoneId"`
}

// InstallAppJSONBody defines parameters for InstallApp.
type InstallAppJSONBody struct {
	// AppId Identifier used to refer to an application.
	AppId               AppIdentifier `json:"appId"`
	AppInstCallbackLink Uri           `json:"appInstCallbackLink"`

	// AppInstanceId Unique identifier generated by the partner OP to identify an instance of the application on a specific zone.
	AppInstanceId InstanceIdentifier `json:"appInstanceId"`

	// AppProviderId UserId of the app provider. Identifier is relevant only in context of this federation.
	AppProviderId AppProviderId `json:"appProviderId"`

	// AppVersion Version info of the application
	AppVersion string `json:"appVersion"`
	ZoneInfo   struct {
		// FlavourId An identifier to refer to a specific combination of compute resources.
		FlavourId FlavourId `json:"flavourId"`

		// ResPool Resource pool to be used for application instantiation on this zone. Valid only if IE 'resourceConsumption' is set to 'RESERVED_RES_SHALL' or 'RESERVED_RES_PREFER'
		ResPool *string `json:"resPool,omitempty"`

		// ResourceConsumption Specifies if the application can be instantiated using pre-reserved resource or not. App provider can pre-reserve a pool of compute resource on each zone. 'RESERVED_RES_SHALL' instruct OP to use only the pre-reserved resources. 'RESERVED_RES_PREFER' instruct to first try using pre-reserved resource, if none available go for non-reserved resources. 'RESERVED_RES_AVOID' instruct OP not to use pre-reserved resource if possible, it is a choice depending upon circumstances 'RESERVED_RES_FORBID' instruct OP not to use pre-reserved resources.
		ResourceConsumption *InstallAppJSONBodyZoneInfoResourceConsumption `json:"resourceConsumption,omitempty"`

		// ZoneId Human readable name of the zone.
		ZoneId ZoneIdentifier `json:"zoneId"`
	} `json:"zoneInfo"`
}

// InstallAppJSONBodyZoneInfoResourceConsumption defines parameters for InstallApp.
type InstallAppJSONBodyZoneInfoResourceConsumption string

// OnboardApplicationJSONBody defines parameters for OnboardApplication.
type OnboardApplicationJSONBody struct {
	// AppComponentSpecs An application may consist of more than one component. Each component is associated with a descriptor and may exposes its services externally or internally. App providers are required to provide details about all these components, their associated descriptors and their DNS names.
	AppComponentSpecs AppComponentSpecs `json:"appComponentSpecs"`

	// AppDeploymentZones Details about partner OP zones where the application should be made available;  This field when specified will instruct the OP to restrict application instantiation only on the listed zones.
	AppDeploymentZones *[]ZoneIdentifier `json:"appDeploymentZones,omitempty"`

	// AppId Identifier used to refer to an application.
	AppId AppIdentifier `json:"appId"`

	// AppMetaData Application metadata details
	AppMetaData AppMetaData `json:"appMetaData"`

	// AppProviderId UserId of the app provider. Identifier is relevant only in context of this federation.
	AppProviderId AppProviderId `json:"appProviderId"`

	// AppQoSProfile Parameters corresponding to the performance constraints, tenancy details etc.
	AppQoSProfile         AppQoSProfile `json:"appQoSProfile"`
	AppStatusCallbackLink Uri           `json:"appStatusCallbackLink"`
}

// UpdateApplicationJSONBody defines parameters for UpdateApplication.
type UpdateApplicationJSONBody struct {
	// AppComponentSpecs An application may consist of more than one component. Each component is associated with a descriptor and may exposes its services externally or internally. App providers are required to provide details about all these components, their associated descriptors and their DNS names.
	AppComponentSpecs *[]UpdateApplicationJSONBody_AppComponentSpecs_Item `json:"appComponentSpecs,omitempty"`

	// AppUpdQoSProfile Parameters corresponding to the performance constraints, tenancy details etc.
	AppUpdQoSProfile *UpdateApplicationJSONBody_AppUpdQoSProfile `json:"appUpdQoSProfile,omitempty"`
}

// UpdateApplicationJSONBodyAppComponentSpecs0 defines parameters for UpdateApplication.
type UpdateApplicationJSONBodyAppComponentSpecs0 = interface{}

// UpdateApplicationJSONBodyAppComponentSpecs1 defines parameters for UpdateApplication.
type UpdateApplicationJSONBodyAppComponentSpecs1 = interface{}

// UpdateApplicationJSONBodyAppComponentSpecs2 defines parameters for UpdateApplication.
type UpdateApplicationJSONBodyAppComponentSpecs2 = interface{}

// UpdateApplicationJSONBody_AppComponentSpecs_Item defines parameters for UpdateApplication.
type UpdateApplicationJSONBody_AppComponentSpecs_Item struct {
	// ArtefactId A globally unique identifier associated with the artefact. Originating OP generates this identifier when artefact is submitted over NBI.
	ArtefactId *ArtefactId `json:"artefactId,omitempty"`

	// ComponentName Must be a valid RFC 1123 label name. Component name must be unique with an application
	ComponentName string `json:"componentName"`

	// ServiceNameEW Must be a valid RFC 1123 label name. This defines the DNS name via which the component can be accessed via peer components. Access via serviceNameEW is open on all ports. Platform shall not expose serviceNameEW externally outside edge.
	ServiceNameEW *string `json:"serviceNameEW,omitempty"`

	// ServiceNameNB Must be a valid RFC 1123 label name. This defines the DNS name via which the component can be accessed over NBI. Access via serviceNameNB is restricted on specific ports. Platform shall expose component access externally via this DNS name
	ServiceNameNB *string `json:"serviceNameNB,omitempty"`
	union         json.RawMessage
}

// UpdateApplicationJSONBodyAppUpdQoSProfileLatencyConstraints defines parameters for UpdateApplication.
type UpdateApplicationJSONBodyAppUpdQoSProfileLatencyConstraints string

// UpdateApplicationJSONBodyAppUpdQoSProfileMultiUserClients defines parameters for UpdateApplication.
type UpdateApplicationJSONBodyAppUpdQoSProfileMultiUserClients string

// UpdateApplicationJSONBodyAppUpdQoSProfile0 defines parameters for UpdateApplication.
type UpdateApplicationJSONBodyAppUpdQoSProfile0 = interface{}

// UpdateApplicationJSONBodyAppUpdQoSProfile1 defines parameters for UpdateApplication.
type UpdateApplicationJSONBodyAppUpdQoSProfile1 = interface{}

// UpdateApplicationJSONBodyAppUpdQoSProfile2 defines parameters for UpdateApplication.
type UpdateApplicationJSONBodyAppUpdQoSProfile2 = interface{}

// UpdateApplicationJSONBodyAppUpdQoSProfile3 defines parameters for UpdateApplication.
type UpdateApplicationJSONBodyAppUpdQoSProfile3 = interface{}

// UpdateApplicationJSONBodyAppUpdQoSProfile4 defines parameters for UpdateApplication.
type UpdateApplicationJSONBodyAppUpdQoSProfile4 = interface{}

// UpdateApplicationJSONBody_AppUpdQoSProfile defines parameters for UpdateApplication.
type UpdateApplicationJSONBody_AppUpdQoSProfile struct {
	// AppProvisioning Define if application can be instantiated or not
	AppProvisioning *bool `json:"appProvisioning,omitempty"`

	// BandwidthRequired Data transfer bandwidth requirement (minimum limit) for the application. It should in Mbits/sec
	BandwidthRequired *int32 `json:"bandwidthRequired,omitempty"`

	// LatencyConstraints Latency requirements for the application. Allowed values (non-standardized) are none, low and ultra-low. Ultra-Low may corresponds to range 15 - 30 msec, Low correspond to range 30 - 50 msec. None means 51 and above
	LatencyConstraints *UpdateApplicationJSONBodyAppUpdQoSProfileLatencyConstraints `json:"latencyConstraints,omitempty"`

	// MobilitySupport Indicates if an application is sensitive to user mobility and can be relocated. Default is “FALSE”
	MobilitySupport *bool `json:"mobilitySupport,omitempty"`

	// MultiUserClients Single user type application are designed to serve just one client. Multi user type application is designed to serve multiple clients
	MultiUserClients *UpdateApplicationJSONBodyAppUpdQoSProfileMultiUserClients `json:"multiUserClients,omitempty"`

	// NoOfUsersPerAppInst Maximum no of clients that can connect to an instance of this application. This parameter is relevant only for application of type multi user
	NoOfUsersPerAppInst *int `json:"noOfUsersPerAppInst,omitempty"`
	union               json.RawMessage
}

// OnboardExistingAppNewZonesJSONBody defines parameters for OnboardExistingAppNewZones.
type OnboardExistingAppNewZonesJSONBody = []ZoneIdentifier

// LockUnlockApplicationZoneJSONBody defines parameters for LockUnlockApplicationZone.
type LockUnlockApplicationZoneJSONBody = []map[string]interface{}

// UploadArtefactMultipartBody defines parameters for UploadArtefact.
type UploadArtefactMultipartBody struct {
	// AppProviderId UserId of the app provider. Identifier is relevant only in context of this federation.
	AppProviderId AppProviderId `json:"appProviderId"`

	// ArtefactDescription Brief description of the artefact by the application provider
	ArtefactDescription *string `json:"artefactDescription,omitempty"`

	// ArtefactDescriptorType Type of descriptor present in the artefact. App provider can either define either a Helm chart or a Terraform script or container spec.
	ArtefactDescriptorType UploadArtefactMultipartBodyArtefactDescriptorType `json:"artefactDescriptorType"`

	// ArtefactFile Helm archive/Terraform archive/container spec file or Binary image associated with an application component.
	ArtefactFile *openapi_types.File `json:"artefactFile,omitempty"`

	// ArtefactFileFormat Artefacts like Helm charts or Terraform scripts may need compressed format.
	ArtefactFileFormat *UploadArtefactMultipartBodyArtefactFileFormat `json:"artefactFileFormat,omitempty"`

	// ArtefactFileName Name of the file.
	ArtefactFileName *string `json:"artefactFileName,omitempty"`

	// ArtefactId A globally unique identifier associated with the artefact. Originating OP generates this identifier when artefact is submitted over NBI.
	ArtefactId ArtefactId `json:"artefactId"`

	// ArtefactName Name of the artefact.
	ArtefactName         ArtefactName        `json:"artefactName"`
	ArtefactRepoLocation *ObjectRepoLocation `json:"artefactRepoLocation,omitempty"`

	// ArtefactVersionInfo Artefact version information
	ArtefactVersionInfo string                                      `json:"artefactVersionInfo"`
	ArtefactVirtType    UploadArtefactMultipartBodyArtefactVirtType `json:"artefactVirtType"`

	// ComponentSpec Details about compute, networking and storage requirements for each component of the application. App provider should define all information needed to instantiate the component. If artefact is being defined at component level this section should have information just about the component. In case the artefact is being defined at application level the section should provide details about all the components.
	ComponentSpec []ComponentSpec `json:"componentSpec"`

	// RepoType Artefact or file repository location. PUBLICREPO is used of public URLs like GitHub, Helm repo, docker registry etc., PRIVATEREPO is used for private repo managed by the application developer, UPLOAD is for the case when artefact/file is uploaded from MEC web portal. OP should pull the image from ‘repoUrl' immediately after receiving the request and then send back the response. In case the repoURL corresponds to a docker registry, use docker v2 http api to do the pull.
	RepoType *UploadArtefactMultipartBodyRepoType `json:"repoType,omitempty"`
}

// UploadArtefactMultipartBodyArtefactDescriptorType defines parameters for UploadArtefact.
type UploadArtefactMultipartBodyArtefactDescriptorType string

// UploadArtefactMultipartBodyArtefactFileFormat defines parameters for UploadArtefact.
type UploadArtefactMultipartBodyArtefactFileFormat string

// UploadArtefactMultipartBodyArtefactVirtType defines parameters for UploadArtefact.
type UploadArtefactMultipartBodyArtefactVirtType string

// UploadArtefactMultipartBodyRepoType defines parameters for UploadArtefact.
type UploadArtefactMultipartBodyRepoType string

// GetCandidateZonesJSONBody defines parameters for GetCandidateZones.
type GetCandidateZonesJSONBody struct {
	// AppId Identifier used to refer to an application.
	AppId AppIdentifier `json:"appId"`

	// AppProviderId UserId of the app provider. Identifier is relevant only in context of this federation.
	AppProviderId        AppProviderId `json:"appProviderId"`
	EdgeDiscoveryFilters *struct {
		Location *ClientLocation `json:"location,omitempty"`
	} `json:"edgeDiscoveryFilters,omitempty"`
}

// UploadFileMultipartBody defines parameters for UploadFile.
type UploadFileMultipartBody struct {
	// AppProviderId UserId of the app provider. Identifier is relevant only in context of this federation.
	AppProviderId AppProviderId `json:"appProviderId"`

	// Checksum MD5 checksum for VM and file-based images, sha256 digest for containers
	Checksum *string `json:"checksum,omitempty"`

	// File Binary image associated with an application component.
	File *openapi_types.File `json:"file,omitempty"`

	// FileDescription Brief description about the image file.
	FileDescription *string `json:"fileDescription,omitempty"`

	// FileId A globally unique identifier associated with the image file. Originating OP generates this identifier when file is uploaded over NBI.
	FileId FileId `json:"fileId"`

	// FileName Name of the image file.
	FileName         FileName            `json:"fileName"`
	FileRepoLocation *ObjectRepoLocation `json:"fileRepoLocation,omitempty"`

	// FileType Indicate if the file is Container image or VM image (QCOW2, OVA)
	FileType VirtImageType `json:"fileType"`

	// FileVersionInfo File version information
	FileVersionInfo string `json:"fileVersionInfo"`

	// ImgInsSetArch CPU Instruction Set Architecture (ISA) E.g., Intel, Arm etc.
	ImgInsSetArch CPUArchType `json:"imgInsSetArch"`
	ImgOSType     OSType      `json:"imgOSType"`

	// RepoType Artefact or file repository location. PUBLICREPO is used of public URLs like GitHub, Helm repo, docker registry etc., PRIVATEREPO is used for private repo managed by the application developer, UPLOAD is for the case when artefact/file is uploaded from MEC web portal. OP should pull the image from ‘repoUrl' immediately after receiving the request and then send back the response. In case the repoURL corresponds to a docker registry, use docker v2 http api to do the pull.
	RepoType *UploadFileMultipartBodyRepoType `json:"repoType,omitempty"`
}

// UploadFileMultipartBodyRepoType defines parameters for UploadFile.
type UploadFileMultipartBodyRepoType string

// CreateResourcePoolsJSONBody defines parameters for CreateResourcePools.
type CreateResourcePoolsJSONBody struct {
	// ResRequest Compute flavours to be reserved and their time duration
	ResRequest struct {
		Flavours []struct {
			// FlavourId An identifier to refer to a specific combination of compute resources.
			FlavourId FlavourId `json:"flavourId"`

			// MinNumOfFlavours If specified, indicate the minimum numbers of flavours to be reserved up to maximum as given in “count” member. If partner OP cannot reserve the minimum number of flavours, then the request shall fail.
			MinNumOfFlavours *int32 `json:"minNumOfFlavours,omitempty"`

			// NumFlavour Total number of flavours to be reserved
			NumFlavour int32 `json:"numFlavour"`
		} `json:"flavours"`

		// PoolId OP defined Identifier for the pool reserved for the ISV. It should be unique with an OP.
		PoolId PoolId `json:"poolId"`

		// PoolName ISV defined name of the resource pool.
		PoolName PoolName `json:"poolName"`

		// ReserveDuration Time period for which resources are to be reserved starting from now
		ReserveDuration ResourceReservationDuration `json:"reserveDuration"`
	} `json:"resRequest"`
	ResourceReservationCallbackLink Uri `json:"resourceReservationCallbackLink"`
}

// UpdateISVResPoolJSONBody defines parameters for UpdateISVResPool.
type UpdateISVResPoolJSONBody = []struct {
	// Count Total number of flavours to be reserved
	Count int32 `json:"count"`

	// FlavourId An identifier to refer to a specific combination of compute resources.
	FlavourId FlavourId `json:"flavourId"`

	// ReserveDuration Time period for which resources are to be reserved starting from now
	ReserveDuration *ResourceReservationDuration `json:"reserveDuration,omitempty"`

	// UpdateType Specify if resource corresponding this flavour needs to added or removed. Field 'count' gives the final total no of such flavours that should be reserved. count 0 means remove all the resources.
	UpdateType UpdateISVResPoolJSONBodyUpdateType `json:"updateType"`
}

// UpdateISVResPoolJSONBodyUpdateType defines parameters for UpdateISVResPool.
type UpdateISVResPoolJSONBodyUpdateType string

// UpdateFederationJSONBody defines parameters for UpdateFederation.
type UpdateFederationJSONBody struct {
	// AddFixedNetworkIds List of network identifier associated with the fixed line network of the operator platform.
	AddFixedNetworkIds  *FixedNetworkIds  `json:"addFixedNetworkIds,omitempty"`
	AddMobileNetworkIds *MobileNetworkIds `json:"addMobileNetworkIds,omitempty"`

	// ModificationDate Date and time of the federation modification by the originating partner OP
	ModificationDate time.Time                             `json:"modificationDate"`
	ObjectType       UpdateFederationJSONBodyObjectType    `json:"objectType"`
	OperationType    UpdateFederationJSONBodyOperationType `json:"operationType"`

	// RemoveFixedNetworkIds List of network identifier associated with the fixed line network of the operator platform.
	RemoveFixedNetworkIds  *FixedNetworkIds  `json:"removeFixedNetworkIds,omitempty"`
	RemoveMobileNetworkIds *MobileNetworkIds `json:"removeMobileNetworkIds,omitempty"`
}

// UpdateFederationJSONBodyObjectType defines parameters for UpdateFederation.
type UpdateFederationJSONBodyObjectType string

// UpdateFederationJSONBodyOperationType defines parameters for UpdateFederation.
type UpdateFederationJSONBodyOperationType string

// CreateFederationJSONRequestBody defines body for CreateFederation for application/json ContentType.
type CreateFederationJSONRequestBody = FederationRequestData

// AppInstCallbackLinkJSONRequestBody defines body for AppInstCallbackLink for application/json ContentType.
type AppInstCallbackLinkJSONRequestBody AppInstCallbackLinkJSONBody

// AppStatusCallbackLinkJSONRequestBody defines body for AppStatusCallbackLink for application/json ContentType.
type AppStatusCallbackLinkJSONRequestBody AppStatusCallbackLinkJSONBody

// AvailZoneNotifLinkJSONRequestBody defines body for AvailZoneNotifLink for application/json ContentType.
type AvailZoneNotifLinkJSONRequestBody AvailZoneNotifLinkJSONBody

// PartnerStatusLinkJSONRequestBody defines body for PartnerStatusLink for application/json ContentType.
type PartnerStatusLinkJSONRequestBody PartnerStatusLinkJSONBody

// ResourceReservationCallbackLinkJSONRequestBody defines body for ResourceReservationCallbackLink for application/json ContentType.
type ResourceReservationCallbackLinkJSONRequestBody ResourceReservationCallbackLinkJSONBody

// InstallAppJSONRequestBody defines body for InstallApp for application/json ContentType.
type InstallAppJSONRequestBody InstallAppJSONBody

// OnboardApplicationJSONRequestBody defines body for OnboardApplication for application/json ContentType.
type OnboardApplicationJSONRequestBody OnboardApplicationJSONBody

// UpdateApplicationJSONRequestBody defines body for UpdateApplication for application/json ContentType.
type UpdateApplicationJSONRequestBody UpdateApplicationJSONBody

// OnboardExistingAppNewZonesJSONRequestBody defines body for OnboardExistingAppNewZones for application/json ContentType.
type OnboardExistingAppNewZonesJSONRequestBody = OnboardExistingAppNewZonesJSONBody

// LockUnlockApplicationZoneJSONRequestBody defines body for LockUnlockApplicationZone for application/json ContentType.
type LockUnlockApplicationZoneJSONRequestBody = LockUnlockApplicationZoneJSONBody

// UploadArtefactMultipartRequestBody defines body for UploadArtefact for multipart/form-data ContentType.
type UploadArtefactMultipartRequestBody UploadArtefactMultipartBody

// GetCandidateZonesJSONRequestBody defines body for GetCandidateZones for application/json ContentType.
type GetCandidateZonesJSONRequestBody GetCandidateZonesJSONBody

// UploadFileMultipartRequestBody defines body for UploadFile for multipart/form-data ContentType.
type UploadFileMultipartRequestBody UploadFileMultipartBody

// CreateResourcePoolsJSONRequestBody defines body for CreateResourcePools for application/json ContentType.
type CreateResourcePoolsJSONRequestBody CreateResourcePoolsJSONBody

// UpdateISVResPoolJSONRequestBody defines body for UpdateISVResPool for application/json ContentType.
type UpdateISVResPoolJSONRequestBody = UpdateISVResPoolJSONBody

// UpdateFederationJSONRequestBody defines body for UpdateFederation for application/json ContentType.
type UpdateFederationJSONRequestBody UpdateFederationJSONBody

// ZoneSubscribeJSONRequestBody defines body for ZoneSubscribe for application/json ContentType.
type ZoneSubscribeJSONRequestBody = ZoneRegistrationRequestData

// AsServiceEndpoint0 returns the union data inside the ServiceEndpoint as a ServiceEndpoint0
func (t ServiceEndpoint) AsServiceEndpoint0() (ServiceEndpoint0, error) {
	var body ServiceEndpoint0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromServiceEndpoint0 overwrites any union data inside the ServiceEndpoint as the provided ServiceEndpoint0
func (t *ServiceEndpoint) FromServiceEndpoint0(v ServiceEndpoint0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeServiceEndpoint0 performs a merge with any union data inside the ServiceEndpoint, using the provided ServiceEndpoint0
func (t *ServiceEndpoint) MergeServiceEndpoint0(v ServiceEndpoint0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsServiceEndpoint1 returns the union data inside the ServiceEndpoint as a ServiceEndpoint1
func (t ServiceEndpoint) AsServiceEndpoint1() (ServiceEndpoint1, error) {
	var body ServiceEndpoint1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromServiceEndpoint1 overwrites any union data inside the ServiceEndpoint as the provided ServiceEndpoint1
func (t *ServiceEndpoint) FromServiceEndpoint1(v ServiceEndpoint1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeServiceEndpoint1 performs a merge with any union data inside the ServiceEndpoint, using the provided ServiceEndpoint1
func (t *ServiceEndpoint) MergeServiceEndpoint1(v ServiceEndpoint1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsServiceEndpoint2 returns the union data inside the ServiceEndpoint as a ServiceEndpoint2
func (t ServiceEndpoint) AsServiceEndpoint2() (ServiceEndpoint2, error) {
	var body ServiceEndpoint2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromServiceEndpoint2 overwrites any union data inside the ServiceEndpoint as the provided ServiceEndpoint2
func (t *ServiceEndpoint) FromServiceEndpoint2(v ServiceEndpoint2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeServiceEndpoint2 performs a merge with any union data inside the ServiceEndpoint, using the provided ServiceEndpoint2
func (t *ServiceEndpoint) MergeServiceEndpoint2(v ServiceEndpoint2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ServiceEndpoint) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.Fqdn != nil {
		object["fqdn"], err = json.Marshal(t.Fqdn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'fqdn': %w", err)
		}
	}

	if t.Ipv4Addresses != nil {
		object["ipv4Addresses"], err = json.Marshal(t.Ipv4Addresses)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4Addresses': %w", err)
		}
	}

	if t.Ipv6Addresses != nil {
		object["ipv6Addresses"], err = json.Marshal(t.Ipv6Addresses)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6Addresses': %w", err)
		}
	}

	object["port"], err = json.Marshal(t.Port)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'port': %w", err)
	}

	b, err = json.Marshal(object)
	return b, err
}

func (t *ServiceEndpoint) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["fqdn"]; found {
		err = json.Unmarshal(raw, &t.Fqdn)
		if err != nil {
			return fmt.Errorf("error reading 'fqdn': %w", err)
		}
	}

	if raw, found := object["ipv4Addresses"]; found {
		err = json.Unmarshal(raw, &t.Ipv4Addresses)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4Addresses': %w", err)
		}
	}

	if raw, found := object["ipv6Addresses"]; found {
		err = json.Unmarshal(raw, &t.Ipv6Addresses)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6Addresses': %w", err)
		}
	}

	if raw, found := object["port"]; found {
		err = json.Unmarshal(raw, &t.Port)
		if err != nil {
			return fmt.Errorf("error reading 'port': %w", err)
		}
	}

	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AJ++u/u/AQAA//9AyM5d76IBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
