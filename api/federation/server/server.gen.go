// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package server

import (
	"context"
	"encoding/json"
	"fmt"
	"mime/multipart"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	. "github.com/nbycomp/neonephos-opg-ewbi-api/api/federation/models"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates one direction federation with partner operator platform.
	// (POST /partner)
	CreateFederation(ctx echo.Context) error

	// (POST /{federationCallbackId}/appInstCallbackLink)
	AppInstCallbackLink(ctx echo.Context, federationCallbackId FederationCallbackId) error

	// (POST /{federationCallbackId}/appStatusCallbackLink)
	AppStatusCallbackLink(ctx echo.Context, federationCallbackId FederationCallbackId) error

	// (POST /{federationCallbackId}/availZoneNotifLink)
	AvailZoneNotifLink(ctx echo.Context, federationCallbackId FederationCallbackId) error

	// (POST /{federationCallbackId}/partnerStatusLink)
	PartnerStatusLink(ctx echo.Context, federationCallbackId FederationCallbackId) error

	// (POST /{federationCallbackId}/resourceReservationCallbackLink)
	ResourceReservationCallbackLink(ctx echo.Context, federationCallbackId FederationCallbackId) error
	// Instantiates an application on a partner OP zone.
	// (POST /{federationContextId}/application/lcm)
	InstallApp(ctx echo.Context, federationContextId FederationContextId) error
	// Retrieves all application instance of partner OP
	// (GET /{federationContextId}/application/lcm/app/{appId}/appProvider/{appProviderId})
	GetAllAppInstances(ctx echo.Context, federationContextId FederationContextId, appId AppIdentifier, appProviderId AppProviderId) error
	// Terminate an application instance on a partner OP zone.
	// (DELETE /{federationContextId}/application/lcm/app/{appId}/instance/{appInstanceId}/zone/{zoneId})
	RemoveApp(ctx echo.Context, federationContextId FederationContextId, appId AppIdentifier, appInstanceId InstanceIdentifier, zoneId ZoneIdentifier) error
	// Retrieves an application instance details from partner OP.
	// (GET /{federationContextId}/application/lcm/app/{appId}/instance/{appInstanceId}/zone/{zoneId})
	GetAppInstanceDetails(ctx echo.Context, federationContextId FederationContextId, appId AppIdentifier, appInstanceId InstanceIdentifier, zoneId ZoneIdentifier) error
	// Submits an application details to a partner OP. Based on the details provided,  partner OP shall do bookkeeping, resource validation and other pre-deployment operations.
	// (POST /{federationContextId}/application/onboarding)
	OnboardApplication(ctx echo.Context, federationContextId FederationContextId) error
	// Deboards the application from any zones, if any, and deletes the App.
	// (DELETE /{federationContextId}/application/onboarding/app/{appId})
	DeleteApp(ctx echo.Context, federationContextId FederationContextId, appId AppIdentifier) error
	// Retrieves application details from partner OP
	// (GET /{federationContextId}/application/onboarding/app/{appId})
	ViewApplication(ctx echo.Context, federationContextId FederationContextId, appId AppIdentifier) error
	// Updates partner OP about changes in application compute resource requirements, QOS Profile, associated descriptor or change in associated components
	// (PATCH /{federationContextId}/application/onboarding/app/{appId})
	UpdateApplication(ctx echo.Context, federationContextId FederationContextId, appId AppIdentifier) error
	// Onboards an existing application to a new zone within partner OP.
	// (POST /{federationContextId}/application/onboarding/app/{appId}/additionalZones)
	OnboardExistingAppNewZones(ctx echo.Context, federationContextId FederationContextId, appId AppIdentifier) error
	// Deboards an application from partner OP zones
	// (DELETE /{federationContextId}/application/onboarding/app/{appId}/zone/{zoneId})
	DeboardApplication(ctx echo.Context, federationContextId FederationContextId, appId AppIdentifier, zoneId ZoneIdentifier) error
	// Forbid/allow application instantiation on a partner zone
	// (POST /{federationContextId}/application/onboarding/app/{appId}/zoneForbid)
	LockUnlockApplicationZone(ctx echo.Context, federationContextId FederationContextId, appId AppIdentifier) error
	// Uploads application artefact on partner OP. Artefact is a zip file containing scripts and/or packaging files like Terraform or Helm which are required to create an instance of an application.
	// (POST /{federationContextId}/artefact)
	UploadArtefact(ctx echo.Context, federationContextId FederationContextId) error
	// Removes an artefact from partner OP.
	// (DELETE /{federationContextId}/artefact/{artefactId})
	RemoveArtefact(ctx echo.Context, federationContextId FederationContextId, artefactId ArtefactId) error
	// Retrieves details about an artefact.
	// (GET /{federationContextId}/artefact/{artefactId})
	GetArtefact(ctx echo.Context, federationContextId FederationContextId, artefactId ArtefactId) error
	// Edge discovery procedures towards partner OP over E/WBI. Originating OP request partner OP to provide a list of candidate zones where an application instance can be created. Partner OP applies a set of filtering criteria's to select candidate zones.
	// (POST /{federationContextId}/edgenodesharing/edgeDiscovery)
	GetCandidateZones(ctx echo.Context, federationContextId FederationContextId) error
	// Uploads an image file. Originating OP uses this api to onboard an application image to partner OP.
	// (POST /{federationContextId}/files)
	UploadFile(ctx echo.Context, federationContextId FederationContextId) error
	// Removes an image file from partner OP.
	// (DELETE /{federationContextId}/files/{fileId})
	RemoveFile(ctx echo.Context, federationContextId FederationContextId, fileId FileId) error
	// View an image file from partner OP.
	// (GET /{federationContextId}/files/{fileId})
	ViewFile(ctx echo.Context, federationContextId FederationContextId, fileId FileId) error
	// Retrieves the resource pool reserved by an ISV
	// (GET /{federationContextId}/isv/resource/zone/{zoneId}/appProvider/{appProviderId})
	ViewISVResPool(ctx echo.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, appProviderId AppProviderId) error
	// Reserves resources (compute, network and storage)  on a partner OP zone. ISVs registered with home OP reserves resources on a partner OP zone.
	// (POST /{federationContextId}/isv/resource/zone/{zoneId}/appProvider/{appProviderId})
	CreateResourcePools(ctx echo.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, appProviderId AppProviderId) error
	// Deletes the resource pool reserved by an ISV
	// (DELETE /{federationContextId}/isv/resource/zone/{zoneId}/appProvider/{appProviderId}/pool/{poolId})
	RemoveISVResPool(ctx echo.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, appProviderId AppProviderId, poolId PoolId) error
	// Updates resources reserved for a pool by an ISV
	// (PATCH /{federationContextId}/isv/resource/zone/{zoneId}/appProvider/{appProviderId}/pool/{poolId})
	UpdateISVResPool(ctx echo.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, appProviderId AppProviderId, poolId PoolId) error
	// Remove existing federation with the partner OP
	// (DELETE /{federationContextId}/partner)
	DeleteFederationDetails(ctx echo.Context, federationContextId FederationContextId) error
	// Retrieves details about the federation context with the partner OP. The response shall provide info about the zones offered by the partner, partner OP network codes, information about edge discovery and LCM service etc.
	// (GET /{federationContextId}/partner)
	GetFederationDetails(ctx echo.Context, federationContextId FederationContextId) error
	// API used by the Originating OP towards the partner OP, to update the parameters associated to the existing federation
	// (PATCH /{federationContextId}/partner)
	UpdateFederation(ctx echo.Context, federationContextId FederationContextId) error
	// Validates the authenticity of a roaming user from home OP
	// (GET /{federationContextId}/roaminguserauth/device/{deviceId}/token/{authToken})
	AuthenticateDevice(ctx echo.Context, federationContextId FederationContextId, deviceId DeviceId, authToken AuthorizationToken) error
	// Originating OP informs partner OP that it is willing to access the specified zones and partner OP shall reserve compute and network resources for these zones.
	// (POST /{federationContextId}/zones)
	ZoneSubscribe(ctx echo.Context, federationContextId FederationContextId) error
	// Assert usage of a partner OP zone. Originating OP informs partner OP that it will no longer access the specified zone.
	// (DELETE /{federationContextId}/zones/{zoneId})
	ZoneUnsubscribe(ctx echo.Context, federationContextId FederationContextId, zoneId ZoneIdentifier) error
	// Retrieves details about the computation and network resources that partner OP has reserved for this zone.
	// (GET /{federationContextId}/zones/{zoneId})
	GetZoneData(ctx echo.Context, federationContextId FederationContextId, zoneId ZoneIdentifier) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateFederation converts echo context to params.
func (w *ServerInterfaceWrapper) CreateFederation(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateFederation(ctx)
	return err
}

// AppInstCallbackLink converts echo context to params.
func (w *ServerInterfaceWrapper) AppInstCallbackLink(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationCallbackId" -------------
	var federationCallbackId FederationCallbackId

	err = runtime.BindStyledParameterWithOptions("simple", "federationCallbackId", ctx.Param("federationCallbackId"), &federationCallbackId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationCallbackId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppInstCallbackLink(ctx, federationCallbackId)
	return err
}

// AppStatusCallbackLink converts echo context to params.
func (w *ServerInterfaceWrapper) AppStatusCallbackLink(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationCallbackId" -------------
	var federationCallbackId FederationCallbackId

	err = runtime.BindStyledParameterWithOptions("simple", "federationCallbackId", ctx.Param("federationCallbackId"), &federationCallbackId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationCallbackId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppStatusCallbackLink(ctx, federationCallbackId)
	return err
}

// AvailZoneNotifLink converts echo context to params.
func (w *ServerInterfaceWrapper) AvailZoneNotifLink(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationCallbackId" -------------
	var federationCallbackId FederationCallbackId

	err = runtime.BindStyledParameterWithOptions("simple", "federationCallbackId", ctx.Param("federationCallbackId"), &federationCallbackId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationCallbackId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AvailZoneNotifLink(ctx, federationCallbackId)
	return err
}

// PartnerStatusLink converts echo context to params.
func (w *ServerInterfaceWrapper) PartnerStatusLink(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationCallbackId" -------------
	var federationCallbackId FederationCallbackId

	err = runtime.BindStyledParameterWithOptions("simple", "federationCallbackId", ctx.Param("federationCallbackId"), &federationCallbackId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationCallbackId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PartnerStatusLink(ctx, federationCallbackId)
	return err
}

// ResourceReservationCallbackLink converts echo context to params.
func (w *ServerInterfaceWrapper) ResourceReservationCallbackLink(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationCallbackId" -------------
	var federationCallbackId FederationCallbackId

	err = runtime.BindStyledParameterWithOptions("simple", "federationCallbackId", ctx.Param("federationCallbackId"), &federationCallbackId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationCallbackId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ResourceReservationCallbackLink(ctx, federationCallbackId)
	return err
}

// InstallApp converts echo context to params.
func (w *ServerInterfaceWrapper) InstallApp(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithOptions("simple", "federationContextId", ctx.Param("federationContextId"), &federationContextId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstallApp(ctx, federationContextId)
	return err
}

// GetAllAppInstances converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllAppInstances(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithOptions("simple", "federationContextId", ctx.Param("federationContextId"), &federationContextId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// ------------- Path parameter "appId" -------------
	var appId AppIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "appId", ctx.Param("appId"), &appId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	// ------------- Path parameter "appProviderId" -------------
	var appProviderId AppProviderId

	err = runtime.BindStyledParameterWithOptions("simple", "appProviderId", ctx.Param("appProviderId"), &appProviderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appProviderId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllAppInstances(ctx, federationContextId, appId, appProviderId)
	return err
}

// RemoveApp converts echo context to params.
func (w *ServerInterfaceWrapper) RemoveApp(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithOptions("simple", "federationContextId", ctx.Param("federationContextId"), &federationContextId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// ------------- Path parameter "appId" -------------
	var appId AppIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "appId", ctx.Param("appId"), &appId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	// ------------- Path parameter "appInstanceId" -------------
	var appInstanceId InstanceIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "appInstanceId", ctx.Param("appInstanceId"), &appInstanceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appInstanceId: %s", err))
	}

	// ------------- Path parameter "zoneId" -------------
	var zoneId ZoneIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "zoneId", ctx.Param("zoneId"), &zoneId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter zoneId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RemoveApp(ctx, federationContextId, appId, appInstanceId, zoneId)
	return err
}

// GetAppInstanceDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetAppInstanceDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithOptions("simple", "federationContextId", ctx.Param("federationContextId"), &federationContextId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// ------------- Path parameter "appId" -------------
	var appId AppIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "appId", ctx.Param("appId"), &appId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	// ------------- Path parameter "appInstanceId" -------------
	var appInstanceId InstanceIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "appInstanceId", ctx.Param("appInstanceId"), &appInstanceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appInstanceId: %s", err))
	}

	// ------------- Path parameter "zoneId" -------------
	var zoneId ZoneIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "zoneId", ctx.Param("zoneId"), &zoneId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter zoneId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAppInstanceDetails(ctx, federationContextId, appId, appInstanceId, zoneId)
	return err
}

// OnboardApplication converts echo context to params.
func (w *ServerInterfaceWrapper) OnboardApplication(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithOptions("simple", "federationContextId", ctx.Param("federationContextId"), &federationContextId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OnboardApplication(ctx, federationContextId)
	return err
}

// DeleteApp converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteApp(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithOptions("simple", "federationContextId", ctx.Param("federationContextId"), &federationContextId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// ------------- Path parameter "appId" -------------
	var appId AppIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "appId", ctx.Param("appId"), &appId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteApp(ctx, federationContextId, appId)
	return err
}

// ViewApplication converts echo context to params.
func (w *ServerInterfaceWrapper) ViewApplication(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithOptions("simple", "federationContextId", ctx.Param("federationContextId"), &federationContextId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// ------------- Path parameter "appId" -------------
	var appId AppIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "appId", ctx.Param("appId"), &appId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ViewApplication(ctx, federationContextId, appId)
	return err
}

// UpdateApplication converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateApplication(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithOptions("simple", "federationContextId", ctx.Param("federationContextId"), &federationContextId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// ------------- Path parameter "appId" -------------
	var appId AppIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "appId", ctx.Param("appId"), &appId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateApplication(ctx, federationContextId, appId)
	return err
}

// OnboardExistingAppNewZones converts echo context to params.
func (w *ServerInterfaceWrapper) OnboardExistingAppNewZones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithOptions("simple", "federationContextId", ctx.Param("federationContextId"), &federationContextId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// ------------- Path parameter "appId" -------------
	var appId AppIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "appId", ctx.Param("appId"), &appId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OnboardExistingAppNewZones(ctx, federationContextId, appId)
	return err
}

// DeboardApplication converts echo context to params.
func (w *ServerInterfaceWrapper) DeboardApplication(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithOptions("simple", "federationContextId", ctx.Param("federationContextId"), &federationContextId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// ------------- Path parameter "appId" -------------
	var appId AppIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "appId", ctx.Param("appId"), &appId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	// ------------- Path parameter "zoneId" -------------
	var zoneId ZoneIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "zoneId", ctx.Param("zoneId"), &zoneId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter zoneId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeboardApplication(ctx, federationContextId, appId, zoneId)
	return err
}

// LockUnlockApplicationZone converts echo context to params.
func (w *ServerInterfaceWrapper) LockUnlockApplicationZone(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithOptions("simple", "federationContextId", ctx.Param("federationContextId"), &federationContextId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// ------------- Path parameter "appId" -------------
	var appId AppIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "appId", ctx.Param("appId"), &appId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LockUnlockApplicationZone(ctx, federationContextId, appId)
	return err
}

// UploadArtefact converts echo context to params.
func (w *ServerInterfaceWrapper) UploadArtefact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithOptions("simple", "federationContextId", ctx.Param("federationContextId"), &federationContextId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UploadArtefact(ctx, federationContextId)
	return err
}

// RemoveArtefact converts echo context to params.
func (w *ServerInterfaceWrapper) RemoveArtefact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithOptions("simple", "federationContextId", ctx.Param("federationContextId"), &federationContextId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// ------------- Path parameter "artefactId" -------------
	var artefactId ArtefactId

	err = runtime.BindStyledParameterWithOptions("simple", "artefactId", ctx.Param("artefactId"), &artefactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter artefactId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RemoveArtefact(ctx, federationContextId, artefactId)
	return err
}

// GetArtefact converts echo context to params.
func (w *ServerInterfaceWrapper) GetArtefact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithOptions("simple", "federationContextId", ctx.Param("federationContextId"), &federationContextId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// ------------- Path parameter "artefactId" -------------
	var artefactId ArtefactId

	err = runtime.BindStyledParameterWithOptions("simple", "artefactId", ctx.Param("artefactId"), &artefactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter artefactId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetArtefact(ctx, federationContextId, artefactId)
	return err
}

// GetCandidateZones converts echo context to params.
func (w *ServerInterfaceWrapper) GetCandidateZones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithOptions("simple", "federationContextId", ctx.Param("federationContextId"), &federationContextId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCandidateZones(ctx, federationContextId)
	return err
}

// UploadFile converts echo context to params.
func (w *ServerInterfaceWrapper) UploadFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithOptions("simple", "federationContextId", ctx.Param("federationContextId"), &federationContextId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UploadFile(ctx, federationContextId)
	return err
}

// RemoveFile converts echo context to params.
func (w *ServerInterfaceWrapper) RemoveFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithOptions("simple", "federationContextId", ctx.Param("federationContextId"), &federationContextId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// ------------- Path parameter "fileId" -------------
	var fileId FileId

	err = runtime.BindStyledParameterWithOptions("simple", "fileId", ctx.Param("fileId"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fileId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RemoveFile(ctx, federationContextId, fileId)
	return err
}

// ViewFile converts echo context to params.
func (w *ServerInterfaceWrapper) ViewFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithOptions("simple", "federationContextId", ctx.Param("federationContextId"), &federationContextId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// ------------- Path parameter "fileId" -------------
	var fileId FileId

	err = runtime.BindStyledParameterWithOptions("simple", "fileId", ctx.Param("fileId"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fileId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ViewFile(ctx, federationContextId, fileId)
	return err
}

// ViewISVResPool converts echo context to params.
func (w *ServerInterfaceWrapper) ViewISVResPool(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithOptions("simple", "federationContextId", ctx.Param("federationContextId"), &federationContextId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// ------------- Path parameter "zoneId" -------------
	var zoneId ZoneIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "zoneId", ctx.Param("zoneId"), &zoneId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter zoneId: %s", err))
	}

	// ------------- Path parameter "appProviderId" -------------
	var appProviderId AppProviderId

	err = runtime.BindStyledParameterWithOptions("simple", "appProviderId", ctx.Param("appProviderId"), &appProviderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appProviderId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ViewISVResPool(ctx, federationContextId, zoneId, appProviderId)
	return err
}

// CreateResourcePools converts echo context to params.
func (w *ServerInterfaceWrapper) CreateResourcePools(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithOptions("simple", "federationContextId", ctx.Param("federationContextId"), &federationContextId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// ------------- Path parameter "zoneId" -------------
	var zoneId ZoneIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "zoneId", ctx.Param("zoneId"), &zoneId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter zoneId: %s", err))
	}

	// ------------- Path parameter "appProviderId" -------------
	var appProviderId AppProviderId

	err = runtime.BindStyledParameterWithOptions("simple", "appProviderId", ctx.Param("appProviderId"), &appProviderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appProviderId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateResourcePools(ctx, federationContextId, zoneId, appProviderId)
	return err
}

// RemoveISVResPool converts echo context to params.
func (w *ServerInterfaceWrapper) RemoveISVResPool(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithOptions("simple", "federationContextId", ctx.Param("federationContextId"), &federationContextId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// ------------- Path parameter "zoneId" -------------
	var zoneId ZoneIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "zoneId", ctx.Param("zoneId"), &zoneId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter zoneId: %s", err))
	}

	// ------------- Path parameter "appProviderId" -------------
	var appProviderId AppProviderId

	err = runtime.BindStyledParameterWithOptions("simple", "appProviderId", ctx.Param("appProviderId"), &appProviderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appProviderId: %s", err))
	}

	// ------------- Path parameter "poolId" -------------
	var poolId PoolId

	err = runtime.BindStyledParameterWithOptions("simple", "poolId", ctx.Param("poolId"), &poolId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter poolId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RemoveISVResPool(ctx, federationContextId, zoneId, appProviderId, poolId)
	return err
}

// UpdateISVResPool converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateISVResPool(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithOptions("simple", "federationContextId", ctx.Param("federationContextId"), &federationContextId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// ------------- Path parameter "zoneId" -------------
	var zoneId ZoneIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "zoneId", ctx.Param("zoneId"), &zoneId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter zoneId: %s", err))
	}

	// ------------- Path parameter "appProviderId" -------------
	var appProviderId AppProviderId

	err = runtime.BindStyledParameterWithOptions("simple", "appProviderId", ctx.Param("appProviderId"), &appProviderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appProviderId: %s", err))
	}

	// ------------- Path parameter "poolId" -------------
	var poolId PoolId

	err = runtime.BindStyledParameterWithOptions("simple", "poolId", ctx.Param("poolId"), &poolId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter poolId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateISVResPool(ctx, federationContextId, zoneId, appProviderId, poolId)
	return err
}

// DeleteFederationDetails converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteFederationDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithOptions("simple", "federationContextId", ctx.Param("federationContextId"), &federationContextId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteFederationDetails(ctx, federationContextId)
	return err
}

// GetFederationDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetFederationDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithOptions("simple", "federationContextId", ctx.Param("federationContextId"), &federationContextId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFederationDetails(ctx, federationContextId)
	return err
}

// UpdateFederation converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateFederation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithOptions("simple", "federationContextId", ctx.Param("federationContextId"), &federationContextId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateFederation(ctx, federationContextId)
	return err
}

// AuthenticateDevice converts echo context to params.
func (w *ServerInterfaceWrapper) AuthenticateDevice(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithOptions("simple", "federationContextId", ctx.Param("federationContextId"), &federationContextId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// ------------- Path parameter "deviceId" -------------
	var deviceId DeviceId

	err = runtime.BindStyledParameterWithOptions("simple", "deviceId", ctx.Param("deviceId"), &deviceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deviceId: %s", err))
	}

	// ------------- Path parameter "authToken" -------------
	var authToken AuthorizationToken

	err = runtime.BindStyledParameterWithOptions("simple", "authToken", ctx.Param("authToken"), &authToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter authToken: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthenticateDevice(ctx, federationContextId, deviceId, authToken)
	return err
}

// ZoneSubscribe converts echo context to params.
func (w *ServerInterfaceWrapper) ZoneSubscribe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithOptions("simple", "federationContextId", ctx.Param("federationContextId"), &federationContextId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ZoneSubscribe(ctx, federationContextId)
	return err
}

// ZoneUnsubscribe converts echo context to params.
func (w *ServerInterfaceWrapper) ZoneUnsubscribe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithOptions("simple", "federationContextId", ctx.Param("federationContextId"), &federationContextId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// ------------- Path parameter "zoneId" -------------
	var zoneId ZoneIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "zoneId", ctx.Param("zoneId"), &zoneId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter zoneId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ZoneUnsubscribe(ctx, federationContextId, zoneId)
	return err
}

// GetZoneData converts echo context to params.
func (w *ServerInterfaceWrapper) GetZoneData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithOptions("simple", "federationContextId", ctx.Param("federationContextId"), &federationContextId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// ------------- Path parameter "zoneId" -------------
	var zoneId ZoneIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "zoneId", ctx.Param("zoneId"), &zoneId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter zoneId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetZoneData(ctx, federationContextId, zoneId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/partner", wrapper.CreateFederation)
	router.POST(baseURL+"/:federationCallbackId/appInstCallbackLink", wrapper.AppInstCallbackLink)
	router.POST(baseURL+"/:federationCallbackId/appStatusCallbackLink", wrapper.AppStatusCallbackLink)
	router.POST(baseURL+"/:federationCallbackId/availZoneNotifLink", wrapper.AvailZoneNotifLink)
	router.POST(baseURL+"/:federationCallbackId/partnerStatusLink", wrapper.PartnerStatusLink)
	router.POST(baseURL+"/:federationCallbackId/resourceReservationCallbackLink", wrapper.ResourceReservationCallbackLink)
	router.POST(baseURL+"/:federationContextId/application/lcm", wrapper.InstallApp)
	router.GET(baseURL+"/:federationContextId/application/lcm/app/:appId/appProvider/:appProviderId", wrapper.GetAllAppInstances)
	router.DELETE(baseURL+"/:federationContextId/application/lcm/app/:appId/instance/:appInstanceId/zone/:zoneId", wrapper.RemoveApp)
	router.GET(baseURL+"/:federationContextId/application/lcm/app/:appId/instance/:appInstanceId/zone/:zoneId", wrapper.GetAppInstanceDetails)
	router.POST(baseURL+"/:federationContextId/application/onboarding", wrapper.OnboardApplication)
	router.DELETE(baseURL+"/:federationContextId/application/onboarding/app/:appId", wrapper.DeleteApp)
	router.GET(baseURL+"/:federationContextId/application/onboarding/app/:appId", wrapper.ViewApplication)
	router.PATCH(baseURL+"/:federationContextId/application/onboarding/app/:appId", wrapper.UpdateApplication)
	router.POST(baseURL+"/:federationContextId/application/onboarding/app/:appId/additionalZones", wrapper.OnboardExistingAppNewZones)
	router.DELETE(baseURL+"/:federationContextId/application/onboarding/app/:appId/zone/:zoneId", wrapper.DeboardApplication)
	router.POST(baseURL+"/:federationContextId/application/onboarding/app/:appId/zoneForbid", wrapper.LockUnlockApplicationZone)
	router.POST(baseURL+"/:federationContextId/artefact", wrapper.UploadArtefact)
	router.DELETE(baseURL+"/:federationContextId/artefact/:artefactId", wrapper.RemoveArtefact)
	router.GET(baseURL+"/:federationContextId/artefact/:artefactId", wrapper.GetArtefact)
	router.POST(baseURL+"/:federationContextId/edgenodesharing/edgeDiscovery", wrapper.GetCandidateZones)
	router.POST(baseURL+"/:federationContextId/files", wrapper.UploadFile)
	router.DELETE(baseURL+"/:federationContextId/files/:fileId", wrapper.RemoveFile)
	router.GET(baseURL+"/:federationContextId/files/:fileId", wrapper.ViewFile)
	router.GET(baseURL+"/:federationContextId/isv/resource/zone/:zoneId/appProvider/:appProviderId", wrapper.ViewISVResPool)
	router.POST(baseURL+"/:federationContextId/isv/resource/zone/:zoneId/appProvider/:appProviderId", wrapper.CreateResourcePools)
	router.DELETE(baseURL+"/:federationContextId/isv/resource/zone/:zoneId/appProvider/:appProviderId/pool/:poolId", wrapper.RemoveISVResPool)
	router.PATCH(baseURL+"/:federationContextId/isv/resource/zone/:zoneId/appProvider/:appProviderId/pool/:poolId", wrapper.UpdateISVResPool)
	router.DELETE(baseURL+"/:federationContextId/partner", wrapper.DeleteFederationDetails)
	router.GET(baseURL+"/:federationContextId/partner", wrapper.GetFederationDetails)
	router.PATCH(baseURL+"/:federationContextId/partner", wrapper.UpdateFederation)
	router.GET(baseURL+"/:federationContextId/roaminguserauth/device/:deviceId/token/:authToken", wrapper.AuthenticateDevice)
	router.POST(baseURL+"/:federationContextId/zones", wrapper.ZoneSubscribe)
	router.DELETE(baseURL+"/:federationContextId/zones/:zoneId", wrapper.ZoneUnsubscribe)
	router.GET(baseURL+"/:federationContextId/zones/:zoneId", wrapper.GetZoneData)

}

type N400ApplicationProblemPlusJSONResponse ProblemDetails

type N401ApplicationProblemPlusJSONResponse ProblemDetails

type N404ApplicationProblemPlusJSONResponse ProblemDetails

type N409ApplicationProblemPlusJSONResponse ProblemDetails

type N422ApplicationProblemPlusJSONResponse ProblemDetails

type N500ApplicationProblemPlusJSONResponse ProblemDetails

type N503ApplicationProblemPlusJSONResponse ProblemDetails

type N520ApplicationProblemPlusJSONResponse ProblemDetails

type DefaultResponse struct {
}

type CreateFederationRequestObject struct {
	Body *CreateFederationJSONRequestBody
}

type CreateFederationResponseObject interface {
	VisitCreateFederationResponse(w http.ResponseWriter) error
}

type CreateFederation200ResponseHeaders struct {
	AcceptEncoding  string
	ContentEncoding string
	Location        string
}

type CreateFederation200JSONResponse struct {
	Body    FederationResponseData
	Headers CreateFederation200ResponseHeaders
}

func (response CreateFederation200JSONResponse) VisitCreateFederationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Accept-Encoding", fmt.Sprint(response.Headers.AcceptEncoding))
	w.Header().Set("Content-Encoding", fmt.Sprint(response.Headers.ContentEncoding))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateFederation400ApplicationProblemPlusJSONResponse struct {
	N400ApplicationProblemPlusJSONResponse
}

func (response CreateFederation400ApplicationProblemPlusJSONResponse) VisitCreateFederationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateFederation401ApplicationProblemPlusJSONResponse struct {
	N401ApplicationProblemPlusJSONResponse
}

func (response CreateFederation401ApplicationProblemPlusJSONResponse) VisitCreateFederationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateFederation404ApplicationProblemPlusJSONResponse struct {
	N404ApplicationProblemPlusJSONResponse
}

func (response CreateFederation404ApplicationProblemPlusJSONResponse) VisitCreateFederationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateFederation409ApplicationProblemPlusJSONResponse struct {
	N409ApplicationProblemPlusJSONResponse
}

func (response CreateFederation409ApplicationProblemPlusJSONResponse) VisitCreateFederationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateFederation422ApplicationProblemPlusJSONResponse struct {
	N422ApplicationProblemPlusJSONResponse
}

func (response CreateFederation422ApplicationProblemPlusJSONResponse) VisitCreateFederationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateFederation500ApplicationProblemPlusJSONResponse struct {
	N500ApplicationProblemPlusJSONResponse
}

func (response CreateFederation500ApplicationProblemPlusJSONResponse) VisitCreateFederationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateFederation503ApplicationProblemPlusJSONResponse struct {
	N503ApplicationProblemPlusJSONResponse
}

func (response CreateFederation503ApplicationProblemPlusJSONResponse) VisitCreateFederationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type CreateFederation520ApplicationProblemPlusJSONResponse struct {
	N520ApplicationProblemPlusJSONResponse
}

func (response CreateFederation520ApplicationProblemPlusJSONResponse) VisitCreateFederationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(520)

	return json.NewEncoder(w).Encode(response)
}

type CreateFederationdefaultResponse struct {
	StatusCode int
}

func (response CreateFederationdefaultResponse) VisitCreateFederationResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type AppInstCallbackLinkRequestObject struct {
	FederationCallbackId FederationCallbackId `json:"federationCallbackId"`
	Body                 *AppInstCallbackLinkJSONRequestBody
}

type AppInstCallbackLinkResponseObject interface {
	VisitAppInstCallbackLinkResponse(w http.ResponseWriter) error
}

type AppInstCallbackLink204Response struct {
}

func (response AppInstCallbackLink204Response) VisitAppInstCallbackLinkResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type AppInstCallbackLink400ApplicationProblemPlusJSONResponse struct {
	N400ApplicationProblemPlusJSONResponse
}

func (response AppInstCallbackLink400ApplicationProblemPlusJSONResponse) VisitAppInstCallbackLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AppInstCallbackLink401ApplicationProblemPlusJSONResponse struct {
	N401ApplicationProblemPlusJSONResponse
}

func (response AppInstCallbackLink401ApplicationProblemPlusJSONResponse) VisitAppInstCallbackLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type AppInstCallbackLink404ApplicationProblemPlusJSONResponse struct {
	N404ApplicationProblemPlusJSONResponse
}

func (response AppInstCallbackLink404ApplicationProblemPlusJSONResponse) VisitAppInstCallbackLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AppInstCallbackLink409ApplicationProblemPlusJSONResponse struct {
	N409ApplicationProblemPlusJSONResponse
}

func (response AppInstCallbackLink409ApplicationProblemPlusJSONResponse) VisitAppInstCallbackLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type AppInstCallbackLink422ApplicationProblemPlusJSONResponse struct {
	N422ApplicationProblemPlusJSONResponse
}

func (response AppInstCallbackLink422ApplicationProblemPlusJSONResponse) VisitAppInstCallbackLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type AppInstCallbackLink500ApplicationProblemPlusJSONResponse struct {
	N500ApplicationProblemPlusJSONResponse
}

func (response AppInstCallbackLink500ApplicationProblemPlusJSONResponse) VisitAppInstCallbackLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AppInstCallbackLink503ApplicationProblemPlusJSONResponse struct {
	N503ApplicationProblemPlusJSONResponse
}

func (response AppInstCallbackLink503ApplicationProblemPlusJSONResponse) VisitAppInstCallbackLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type AppInstCallbackLink520ApplicationProblemPlusJSONResponse struct {
	N520ApplicationProblemPlusJSONResponse
}

func (response AppInstCallbackLink520ApplicationProblemPlusJSONResponse) VisitAppInstCallbackLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(520)

	return json.NewEncoder(w).Encode(response)
}

type AppInstCallbackLinkdefaultResponse struct {
	StatusCode int
}

func (response AppInstCallbackLinkdefaultResponse) VisitAppInstCallbackLinkResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type AppStatusCallbackLinkRequestObject struct {
	FederationCallbackId FederationCallbackId `json:"federationCallbackId"`
	Body                 *AppStatusCallbackLinkJSONRequestBody
}

type AppStatusCallbackLinkResponseObject interface {
	VisitAppStatusCallbackLinkResponse(w http.ResponseWriter) error
}

type AppStatusCallbackLink204Response struct {
}

func (response AppStatusCallbackLink204Response) VisitAppStatusCallbackLinkResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type AppStatusCallbackLink400ApplicationProblemPlusJSONResponse struct {
	N400ApplicationProblemPlusJSONResponse
}

func (response AppStatusCallbackLink400ApplicationProblemPlusJSONResponse) VisitAppStatusCallbackLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AppStatusCallbackLink401ApplicationProblemPlusJSONResponse struct {
	N401ApplicationProblemPlusJSONResponse
}

func (response AppStatusCallbackLink401ApplicationProblemPlusJSONResponse) VisitAppStatusCallbackLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type AppStatusCallbackLink404ApplicationProblemPlusJSONResponse struct {
	N404ApplicationProblemPlusJSONResponse
}

func (response AppStatusCallbackLink404ApplicationProblemPlusJSONResponse) VisitAppStatusCallbackLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AppStatusCallbackLink409ApplicationProblemPlusJSONResponse struct {
	N409ApplicationProblemPlusJSONResponse
}

func (response AppStatusCallbackLink409ApplicationProblemPlusJSONResponse) VisitAppStatusCallbackLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type AppStatusCallbackLink422ApplicationProblemPlusJSONResponse struct {
	N422ApplicationProblemPlusJSONResponse
}

func (response AppStatusCallbackLink422ApplicationProblemPlusJSONResponse) VisitAppStatusCallbackLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type AppStatusCallbackLink500ApplicationProblemPlusJSONResponse struct {
	N500ApplicationProblemPlusJSONResponse
}

func (response AppStatusCallbackLink500ApplicationProblemPlusJSONResponse) VisitAppStatusCallbackLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AppStatusCallbackLink503ApplicationProblemPlusJSONResponse struct {
	N503ApplicationProblemPlusJSONResponse
}

func (response AppStatusCallbackLink503ApplicationProblemPlusJSONResponse) VisitAppStatusCallbackLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type AppStatusCallbackLink520ApplicationProblemPlusJSONResponse struct {
	N520ApplicationProblemPlusJSONResponse
}

func (response AppStatusCallbackLink520ApplicationProblemPlusJSONResponse) VisitAppStatusCallbackLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(520)

	return json.NewEncoder(w).Encode(response)
}

type AppStatusCallbackLinkdefaultResponse struct {
	StatusCode int
}

func (response AppStatusCallbackLinkdefaultResponse) VisitAppStatusCallbackLinkResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type AvailZoneNotifLinkRequestObject struct {
	FederationCallbackId FederationCallbackId `json:"federationCallbackId"`
	Body                 *AvailZoneNotifLinkJSONRequestBody
}

type AvailZoneNotifLinkResponseObject interface {
	VisitAvailZoneNotifLinkResponse(w http.ResponseWriter) error
}

type AvailZoneNotifLink200Response struct {
}

func (response AvailZoneNotifLink200Response) VisitAvailZoneNotifLinkResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type AvailZoneNotifLink400ApplicationProblemPlusJSONResponse struct {
	N400ApplicationProblemPlusJSONResponse
}

func (response AvailZoneNotifLink400ApplicationProblemPlusJSONResponse) VisitAvailZoneNotifLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AvailZoneNotifLink401ApplicationProblemPlusJSONResponse struct {
	N401ApplicationProblemPlusJSONResponse
}

func (response AvailZoneNotifLink401ApplicationProblemPlusJSONResponse) VisitAvailZoneNotifLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type AvailZoneNotifLink404ApplicationProblemPlusJSONResponse struct {
	N404ApplicationProblemPlusJSONResponse
}

func (response AvailZoneNotifLink404ApplicationProblemPlusJSONResponse) VisitAvailZoneNotifLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AvailZoneNotifLink409ApplicationProblemPlusJSONResponse struct {
	N409ApplicationProblemPlusJSONResponse
}

func (response AvailZoneNotifLink409ApplicationProblemPlusJSONResponse) VisitAvailZoneNotifLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type AvailZoneNotifLink422ApplicationProblemPlusJSONResponse struct {
	N422ApplicationProblemPlusJSONResponse
}

func (response AvailZoneNotifLink422ApplicationProblemPlusJSONResponse) VisitAvailZoneNotifLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type AvailZoneNotifLink500ApplicationProblemPlusJSONResponse struct {
	N500ApplicationProblemPlusJSONResponse
}

func (response AvailZoneNotifLink500ApplicationProblemPlusJSONResponse) VisitAvailZoneNotifLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AvailZoneNotifLink503ApplicationProblemPlusJSONResponse struct {
	N503ApplicationProblemPlusJSONResponse
}

func (response AvailZoneNotifLink503ApplicationProblemPlusJSONResponse) VisitAvailZoneNotifLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type AvailZoneNotifLink520ApplicationProblemPlusJSONResponse struct {
	N520ApplicationProblemPlusJSONResponse
}

func (response AvailZoneNotifLink520ApplicationProblemPlusJSONResponse) VisitAvailZoneNotifLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(520)

	return json.NewEncoder(w).Encode(response)
}

type AvailZoneNotifLinkdefaultResponse struct {
	StatusCode int
}

func (response AvailZoneNotifLinkdefaultResponse) VisitAvailZoneNotifLinkResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type PartnerStatusLinkRequestObject struct {
	FederationCallbackId FederationCallbackId `json:"federationCallbackId"`
	Body                 *PartnerStatusLinkJSONRequestBody
}

type PartnerStatusLinkResponseObject interface {
	VisitPartnerStatusLinkResponse(w http.ResponseWriter) error
}

type PartnerStatusLink204Response struct {
}

func (response PartnerStatusLink204Response) VisitPartnerStatusLinkResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PartnerStatusLink400ApplicationProblemPlusJSONResponse struct {
	N400ApplicationProblemPlusJSONResponse
}

func (response PartnerStatusLink400ApplicationProblemPlusJSONResponse) VisitPartnerStatusLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PartnerStatusLink401ApplicationProblemPlusJSONResponse struct {
	N401ApplicationProblemPlusJSONResponse
}

func (response PartnerStatusLink401ApplicationProblemPlusJSONResponse) VisitPartnerStatusLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PartnerStatusLink404ApplicationProblemPlusJSONResponse struct {
	N404ApplicationProblemPlusJSONResponse
}

func (response PartnerStatusLink404ApplicationProblemPlusJSONResponse) VisitPartnerStatusLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PartnerStatusLink409ApplicationProblemPlusJSONResponse struct {
	N409ApplicationProblemPlusJSONResponse
}

func (response PartnerStatusLink409ApplicationProblemPlusJSONResponse) VisitPartnerStatusLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PartnerStatusLink422ApplicationProblemPlusJSONResponse struct {
	N422ApplicationProblemPlusJSONResponse
}

func (response PartnerStatusLink422ApplicationProblemPlusJSONResponse) VisitPartnerStatusLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type PartnerStatusLink500ApplicationProblemPlusJSONResponse struct {
	N500ApplicationProblemPlusJSONResponse
}

func (response PartnerStatusLink500ApplicationProblemPlusJSONResponse) VisitPartnerStatusLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PartnerStatusLink503ApplicationProblemPlusJSONResponse struct {
	N503ApplicationProblemPlusJSONResponse
}

func (response PartnerStatusLink503ApplicationProblemPlusJSONResponse) VisitPartnerStatusLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type PartnerStatusLink520ApplicationProblemPlusJSONResponse struct {
	N520ApplicationProblemPlusJSONResponse
}

func (response PartnerStatusLink520ApplicationProblemPlusJSONResponse) VisitPartnerStatusLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(520)

	return json.NewEncoder(w).Encode(response)
}

type PartnerStatusLinkdefaultResponse struct {
	StatusCode int
}

func (response PartnerStatusLinkdefaultResponse) VisitPartnerStatusLinkResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type ResourceReservationCallbackLinkRequestObject struct {
	FederationCallbackId FederationCallbackId `json:"federationCallbackId"`
	Body                 *ResourceReservationCallbackLinkJSONRequestBody
}

type ResourceReservationCallbackLinkResponseObject interface {
	VisitResourceReservationCallbackLinkResponse(w http.ResponseWriter) error
}

type ResourceReservationCallbackLink204Response struct {
}

func (response ResourceReservationCallbackLink204Response) VisitResourceReservationCallbackLinkResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ResourceReservationCallbackLink400ApplicationProblemPlusJSONResponse struct {
	N400ApplicationProblemPlusJSONResponse
}

func (response ResourceReservationCallbackLink400ApplicationProblemPlusJSONResponse) VisitResourceReservationCallbackLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ResourceReservationCallbackLink401ApplicationProblemPlusJSONResponse struct {
	N401ApplicationProblemPlusJSONResponse
}

func (response ResourceReservationCallbackLink401ApplicationProblemPlusJSONResponse) VisitResourceReservationCallbackLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ResourceReservationCallbackLink404ApplicationProblemPlusJSONResponse struct {
	N404ApplicationProblemPlusJSONResponse
}

func (response ResourceReservationCallbackLink404ApplicationProblemPlusJSONResponse) VisitResourceReservationCallbackLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ResourceReservationCallbackLink409ApplicationProblemPlusJSONResponse struct {
	N409ApplicationProblemPlusJSONResponse
}

func (response ResourceReservationCallbackLink409ApplicationProblemPlusJSONResponse) VisitResourceReservationCallbackLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ResourceReservationCallbackLink422ApplicationProblemPlusJSONResponse struct {
	N422ApplicationProblemPlusJSONResponse
}

func (response ResourceReservationCallbackLink422ApplicationProblemPlusJSONResponse) VisitResourceReservationCallbackLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type ResourceReservationCallbackLink500ApplicationProblemPlusJSONResponse struct {
	N500ApplicationProblemPlusJSONResponse
}

func (response ResourceReservationCallbackLink500ApplicationProblemPlusJSONResponse) VisitResourceReservationCallbackLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ResourceReservationCallbackLink503ApplicationProblemPlusJSONResponse struct {
	N503ApplicationProblemPlusJSONResponse
}

func (response ResourceReservationCallbackLink503ApplicationProblemPlusJSONResponse) VisitResourceReservationCallbackLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type ResourceReservationCallbackLink520ApplicationProblemPlusJSONResponse struct {
	N520ApplicationProblemPlusJSONResponse
}

func (response ResourceReservationCallbackLink520ApplicationProblemPlusJSONResponse) VisitResourceReservationCallbackLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(520)

	return json.NewEncoder(w).Encode(response)
}

type ResourceReservationCallbackLinkdefaultResponse struct {
	StatusCode int
}

func (response ResourceReservationCallbackLinkdefaultResponse) VisitResourceReservationCallbackLinkResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type InstallAppRequestObject struct {
	FederationContextId FederationContextId `json:"federationContextId"`
	Body                *InstallAppJSONRequestBody
}

type InstallAppResponseObject interface {
	VisitInstallAppResponse(w http.ResponseWriter) error
}

type InstallApp202Response struct {
}

func (response InstallApp202Response) VisitInstallAppResponse(w http.ResponseWriter) error {
	w.WriteHeader(202)
	return nil
}

type InstallApp400ApplicationProblemPlusJSONResponse struct {
	N400ApplicationProblemPlusJSONResponse
}

func (response InstallApp400ApplicationProblemPlusJSONResponse) VisitInstallAppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type InstallApp401ApplicationProblemPlusJSONResponse struct {
	N401ApplicationProblemPlusJSONResponse
}

func (response InstallApp401ApplicationProblemPlusJSONResponse) VisitInstallAppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type InstallApp404ApplicationProblemPlusJSONResponse struct {
	N404ApplicationProblemPlusJSONResponse
}

func (response InstallApp404ApplicationProblemPlusJSONResponse) VisitInstallAppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type InstallApp409ApplicationProblemPlusJSONResponse struct {
	N409ApplicationProblemPlusJSONResponse
}

func (response InstallApp409ApplicationProblemPlusJSONResponse) VisitInstallAppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type InstallApp422ApplicationProblemPlusJSONResponse struct {
	N422ApplicationProblemPlusJSONResponse
}

func (response InstallApp422ApplicationProblemPlusJSONResponse) VisitInstallAppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type InstallApp500ApplicationProblemPlusJSONResponse struct {
	N500ApplicationProblemPlusJSONResponse
}

func (response InstallApp500ApplicationProblemPlusJSONResponse) VisitInstallAppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type InstallApp503ApplicationProblemPlusJSONResponse struct {
	N503ApplicationProblemPlusJSONResponse
}

func (response InstallApp503ApplicationProblemPlusJSONResponse) VisitInstallAppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type InstallApp520ApplicationProblemPlusJSONResponse struct {
	N520ApplicationProblemPlusJSONResponse
}

func (response InstallApp520ApplicationProblemPlusJSONResponse) VisitInstallAppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(520)

	return json.NewEncoder(w).Encode(response)
}

type InstallAppdefaultResponse struct {
	StatusCode int
}

func (response InstallAppdefaultResponse) VisitInstallAppResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GetAllAppInstancesRequestObject struct {
	FederationContextId FederationContextId `json:"federationContextId"`
	AppId               AppIdentifier       `json:"appId"`
	AppProviderId       AppProviderId       `json:"appProviderId"`
}

type GetAllAppInstancesResponseObject interface {
	VisitGetAllAppInstancesResponse(w http.ResponseWriter) error
}

type GetAllAppInstances200JSONResponse []struct {
	AppInstanceInfo []struct {
		// AppInstIdentifier Unique identifier generated by the partner OP to identify an instance of the application on a specific zone.
		AppInstIdentifier InstanceIdentifier `json:"appInstIdentifier"`

		// AppInstanceState Running status of the application instance.
		AppInstanceState InstanceState `json:"appInstanceState"`
	} `json:"appInstanceInfo"`

	// ZoneId Human readable name of the zone.
	ZoneId ZoneIdentifier `json:"zoneId"`
}

func (response GetAllAppInstances200JSONResponse) VisitGetAllAppInstancesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllAppInstances400ApplicationProblemPlusJSONResponse struct {
	N400ApplicationProblemPlusJSONResponse
}

func (response GetAllAppInstances400ApplicationProblemPlusJSONResponse) VisitGetAllAppInstancesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllAppInstances401ApplicationProblemPlusJSONResponse struct {
	N401ApplicationProblemPlusJSONResponse
}

func (response GetAllAppInstances401ApplicationProblemPlusJSONResponse) VisitGetAllAppInstancesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAllAppInstances404ApplicationProblemPlusJSONResponse struct {
	N404ApplicationProblemPlusJSONResponse
}

func (response GetAllAppInstances404ApplicationProblemPlusJSONResponse) VisitGetAllAppInstancesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAllAppInstances409ApplicationProblemPlusJSONResponse struct {
	N409ApplicationProblemPlusJSONResponse
}

func (response GetAllAppInstances409ApplicationProblemPlusJSONResponse) VisitGetAllAppInstancesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type GetAllAppInstances422ApplicationProblemPlusJSONResponse struct {
	N422ApplicationProblemPlusJSONResponse
}

func (response GetAllAppInstances422ApplicationProblemPlusJSONResponse) VisitGetAllAppInstancesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetAllAppInstances500ApplicationProblemPlusJSONResponse struct {
	N500ApplicationProblemPlusJSONResponse
}

func (response GetAllAppInstances500ApplicationProblemPlusJSONResponse) VisitGetAllAppInstancesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAllAppInstances503ApplicationProblemPlusJSONResponse struct {
	N503ApplicationProblemPlusJSONResponse
}

func (response GetAllAppInstances503ApplicationProblemPlusJSONResponse) VisitGetAllAppInstancesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type GetAllAppInstances520ApplicationProblemPlusJSONResponse struct {
	N520ApplicationProblemPlusJSONResponse
}

func (response GetAllAppInstances520ApplicationProblemPlusJSONResponse) VisitGetAllAppInstancesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(520)

	return json.NewEncoder(w).Encode(response)
}

type GetAllAppInstancesdefaultResponse struct {
	StatusCode int
}

func (response GetAllAppInstancesdefaultResponse) VisitGetAllAppInstancesResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type RemoveAppRequestObject struct {
	FederationContextId FederationContextId `json:"federationContextId"`
	AppId               AppIdentifier       `json:"appId"`
	AppInstanceId       InstanceIdentifier  `json:"appInstanceId"`
	ZoneId              ZoneIdentifier      `json:"zoneId"`
}

type RemoveAppResponseObject interface {
	VisitRemoveAppResponse(w http.ResponseWriter) error
}

type RemoveApp200Response struct {
}

func (response RemoveApp200Response) VisitRemoveAppResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type RemoveApp400ApplicationProblemPlusJSONResponse struct {
	N400ApplicationProblemPlusJSONResponse
}

func (response RemoveApp400ApplicationProblemPlusJSONResponse) VisitRemoveAppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RemoveApp401ApplicationProblemPlusJSONResponse struct {
	N401ApplicationProblemPlusJSONResponse
}

func (response RemoveApp401ApplicationProblemPlusJSONResponse) VisitRemoveAppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RemoveApp404ApplicationProblemPlusJSONResponse struct {
	N404ApplicationProblemPlusJSONResponse
}

func (response RemoveApp404ApplicationProblemPlusJSONResponse) VisitRemoveAppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RemoveApp409ApplicationProblemPlusJSONResponse struct {
	N409ApplicationProblemPlusJSONResponse
}

func (response RemoveApp409ApplicationProblemPlusJSONResponse) VisitRemoveAppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type RemoveApp422ApplicationProblemPlusJSONResponse struct {
	N422ApplicationProblemPlusJSONResponse
}

func (response RemoveApp422ApplicationProblemPlusJSONResponse) VisitRemoveAppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type RemoveApp500ApplicationProblemPlusJSONResponse struct {
	N500ApplicationProblemPlusJSONResponse
}

func (response RemoveApp500ApplicationProblemPlusJSONResponse) VisitRemoveAppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RemoveApp503ApplicationProblemPlusJSONResponse struct {
	N503ApplicationProblemPlusJSONResponse
}

func (response RemoveApp503ApplicationProblemPlusJSONResponse) VisitRemoveAppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type RemoveApp520ApplicationProblemPlusJSONResponse struct {
	N520ApplicationProblemPlusJSONResponse
}

func (response RemoveApp520ApplicationProblemPlusJSONResponse) VisitRemoveAppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(520)

	return json.NewEncoder(w).Encode(response)
}

type RemoveAppdefaultResponse struct {
	StatusCode int
}

func (response RemoveAppdefaultResponse) VisitRemoveAppResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GetAppInstanceDetailsRequestObject struct {
	FederationContextId FederationContextId `json:"federationContextId"`
	AppId               AppIdentifier       `json:"appId"`
	AppInstanceId       InstanceIdentifier  `json:"appInstanceId"`
	ZoneId              ZoneIdentifier      `json:"zoneId"`
}

type GetAppInstanceDetailsResponseObject interface {
	VisitGetAppInstanceDetailsResponse(w http.ResponseWriter) error
}

type GetAppInstanceDetails200JSONResponse struct {
	// AccesspointInfo Information about the IP and Port exposed by the OP. Application clients shall use these access points to reach this application instance.
	AccesspointInfo *AccessPointInfo `json:"accesspointInfo,omitempty"`

	// AppInstanceState Running status of the application instance.
	AppInstanceState *InstanceState `json:"appInstanceState,omitempty"`
}

func (response GetAppInstanceDetails200JSONResponse) VisitGetAppInstanceDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAppInstanceDetails400ApplicationProblemPlusJSONResponse struct {
	N400ApplicationProblemPlusJSONResponse
}

func (response GetAppInstanceDetails400ApplicationProblemPlusJSONResponse) VisitGetAppInstanceDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAppInstanceDetails401ApplicationProblemPlusJSONResponse struct {
	N401ApplicationProblemPlusJSONResponse
}

func (response GetAppInstanceDetails401ApplicationProblemPlusJSONResponse) VisitGetAppInstanceDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAppInstanceDetails404ApplicationProblemPlusJSONResponse struct {
	N404ApplicationProblemPlusJSONResponse
}

func (response GetAppInstanceDetails404ApplicationProblemPlusJSONResponse) VisitGetAppInstanceDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAppInstanceDetails409ApplicationProblemPlusJSONResponse struct {
	N409ApplicationProblemPlusJSONResponse
}

func (response GetAppInstanceDetails409ApplicationProblemPlusJSONResponse) VisitGetAppInstanceDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type GetAppInstanceDetails422ApplicationProblemPlusJSONResponse struct {
	N422ApplicationProblemPlusJSONResponse
}

func (response GetAppInstanceDetails422ApplicationProblemPlusJSONResponse) VisitGetAppInstanceDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetAppInstanceDetails500ApplicationProblemPlusJSONResponse struct {
	N500ApplicationProblemPlusJSONResponse
}

func (response GetAppInstanceDetails500ApplicationProblemPlusJSONResponse) VisitGetAppInstanceDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAppInstanceDetails503ApplicationProblemPlusJSONResponse struct {
	N503ApplicationProblemPlusJSONResponse
}

func (response GetAppInstanceDetails503ApplicationProblemPlusJSONResponse) VisitGetAppInstanceDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type GetAppInstanceDetails520ApplicationProblemPlusJSONResponse struct {
	N520ApplicationProblemPlusJSONResponse
}

func (response GetAppInstanceDetails520ApplicationProblemPlusJSONResponse) VisitGetAppInstanceDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(520)

	return json.NewEncoder(w).Encode(response)
}

type GetAppInstanceDetailsdefaultResponse struct {
	StatusCode int
}

func (response GetAppInstanceDetailsdefaultResponse) VisitGetAppInstanceDetailsResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type OnboardApplicationRequestObject struct {
	FederationContextId FederationContextId `json:"federationContextId"`
	Body                *OnboardApplicationJSONRequestBody
}

type OnboardApplicationResponseObject interface {
	VisitOnboardApplicationResponse(w http.ResponseWriter) error
}

type OnboardApplication202Response struct {
}

func (response OnboardApplication202Response) VisitOnboardApplicationResponse(w http.ResponseWriter) error {
	w.WriteHeader(202)
	return nil
}

type OnboardApplication400ApplicationProblemPlusJSONResponse struct {
	N400ApplicationProblemPlusJSONResponse
}

func (response OnboardApplication400ApplicationProblemPlusJSONResponse) VisitOnboardApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type OnboardApplication401ApplicationProblemPlusJSONResponse struct {
	N401ApplicationProblemPlusJSONResponse
}

func (response OnboardApplication401ApplicationProblemPlusJSONResponse) VisitOnboardApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type OnboardApplication404ApplicationProblemPlusJSONResponse struct {
	N404ApplicationProblemPlusJSONResponse
}

func (response OnboardApplication404ApplicationProblemPlusJSONResponse) VisitOnboardApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type OnboardApplication409ApplicationProblemPlusJSONResponse struct {
	N409ApplicationProblemPlusJSONResponse
}

func (response OnboardApplication409ApplicationProblemPlusJSONResponse) VisitOnboardApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type OnboardApplication422ApplicationProblemPlusJSONResponse struct {
	N422ApplicationProblemPlusJSONResponse
}

func (response OnboardApplication422ApplicationProblemPlusJSONResponse) VisitOnboardApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type OnboardApplication500ApplicationProblemPlusJSONResponse struct {
	N500ApplicationProblemPlusJSONResponse
}

func (response OnboardApplication500ApplicationProblemPlusJSONResponse) VisitOnboardApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type OnboardApplication503ApplicationProblemPlusJSONResponse struct {
	N503ApplicationProblemPlusJSONResponse
}

func (response OnboardApplication503ApplicationProblemPlusJSONResponse) VisitOnboardApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type OnboardApplication520ApplicationProblemPlusJSONResponse struct {
	N520ApplicationProblemPlusJSONResponse
}

func (response OnboardApplication520ApplicationProblemPlusJSONResponse) VisitOnboardApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(520)

	return json.NewEncoder(w).Encode(response)
}

type OnboardApplicationdefaultResponse struct {
	StatusCode int
}

func (response OnboardApplicationdefaultResponse) VisitOnboardApplicationResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type DeleteAppRequestObject struct {
	FederationContextId FederationContextId `json:"federationContextId"`
	AppId               AppIdentifier       `json:"appId"`
}

type DeleteAppResponseObject interface {
	VisitDeleteAppResponse(w http.ResponseWriter) error
}

type DeleteApp200Response struct {
}

func (response DeleteApp200Response) VisitDeleteAppResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteApp400ApplicationProblemPlusJSONResponse struct {
	N400ApplicationProblemPlusJSONResponse
}

func (response DeleteApp400ApplicationProblemPlusJSONResponse) VisitDeleteAppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteApp401ApplicationProblemPlusJSONResponse struct {
	N401ApplicationProblemPlusJSONResponse
}

func (response DeleteApp401ApplicationProblemPlusJSONResponse) VisitDeleteAppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteApp404ApplicationProblemPlusJSONResponse struct {
	N404ApplicationProblemPlusJSONResponse
}

func (response DeleteApp404ApplicationProblemPlusJSONResponse) VisitDeleteAppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteApp409ApplicationProblemPlusJSONResponse struct {
	N409ApplicationProblemPlusJSONResponse
}

func (response DeleteApp409ApplicationProblemPlusJSONResponse) VisitDeleteAppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeleteApp422ApplicationProblemPlusJSONResponse struct {
	N422ApplicationProblemPlusJSONResponse
}

func (response DeleteApp422ApplicationProblemPlusJSONResponse) VisitDeleteAppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type DeleteApp500ApplicationProblemPlusJSONResponse struct {
	N500ApplicationProblemPlusJSONResponse
}

func (response DeleteApp500ApplicationProblemPlusJSONResponse) VisitDeleteAppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteApp503ApplicationProblemPlusJSONResponse struct {
	N503ApplicationProblemPlusJSONResponse
}

func (response DeleteApp503ApplicationProblemPlusJSONResponse) VisitDeleteAppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type DeleteApp520ApplicationProblemPlusJSONResponse struct {
	N520ApplicationProblemPlusJSONResponse
}

func (response DeleteApp520ApplicationProblemPlusJSONResponse) VisitDeleteAppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(520)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAppdefaultResponse struct {
	StatusCode int
}

func (response DeleteAppdefaultResponse) VisitDeleteAppResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type ViewApplicationRequestObject struct {
	FederationContextId FederationContextId `json:"federationContextId"`
	AppId               AppIdentifier       `json:"appId"`
}

type ViewApplicationResponseObject interface {
	VisitViewApplicationResponse(w http.ResponseWriter) error
}

type ViewApplication200JSONResponse struct {
	// AppComponentSpecs An application may consist of more than one component. Each component is associated with a descriptor and may exposes its services externally or internally. App providers are required to provide details about all these components, their associated descriptors and their DNS names.
	AppComponentSpecs AppComponentSpecs `json:"appComponentSpecs"`

	// AppDeploymentZones Details about partner OP zones where the application should be made available. This field when specified will instruct the OP to restrict application instantiation only on the listed zones.
	AppDeploymentZones []ZoneIdentifier `json:"appDeploymentZones"`

	// AppId Identifier used to refer to an application.
	AppId AppIdentifier `json:"appId"`

	// AppMetaData Application metadata details
	AppMetaData AppMetaData `json:"appMetaData"`

	// AppProviderId UserId of the app provider. Identifier is relevant only in context of this federation.
	AppProviderId AppProviderId `json:"appProviderId"`

	// AppQoSProfile Parameters corresponding to the performance constraints, tenancy details etc.
	AppQoSProfile AppQoSProfile `json:"appQoSProfile"`
}

func (response ViewApplication200JSONResponse) VisitViewApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ViewApplication400ApplicationProblemPlusJSONResponse struct {
	N400ApplicationProblemPlusJSONResponse
}

func (response ViewApplication400ApplicationProblemPlusJSONResponse) VisitViewApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ViewApplication401ApplicationProblemPlusJSONResponse struct {
	N401ApplicationProblemPlusJSONResponse
}

func (response ViewApplication401ApplicationProblemPlusJSONResponse) VisitViewApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ViewApplication404ApplicationProblemPlusJSONResponse struct {
	N404ApplicationProblemPlusJSONResponse
}

func (response ViewApplication404ApplicationProblemPlusJSONResponse) VisitViewApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ViewApplication409ApplicationProblemPlusJSONResponse struct {
	N409ApplicationProblemPlusJSONResponse
}

func (response ViewApplication409ApplicationProblemPlusJSONResponse) VisitViewApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ViewApplication422ApplicationProblemPlusJSONResponse struct {
	N422ApplicationProblemPlusJSONResponse
}

func (response ViewApplication422ApplicationProblemPlusJSONResponse) VisitViewApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type ViewApplication500ApplicationProblemPlusJSONResponse struct {
	N500ApplicationProblemPlusJSONResponse
}

func (response ViewApplication500ApplicationProblemPlusJSONResponse) VisitViewApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ViewApplication503ApplicationProblemPlusJSONResponse struct {
	N503ApplicationProblemPlusJSONResponse
}

func (response ViewApplication503ApplicationProblemPlusJSONResponse) VisitViewApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type ViewApplication520ApplicationProblemPlusJSONResponse struct {
	N520ApplicationProblemPlusJSONResponse
}

func (response ViewApplication520ApplicationProblemPlusJSONResponse) VisitViewApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(520)

	return json.NewEncoder(w).Encode(response)
}

type ViewApplicationdefaultResponse struct {
	StatusCode int
}

func (response ViewApplicationdefaultResponse) VisitViewApplicationResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type UpdateApplicationRequestObject struct {
	FederationContextId FederationContextId `json:"federationContextId"`
	AppId               AppIdentifier       `json:"appId"`
	Body                *UpdateApplicationJSONRequestBody
}

type UpdateApplicationResponseObject interface {
	VisitUpdateApplicationResponse(w http.ResponseWriter) error
}

type UpdateApplication202Response struct {
}

func (response UpdateApplication202Response) VisitUpdateApplicationResponse(w http.ResponseWriter) error {
	w.WriteHeader(202)
	return nil
}

type UpdateApplication400ApplicationProblemPlusJSONResponse struct {
	N400ApplicationProblemPlusJSONResponse
}

func (response UpdateApplication400ApplicationProblemPlusJSONResponse) VisitUpdateApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateApplication401ApplicationProblemPlusJSONResponse struct {
	N401ApplicationProblemPlusJSONResponse
}

func (response UpdateApplication401ApplicationProblemPlusJSONResponse) VisitUpdateApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateApplication404ApplicationProblemPlusJSONResponse struct {
	N404ApplicationProblemPlusJSONResponse
}

func (response UpdateApplication404ApplicationProblemPlusJSONResponse) VisitUpdateApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateApplication409ApplicationProblemPlusJSONResponse struct {
	N409ApplicationProblemPlusJSONResponse
}

func (response UpdateApplication409ApplicationProblemPlusJSONResponse) VisitUpdateApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type UpdateApplication422ApplicationProblemPlusJSONResponse struct {
	N422ApplicationProblemPlusJSONResponse
}

func (response UpdateApplication422ApplicationProblemPlusJSONResponse) VisitUpdateApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateApplication500ApplicationProblemPlusJSONResponse struct {
	N500ApplicationProblemPlusJSONResponse
}

func (response UpdateApplication500ApplicationProblemPlusJSONResponse) VisitUpdateApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateApplication503ApplicationProblemPlusJSONResponse struct {
	N503ApplicationProblemPlusJSONResponse
}

func (response UpdateApplication503ApplicationProblemPlusJSONResponse) VisitUpdateApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type UpdateApplication520ApplicationProblemPlusJSONResponse struct {
	N520ApplicationProblemPlusJSONResponse
}

func (response UpdateApplication520ApplicationProblemPlusJSONResponse) VisitUpdateApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(520)

	return json.NewEncoder(w).Encode(response)
}

type UpdateApplicationdefaultResponse struct {
	StatusCode int
}

func (response UpdateApplicationdefaultResponse) VisitUpdateApplicationResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type OnboardExistingAppNewZonesRequestObject struct {
	FederationContextId FederationContextId `json:"federationContextId"`
	AppId               AppIdentifier       `json:"appId"`
	Body                *OnboardExistingAppNewZonesJSONRequestBody
}

type OnboardExistingAppNewZonesResponseObject interface {
	VisitOnboardExistingAppNewZonesResponse(w http.ResponseWriter) error
}

type OnboardExistingAppNewZones202Response struct {
}

func (response OnboardExistingAppNewZones202Response) VisitOnboardExistingAppNewZonesResponse(w http.ResponseWriter) error {
	w.WriteHeader(202)
	return nil
}

type OnboardExistingAppNewZones400ApplicationProblemPlusJSONResponse struct {
	N400ApplicationProblemPlusJSONResponse
}

func (response OnboardExistingAppNewZones400ApplicationProblemPlusJSONResponse) VisitOnboardExistingAppNewZonesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type OnboardExistingAppNewZones401ApplicationProblemPlusJSONResponse struct {
	N401ApplicationProblemPlusJSONResponse
}

func (response OnboardExistingAppNewZones401ApplicationProblemPlusJSONResponse) VisitOnboardExistingAppNewZonesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type OnboardExistingAppNewZones404ApplicationProblemPlusJSONResponse struct {
	N404ApplicationProblemPlusJSONResponse
}

func (response OnboardExistingAppNewZones404ApplicationProblemPlusJSONResponse) VisitOnboardExistingAppNewZonesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type OnboardExistingAppNewZones409ApplicationProblemPlusJSONResponse struct {
	N409ApplicationProblemPlusJSONResponse
}

func (response OnboardExistingAppNewZones409ApplicationProblemPlusJSONResponse) VisitOnboardExistingAppNewZonesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type OnboardExistingAppNewZones422ApplicationProblemPlusJSONResponse struct {
	N422ApplicationProblemPlusJSONResponse
}

func (response OnboardExistingAppNewZones422ApplicationProblemPlusJSONResponse) VisitOnboardExistingAppNewZonesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type OnboardExistingAppNewZones500ApplicationProblemPlusJSONResponse struct {
	N500ApplicationProblemPlusJSONResponse
}

func (response OnboardExistingAppNewZones500ApplicationProblemPlusJSONResponse) VisitOnboardExistingAppNewZonesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type OnboardExistingAppNewZones503ApplicationProblemPlusJSONResponse struct {
	N503ApplicationProblemPlusJSONResponse
}

func (response OnboardExistingAppNewZones503ApplicationProblemPlusJSONResponse) VisitOnboardExistingAppNewZonesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type OnboardExistingAppNewZones520ApplicationProblemPlusJSONResponse struct {
	N520ApplicationProblemPlusJSONResponse
}

func (response OnboardExistingAppNewZones520ApplicationProblemPlusJSONResponse) VisitOnboardExistingAppNewZonesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(520)

	return json.NewEncoder(w).Encode(response)
}

type OnboardExistingAppNewZonesdefaultResponse struct {
	StatusCode int
}

func (response OnboardExistingAppNewZonesdefaultResponse) VisitOnboardExistingAppNewZonesResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type DeboardApplicationRequestObject struct {
	FederationContextId FederationContextId `json:"federationContextId"`
	AppId               AppIdentifier       `json:"appId"`
	ZoneId              ZoneIdentifier      `json:"zoneId"`
}

type DeboardApplicationResponseObject interface {
	VisitDeboardApplicationResponse(w http.ResponseWriter) error
}

type DeboardApplication202Response struct {
}

func (response DeboardApplication202Response) VisitDeboardApplicationResponse(w http.ResponseWriter) error {
	w.WriteHeader(202)
	return nil
}

type DeboardApplication400ApplicationProblemPlusJSONResponse struct {
	N400ApplicationProblemPlusJSONResponse
}

func (response DeboardApplication400ApplicationProblemPlusJSONResponse) VisitDeboardApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeboardApplication401ApplicationProblemPlusJSONResponse struct {
	N401ApplicationProblemPlusJSONResponse
}

func (response DeboardApplication401ApplicationProblemPlusJSONResponse) VisitDeboardApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeboardApplication404ApplicationProblemPlusJSONResponse struct {
	N404ApplicationProblemPlusJSONResponse
}

func (response DeboardApplication404ApplicationProblemPlusJSONResponse) VisitDeboardApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeboardApplication409ApplicationProblemPlusJSONResponse struct {
	N409ApplicationProblemPlusJSONResponse
}

func (response DeboardApplication409ApplicationProblemPlusJSONResponse) VisitDeboardApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeboardApplication422ApplicationProblemPlusJSONResponse struct {
	N422ApplicationProblemPlusJSONResponse
}

func (response DeboardApplication422ApplicationProblemPlusJSONResponse) VisitDeboardApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type DeboardApplication500ApplicationProblemPlusJSONResponse struct {
	N500ApplicationProblemPlusJSONResponse
}

func (response DeboardApplication500ApplicationProblemPlusJSONResponse) VisitDeboardApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeboardApplication503ApplicationProblemPlusJSONResponse struct {
	N503ApplicationProblemPlusJSONResponse
}

func (response DeboardApplication503ApplicationProblemPlusJSONResponse) VisitDeboardApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type DeboardApplication520ApplicationProblemPlusJSONResponse struct {
	N520ApplicationProblemPlusJSONResponse
}

func (response DeboardApplication520ApplicationProblemPlusJSONResponse) VisitDeboardApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(520)

	return json.NewEncoder(w).Encode(response)
}

type DeboardApplicationdefaultResponse struct {
	StatusCode int
}

func (response DeboardApplicationdefaultResponse) VisitDeboardApplicationResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type LockUnlockApplicationZoneRequestObject struct {
	FederationContextId FederationContextId `json:"federationContextId"`
	AppId               AppIdentifier       `json:"appId"`
	Body                *LockUnlockApplicationZoneJSONRequestBody
}

type LockUnlockApplicationZoneResponseObject interface {
	VisitLockUnlockApplicationZoneResponse(w http.ResponseWriter) error
}

type LockUnlockApplicationZone200Response struct {
}

func (response LockUnlockApplicationZone200Response) VisitLockUnlockApplicationZoneResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type LockUnlockApplicationZone400ApplicationProblemPlusJSONResponse struct {
	N400ApplicationProblemPlusJSONResponse
}

func (response LockUnlockApplicationZone400ApplicationProblemPlusJSONResponse) VisitLockUnlockApplicationZoneResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type LockUnlockApplicationZone401ApplicationProblemPlusJSONResponse struct {
	N401ApplicationProblemPlusJSONResponse
}

func (response LockUnlockApplicationZone401ApplicationProblemPlusJSONResponse) VisitLockUnlockApplicationZoneResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type LockUnlockApplicationZone404ApplicationProblemPlusJSONResponse struct {
	N404ApplicationProblemPlusJSONResponse
}

func (response LockUnlockApplicationZone404ApplicationProblemPlusJSONResponse) VisitLockUnlockApplicationZoneResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type LockUnlockApplicationZone409ApplicationProblemPlusJSONResponse struct {
	N409ApplicationProblemPlusJSONResponse
}

func (response LockUnlockApplicationZone409ApplicationProblemPlusJSONResponse) VisitLockUnlockApplicationZoneResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type LockUnlockApplicationZone422ApplicationProblemPlusJSONResponse struct {
	N422ApplicationProblemPlusJSONResponse
}

func (response LockUnlockApplicationZone422ApplicationProblemPlusJSONResponse) VisitLockUnlockApplicationZoneResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type LockUnlockApplicationZone500ApplicationProblemPlusJSONResponse struct {
	N500ApplicationProblemPlusJSONResponse
}

func (response LockUnlockApplicationZone500ApplicationProblemPlusJSONResponse) VisitLockUnlockApplicationZoneResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type LockUnlockApplicationZone503ApplicationProblemPlusJSONResponse struct {
	N503ApplicationProblemPlusJSONResponse
}

func (response LockUnlockApplicationZone503ApplicationProblemPlusJSONResponse) VisitLockUnlockApplicationZoneResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type LockUnlockApplicationZone520ApplicationProblemPlusJSONResponse struct {
	N520ApplicationProblemPlusJSONResponse
}

func (response LockUnlockApplicationZone520ApplicationProblemPlusJSONResponse) VisitLockUnlockApplicationZoneResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(520)

	return json.NewEncoder(w).Encode(response)
}

type LockUnlockApplicationZonedefaultResponse struct {
	StatusCode int
}

func (response LockUnlockApplicationZonedefaultResponse) VisitLockUnlockApplicationZoneResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type UploadArtefactRequestObject struct {
	FederationContextId FederationContextId `json:"federationContextId"`
	Body                *multipart.Reader
}

type UploadArtefactResponseObject interface {
	VisitUploadArtefactResponse(w http.ResponseWriter) error
}

type UploadArtefact200Response struct {
}

func (response UploadArtefact200Response) VisitUploadArtefactResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UploadArtefact400ApplicationProblemPlusJSONResponse struct {
	N400ApplicationProblemPlusJSONResponse
}

func (response UploadArtefact400ApplicationProblemPlusJSONResponse) VisitUploadArtefactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UploadArtefact401ApplicationProblemPlusJSONResponse struct {
	N401ApplicationProblemPlusJSONResponse
}

func (response UploadArtefact401ApplicationProblemPlusJSONResponse) VisitUploadArtefactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UploadArtefact404ApplicationProblemPlusJSONResponse struct {
	N404ApplicationProblemPlusJSONResponse
}

func (response UploadArtefact404ApplicationProblemPlusJSONResponse) VisitUploadArtefactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UploadArtefact409ApplicationProblemPlusJSONResponse struct {
	N409ApplicationProblemPlusJSONResponse
}

func (response UploadArtefact409ApplicationProblemPlusJSONResponse) VisitUploadArtefactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type UploadArtefact422ApplicationProblemPlusJSONResponse struct {
	N422ApplicationProblemPlusJSONResponse
}

func (response UploadArtefact422ApplicationProblemPlusJSONResponse) VisitUploadArtefactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UploadArtefact500ApplicationProblemPlusJSONResponse struct {
	N500ApplicationProblemPlusJSONResponse
}

func (response UploadArtefact500ApplicationProblemPlusJSONResponse) VisitUploadArtefactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UploadArtefact503ApplicationProblemPlusJSONResponse struct {
	N503ApplicationProblemPlusJSONResponse
}

func (response UploadArtefact503ApplicationProblemPlusJSONResponse) VisitUploadArtefactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type UploadArtefact520ApplicationProblemPlusJSONResponse struct {
	N520ApplicationProblemPlusJSONResponse
}

func (response UploadArtefact520ApplicationProblemPlusJSONResponse) VisitUploadArtefactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(520)

	return json.NewEncoder(w).Encode(response)
}

type UploadArtefactdefaultResponse struct {
	StatusCode int
}

func (response UploadArtefactdefaultResponse) VisitUploadArtefactResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type RemoveArtefactRequestObject struct {
	FederationContextId FederationContextId `json:"federationContextId"`
	ArtefactId          ArtefactId          `json:"artefactId"`
}

type RemoveArtefactResponseObject interface {
	VisitRemoveArtefactResponse(w http.ResponseWriter) error
}

type RemoveArtefact200Response struct {
}

func (response RemoveArtefact200Response) VisitRemoveArtefactResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type RemoveArtefact400ApplicationProblemPlusJSONResponse struct {
	N400ApplicationProblemPlusJSONResponse
}

func (response RemoveArtefact400ApplicationProblemPlusJSONResponse) VisitRemoveArtefactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RemoveArtefact401ApplicationProblemPlusJSONResponse struct {
	N401ApplicationProblemPlusJSONResponse
}

func (response RemoveArtefact401ApplicationProblemPlusJSONResponse) VisitRemoveArtefactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RemoveArtefact404ApplicationProblemPlusJSONResponse struct {
	N404ApplicationProblemPlusJSONResponse
}

func (response RemoveArtefact404ApplicationProblemPlusJSONResponse) VisitRemoveArtefactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RemoveArtefact409ApplicationProblemPlusJSONResponse struct {
	N409ApplicationProblemPlusJSONResponse
}

func (response RemoveArtefact409ApplicationProblemPlusJSONResponse) VisitRemoveArtefactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type RemoveArtefact422ApplicationProblemPlusJSONResponse struct {
	N422ApplicationProblemPlusJSONResponse
}

func (response RemoveArtefact422ApplicationProblemPlusJSONResponse) VisitRemoveArtefactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type RemoveArtefact500ApplicationProblemPlusJSONResponse struct {
	N500ApplicationProblemPlusJSONResponse
}

func (response RemoveArtefact500ApplicationProblemPlusJSONResponse) VisitRemoveArtefactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RemoveArtefact503ApplicationProblemPlusJSONResponse struct {
	N503ApplicationProblemPlusJSONResponse
}

func (response RemoveArtefact503ApplicationProblemPlusJSONResponse) VisitRemoveArtefactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type RemoveArtefact520ApplicationProblemPlusJSONResponse struct {
	N520ApplicationProblemPlusJSONResponse
}

func (response RemoveArtefact520ApplicationProblemPlusJSONResponse) VisitRemoveArtefactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(520)

	return json.NewEncoder(w).Encode(response)
}

type RemoveArtefactdefaultResponse struct {
	StatusCode int
}

func (response RemoveArtefactdefaultResponse) VisitRemoveArtefactResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GetArtefactRequestObject struct {
	FederationContextId FederationContextId `json:"federationContextId"`
	ArtefactId          ArtefactId          `json:"artefactId"`
}

type GetArtefactResponseObject interface {
	VisitGetArtefactResponse(w http.ResponseWriter) error
}

type GetArtefact200JSONResponse struct {
	// AppProviderId UserId of the app provider. Identifier is relevant only in context of this federation.
	AppProviderId AppProviderId `json:"appProviderId"`

	// ArtefactDescription Brief description of the artefact by the application provider
	ArtefactDescription *string `json:"artefactDescription,omitempty"`

	// ArtefactDescriptorType Type of descriptor present in the artefact. App provider can either define either a Helm chart or a Terraform script or container spec.
	ArtefactDescriptorType UploadArtefactMultipartBodyArtefactDescriptorType `json:"artefactDescriptorType"`

	// ArtefactFileFormat Artefacts like Helm charts or Terraform scripts may need compressed format.
	ArtefactFileFormat *UploadArtefactMultipartBodyArtefactFileFormat `json:"artefactFileFormat,omitempty"`

	// ArtefactFileName Name of the file.
	ArtefactFileName *string `json:"artefactFileName,omitempty"`

	// ArtefactId A globally unique identifier associated with the artefact. Originating OP generates this identifier when artefact is submitted over NBI.
	ArtefactId ArtefactId `json:"artefactId"`

	// ArtefactName Name of the artefact.
	ArtefactName         ArtefactName        `json:"artefactName"`
	ArtefactRepoLocation *ObjectRepoLocation `json:"artefactRepoLocation,omitempty"`

	// ArtefactVersionInfo Artefact version information
	ArtefactVersionInfo string                                     `json:"artefactVersionInfo"`
	ArtefactVirtType    UploadArtefactMultipartBodyArtefactVirtType `json:"artefactVirtType"`

	// ComponentSpec Details about compute, networking and storage requirements for each component of the application. App provider should define all information needed to instantiate the component. If artefact is being defined at component level this section should have information just about the component. In case the artefact is being defined at application level the section should provide details about all the components.
	ComponentSpec *[]ComponentSpec `json:"componentSpec,omitempty"`

	// RepoType Artefact or file repository location. PUBLICREPO is used of public URLs like GitHub, Helm repo, docker registry etc., PRIVATEREPO is used for private repo managed by the application developer, UPLOAD is for the case when artefact/file is uploaded from MEC web portal. OP should pull the image from ‘repoUrl' immediately after receiving the request and then send back the response. In case the repoURL corresponds to a docker registry, use docker v2 http api to do the pull.
	RepoType *UploadArtefactMultipartBodyRepoType `json:"repoType,omitempty"`
}

func (response GetArtefact200JSONResponse) VisitGetArtefactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetArtefact400ApplicationProblemPlusJSONResponse struct {
	N400ApplicationProblemPlusJSONResponse
}

func (response GetArtefact400ApplicationProblemPlusJSONResponse) VisitGetArtefactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetArtefact401ApplicationProblemPlusJSONResponse struct {
	N401ApplicationProblemPlusJSONResponse
}

func (response GetArtefact401ApplicationProblemPlusJSONResponse) VisitGetArtefactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetArtefact404ApplicationProblemPlusJSONResponse struct {
	N404ApplicationProblemPlusJSONResponse
}

func (response GetArtefact404ApplicationProblemPlusJSONResponse) VisitGetArtefactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetArtefact409ApplicationProblemPlusJSONResponse struct {
	N409ApplicationProblemPlusJSONResponse
}

func (response GetArtefact409ApplicationProblemPlusJSONResponse) VisitGetArtefactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type GetArtefact422ApplicationProblemPlusJSONResponse struct {
	N422ApplicationProblemPlusJSONResponse
}

func (response GetArtefact422ApplicationProblemPlusJSONResponse) VisitGetArtefactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetArtefact500ApplicationProblemPlusJSONResponse struct {
	N500ApplicationProblemPlusJSONResponse
}

func (response GetArtefact500ApplicationProblemPlusJSONResponse) VisitGetArtefactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetArtefact503ApplicationProblemPlusJSONResponse struct {
	N503ApplicationProblemPlusJSONResponse
}

func (response GetArtefact503ApplicationProblemPlusJSONResponse) VisitGetArtefactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type GetArtefact520ApplicationProblemPlusJSONResponse struct {
	N520ApplicationProblemPlusJSONResponse
}

func (response GetArtefact520ApplicationProblemPlusJSONResponse) VisitGetArtefactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(520)

	return json.NewEncoder(w).Encode(response)
}

type GetArtefactdefaultResponse struct {
	StatusCode int
}

func (response GetArtefactdefaultResponse) VisitGetArtefactResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GetCandidateZonesRequestObject struct {
	FederationContextId FederationContextId `json:"federationContextId"`
	Body                *GetCandidateZonesJSONRequestBody
}

type GetCandidateZonesResponseObject interface {
	VisitGetCandidateZonesResponse(w http.ResponseWriter) error
}

type GetCandidateZones200JSONResponse DiscoveredEdgeNodes

func (response GetCandidateZones200JSONResponse) VisitGetCandidateZonesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCandidateZones400ApplicationProblemPlusJSONResponse struct {
	N400ApplicationProblemPlusJSONResponse
}

func (response GetCandidateZones400ApplicationProblemPlusJSONResponse) VisitGetCandidateZonesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetCandidateZones401ApplicationProblemPlusJSONResponse struct {
	N401ApplicationProblemPlusJSONResponse
}

func (response GetCandidateZones401ApplicationProblemPlusJSONResponse) VisitGetCandidateZonesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetCandidateZones404ApplicationProblemPlusJSONResponse struct {
	N404ApplicationProblemPlusJSONResponse
}

func (response GetCandidateZones404ApplicationProblemPlusJSONResponse) VisitGetCandidateZonesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCandidateZones422ApplicationProblemPlusJSONResponse struct {
	N422ApplicationProblemPlusJSONResponse
}

func (response GetCandidateZones422ApplicationProblemPlusJSONResponse) VisitGetCandidateZonesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetCandidateZones500ApplicationProblemPlusJSONResponse struct {
	N500ApplicationProblemPlusJSONResponse
}

func (response GetCandidateZones500ApplicationProblemPlusJSONResponse) VisitGetCandidateZonesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCandidateZonesdefaultResponse struct {
	StatusCode int
}

func (response GetCandidateZonesdefaultResponse) VisitGetCandidateZonesResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type UploadFileRequestObject struct {
	FederationContextId FederationContextId `json:"federationContextId"`
	Body                *multipart.Reader
}

type UploadFileResponseObject interface {
	VisitUploadFileResponse(w http.ResponseWriter) error
}

type UploadFile200Response struct {
}

func (response UploadFile200Response) VisitUploadFileResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UploadFile400ApplicationProblemPlusJSONResponse struct {
	N400ApplicationProblemPlusJSONResponse
}

func (response UploadFile400ApplicationProblemPlusJSONResponse) VisitUploadFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UploadFile401ApplicationProblemPlusJSONResponse struct {
	N401ApplicationProblemPlusJSONResponse
}

func (response UploadFile401ApplicationProblemPlusJSONResponse) VisitUploadFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UploadFile404ApplicationProblemPlusJSONResponse struct {
	N404ApplicationProblemPlusJSONResponse
}

func (response UploadFile404ApplicationProblemPlusJSONResponse) VisitUploadFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UploadFile409ApplicationProblemPlusJSONResponse struct {
	N409ApplicationProblemPlusJSONResponse
}

func (response UploadFile409ApplicationProblemPlusJSONResponse) VisitUploadFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type UploadFile422ApplicationProblemPlusJSONResponse struct {
	N422ApplicationProblemPlusJSONResponse
}

func (response UploadFile422ApplicationProblemPlusJSONResponse) VisitUploadFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UploadFile500ApplicationProblemPlusJSONResponse struct {
	N500ApplicationProblemPlusJSONResponse
}

func (response UploadFile500ApplicationProblemPlusJSONResponse) VisitUploadFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UploadFile503ApplicationProblemPlusJSONResponse struct {
	N503ApplicationProblemPlusJSONResponse
}

func (response UploadFile503ApplicationProblemPlusJSONResponse) VisitUploadFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type UploadFile520ApplicationProblemPlusJSONResponse struct {
	N520ApplicationProblemPlusJSONResponse
}

func (response UploadFile520ApplicationProblemPlusJSONResponse) VisitUploadFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(520)

	return json.NewEncoder(w).Encode(response)
}

type UploadFiledefaultResponse struct {
	StatusCode int
}

func (response UploadFiledefaultResponse) VisitUploadFileResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type RemoveFileRequestObject struct {
	FederationContextId FederationContextId `json:"federationContextId"`
	FileId              FileId              `json:"fileId"`
}

type RemoveFileResponseObject interface {
	VisitRemoveFileResponse(w http.ResponseWriter) error
}

type RemoveFile200Response struct {
}

func (response RemoveFile200Response) VisitRemoveFileResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type RemoveFile400ApplicationProblemPlusJSONResponse struct {
	N400ApplicationProblemPlusJSONResponse
}

func (response RemoveFile400ApplicationProblemPlusJSONResponse) VisitRemoveFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RemoveFile401ApplicationProblemPlusJSONResponse struct {
	N401ApplicationProblemPlusJSONResponse
}

func (response RemoveFile401ApplicationProblemPlusJSONResponse) VisitRemoveFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RemoveFile404ApplicationProblemPlusJSONResponse struct {
	N404ApplicationProblemPlusJSONResponse
}

func (response RemoveFile404ApplicationProblemPlusJSONResponse) VisitRemoveFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RemoveFile409ApplicationProblemPlusJSONResponse struct {
	N409ApplicationProblemPlusJSONResponse
}

func (response RemoveFile409ApplicationProblemPlusJSONResponse) VisitRemoveFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type RemoveFile422ApplicationProblemPlusJSONResponse struct {
	N422ApplicationProblemPlusJSONResponse
}

func (response RemoveFile422ApplicationProblemPlusJSONResponse) VisitRemoveFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type RemoveFile500ApplicationProblemPlusJSONResponse struct {
	N500ApplicationProblemPlusJSONResponse
}

func (response RemoveFile500ApplicationProblemPlusJSONResponse) VisitRemoveFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RemoveFile503ApplicationProblemPlusJSONResponse struct {
	N503ApplicationProblemPlusJSONResponse
}

func (response RemoveFile503ApplicationProblemPlusJSONResponse) VisitRemoveFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type RemoveFile520ApplicationProblemPlusJSONResponse struct {
	N520ApplicationProblemPlusJSONResponse
}

func (response RemoveFile520ApplicationProblemPlusJSONResponse) VisitRemoveFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(520)

	return json.NewEncoder(w).Encode(response)
}

type RemoveFiledefaultResponse struct {
	StatusCode int
}

func (response RemoveFiledefaultResponse) VisitRemoveFileResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type ViewFileRequestObject struct {
	FederationContextId FederationContextId `json:"federationContextId"`
	FileId              FileId              `json:"fileId"`
}

type ViewFileResponseObject interface {
	VisitViewFileResponse(w http.ResponseWriter) error
}

type ViewFile200JSONResponse struct {
	// AppProviderId UserId of the app provider. Identifier is relevant only in context of this federation.
	AppProviderId AppProviderId `json:"appProviderId"`

	// Checksum MD5 checksum for VM and file-based images, sha256 digest for containers
	Checksum *string `json:"checksum,omitempty"`

	// FileDescription Brief description about the image file.
	FileDescription *string `json:"fileDescription,omitempty"`

	// FileId A globally unique identifier associated with the image file. Originating OP generates this identifier when file is uploaded over NBI.
	FileId FileId `json:"fileId"`

	// FileName Name of the image file.
	FileName         FileName            `json:"fileName"`
	FileRepoLocation *ObjectRepoLocation `json:"fileRepoLocation,omitempty"`

	// FileType Indicate if the file is Container image or VM image (QCOW2, OVA)
	FileType VirtImageType `json:"fileType"`

	// FileVersionInfo File version information
	FileVersionInfo string `json:"fileVersionInfo"`

	// ImgInsSetArch CPU Instruction Set Architecture (ISA) E.g., Intel, Arm etc.
	ImgInsSetArch CPUArchType `json:"imgInsSetArch"`
	ImgOSType     OSType      `json:"imgOSType"`

	// RepoType Artefact or file repository location. PUBLICREPO is used of public URLs like GitHub, Helm repo, docker registry etc., PRIVATEREPO is used for private repo managed by the application developer, UPLOAD is for the case when artefact/file is uploaded from MEC web portal. OP should pull the image from ‘repoUrl' immediately after receiving the request and then send back the response. In case the repoURL corresponds to a docker registry, use docker v2 http api to do the pull.
	RepoType *UploadFileMultipartBodyRepoType `json:"repoType,omitempty"`
}

func (response ViewFile200JSONResponse) VisitViewFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ViewFile400ApplicationProblemPlusJSONResponse struct {
	N400ApplicationProblemPlusJSONResponse
}

func (response ViewFile400ApplicationProblemPlusJSONResponse) VisitViewFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ViewFile401ApplicationProblemPlusJSONResponse struct {
	N401ApplicationProblemPlusJSONResponse
}

func (response ViewFile401ApplicationProblemPlusJSONResponse) VisitViewFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ViewFile404ApplicationProblemPlusJSONResponse struct {
	N404ApplicationProblemPlusJSONResponse
}

func (response ViewFile404ApplicationProblemPlusJSONResponse) VisitViewFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ViewFile409ApplicationProblemPlusJSONResponse struct {
	N409ApplicationProblemPlusJSONResponse
}

func (response ViewFile409ApplicationProblemPlusJSONResponse) VisitViewFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ViewFile422ApplicationProblemPlusJSONResponse struct {
	N422ApplicationProblemPlusJSONResponse
}

func (response ViewFile422ApplicationProblemPlusJSONResponse) VisitViewFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type ViewFile500ApplicationProblemPlusJSONResponse struct {
	N500ApplicationProblemPlusJSONResponse
}

func (response ViewFile500ApplicationProblemPlusJSONResponse) VisitViewFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ViewFile503ApplicationProblemPlusJSONResponse struct {
	N503ApplicationProblemPlusJSONResponse
}

func (response ViewFile503ApplicationProblemPlusJSONResponse) VisitViewFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type ViewFile520ApplicationProblemPlusJSONResponse struct {
	N520ApplicationProblemPlusJSONResponse
}

func (response ViewFile520ApplicationProblemPlusJSONResponse) VisitViewFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(520)

	return json.NewEncoder(w).Encode(response)
}

type ViewFiledefaultResponse struct {
	StatusCode int
}

func (response ViewFiledefaultResponse) VisitViewFileResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type ViewISVResPoolRequestObject struct {
	FederationContextId FederationContextId `json:"federationContextId"`
	ZoneId              ZoneIdentifier      `json:"zoneId"`
	AppProviderId       AppProviderId       `json:"appProviderId"`
}

type ViewISVResPoolResponseObject interface {
	VisitViewISVResPoolResponse(w http.ResponseWriter) error
}

type ViewISVResPool200JSONResponse []struct {
	// PoolName ISV defined name of the resource pool.
	PoolName PoolName `json:"poolName"`

	// ReservationTime Date and time when resources were reserved in UTC format
	ReservationTime *time.Time `json:"reservationTime,omitempty"`

	// ReserveDuration Time period for which resources are to be reserved starting from now
	ReserveDuration  *ResourceReservationDuration `json:"reserveDuration,omitempty"`
	ReservedFlavours []struct {
		// Count Total number of flavours reserved
		Count int32 `json:"count"`

		// FlavourId An identifier to refer to a specific combination of compute resources.
		FlavourId FlavourId `json:"flavourId"`
	} `json:"reservedFlavours"`

	// ReservedPoolId OP defined Identifier for the pool reserved for the ISV. It should be unique with an OP.
	ReservedPoolId PoolId `json:"reservedPoolId"`
}

func (response ViewISVResPool200JSONResponse) VisitViewISVResPoolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ViewISVResPool400ApplicationProblemPlusJSONResponse struct {
	N400ApplicationProblemPlusJSONResponse
}

func (response ViewISVResPool400ApplicationProblemPlusJSONResponse) VisitViewISVResPoolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ViewISVResPool401ApplicationProblemPlusJSONResponse struct {
	N401ApplicationProblemPlusJSONResponse
}

func (response ViewISVResPool401ApplicationProblemPlusJSONResponse) VisitViewISVResPoolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ViewISVResPool404ApplicationProblemPlusJSONResponse struct {
	N404ApplicationProblemPlusJSONResponse
}

func (response ViewISVResPool404ApplicationProblemPlusJSONResponse) VisitViewISVResPoolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ViewISVResPool409ApplicationProblemPlusJSONResponse struct {
	N409ApplicationProblemPlusJSONResponse
}

func (response ViewISVResPool409ApplicationProblemPlusJSONResponse) VisitViewISVResPoolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ViewISVResPool422ApplicationProblemPlusJSONResponse struct {
	N422ApplicationProblemPlusJSONResponse
}

func (response ViewISVResPool422ApplicationProblemPlusJSONResponse) VisitViewISVResPoolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type ViewISVResPool500ApplicationProblemPlusJSONResponse struct {
	N500ApplicationProblemPlusJSONResponse
}

func (response ViewISVResPool500ApplicationProblemPlusJSONResponse) VisitViewISVResPoolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ViewISVResPool503ApplicationProblemPlusJSONResponse struct {
	N503ApplicationProblemPlusJSONResponse
}

func (response ViewISVResPool503ApplicationProblemPlusJSONResponse) VisitViewISVResPoolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type ViewISVResPool520ApplicationProblemPlusJSONResponse struct {
	N520ApplicationProblemPlusJSONResponse
}

func (response ViewISVResPool520ApplicationProblemPlusJSONResponse) VisitViewISVResPoolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(520)

	return json.NewEncoder(w).Encode(response)
}

type ViewISVResPooldefaultResponse struct {
	StatusCode int
}

func (response ViewISVResPooldefaultResponse) VisitViewISVResPoolResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type CreateResourcePoolsRequestObject struct {
	FederationContextId FederationContextId `json:"federationContextId"`
	ZoneId              ZoneIdentifier      `json:"zoneId"`
	AppProviderId       AppProviderId       `json:"appProviderId"`
	Body                *CreateResourcePoolsJSONRequestBody
}

type CreateResourcePoolsResponseObject interface {
	VisitCreateResourcePoolsResponse(w http.ResponseWriter) error
}

type CreateResourcePools200Response struct {
}

func (response CreateResourcePools200Response) VisitCreateResourcePoolsResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type CreateResourcePools400ApplicationProblemPlusJSONResponse struct {
	N400ApplicationProblemPlusJSONResponse
}

func (response CreateResourcePools400ApplicationProblemPlusJSONResponse) VisitCreateResourcePoolsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateResourcePools401ApplicationProblemPlusJSONResponse struct {
	N401ApplicationProblemPlusJSONResponse
}

func (response CreateResourcePools401ApplicationProblemPlusJSONResponse) VisitCreateResourcePoolsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateResourcePools404ApplicationProblemPlusJSONResponse struct {
	N404ApplicationProblemPlusJSONResponse
}

func (response CreateResourcePools404ApplicationProblemPlusJSONResponse) VisitCreateResourcePoolsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateResourcePools409ApplicationProblemPlusJSONResponse struct {
	N409ApplicationProblemPlusJSONResponse
}

func (response CreateResourcePools409ApplicationProblemPlusJSONResponse) VisitCreateResourcePoolsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateResourcePools422ApplicationProblemPlusJSONResponse struct {
	N422ApplicationProblemPlusJSONResponse
}

func (response CreateResourcePools422ApplicationProblemPlusJSONResponse) VisitCreateResourcePoolsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateResourcePools500ApplicationProblemPlusJSONResponse struct {
	N500ApplicationProblemPlusJSONResponse
}

func (response CreateResourcePools500ApplicationProblemPlusJSONResponse) VisitCreateResourcePoolsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateResourcePools503ApplicationProblemPlusJSONResponse struct {
	N503ApplicationProblemPlusJSONResponse
}

func (response CreateResourcePools503ApplicationProblemPlusJSONResponse) VisitCreateResourcePoolsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type CreateResourcePools520ApplicationProblemPlusJSONResponse struct {
	N520ApplicationProblemPlusJSONResponse
}

func (response CreateResourcePools520ApplicationProblemPlusJSONResponse) VisitCreateResourcePoolsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(520)

	return json.NewEncoder(w).Encode(response)
}

type CreateResourcePoolsdefaultResponse struct {
	StatusCode int
}

func (response CreateResourcePoolsdefaultResponse) VisitCreateResourcePoolsResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type RemoveISVResPoolRequestObject struct {
	FederationContextId FederationContextId `json:"federationContextId"`
	ZoneId              ZoneIdentifier      `json:"zoneId"`
	AppProviderId       AppProviderId       `json:"appProviderId"`
	PoolId              PoolId              `json:"poolId"`
}

type RemoveISVResPoolResponseObject interface {
	VisitRemoveISVResPoolResponse(w http.ResponseWriter) error
}

type RemoveISVResPool200Response struct {
}

func (response RemoveISVResPool200Response) VisitRemoveISVResPoolResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type RemoveISVResPool400ApplicationProblemPlusJSONResponse struct {
	N400ApplicationProblemPlusJSONResponse
}

func (response RemoveISVResPool400ApplicationProblemPlusJSONResponse) VisitRemoveISVResPoolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RemoveISVResPool401ApplicationProblemPlusJSONResponse struct {
	N401ApplicationProblemPlusJSONResponse
}

func (response RemoveISVResPool401ApplicationProblemPlusJSONResponse) VisitRemoveISVResPoolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RemoveISVResPool404ApplicationProblemPlusJSONResponse struct {
	N404ApplicationProblemPlusJSONResponse
}

func (response RemoveISVResPool404ApplicationProblemPlusJSONResponse) VisitRemoveISVResPoolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RemoveISVResPool409ApplicationProblemPlusJSONResponse struct {
	N409ApplicationProblemPlusJSONResponse
}

func (response RemoveISVResPool409ApplicationProblemPlusJSONResponse) VisitRemoveISVResPoolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type RemoveISVResPool422ApplicationProblemPlusJSONResponse struct {
	N422ApplicationProblemPlusJSONResponse
}

func (response RemoveISVResPool422ApplicationProblemPlusJSONResponse) VisitRemoveISVResPoolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type RemoveISVResPool500ApplicationProblemPlusJSONResponse struct {
	N500ApplicationProblemPlusJSONResponse
}

func (response RemoveISVResPool500ApplicationProblemPlusJSONResponse) VisitRemoveISVResPoolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RemoveISVResPool503ApplicationProblemPlusJSONResponse struct {
	N503ApplicationProblemPlusJSONResponse
}

func (response RemoveISVResPool503ApplicationProblemPlusJSONResponse) VisitRemoveISVResPoolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type RemoveISVResPool520ApplicationProblemPlusJSONResponse struct {
	N520ApplicationProblemPlusJSONResponse
}

func (response RemoveISVResPool520ApplicationProblemPlusJSONResponse) VisitRemoveISVResPoolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(520)

	return json.NewEncoder(w).Encode(response)
}

type RemoveISVResPooldefaultResponse struct {
	StatusCode int
}

func (response RemoveISVResPooldefaultResponse) VisitRemoveISVResPoolResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type UpdateISVResPoolRequestObject struct {
	FederationContextId FederationContextId `json:"federationContextId"`
	ZoneId              ZoneIdentifier      `json:"zoneId"`
	AppProviderId       AppProviderId       `json:"appProviderId"`
	PoolId              PoolId              `json:"poolId"`
	Body                *UpdateISVResPoolJSONRequestBody
}

type UpdateISVResPoolResponseObject interface {
	VisitUpdateISVResPoolResponse(w http.ResponseWriter) error
}

type UpdateISVResPool200Response struct {
}

func (response UpdateISVResPool200Response) VisitUpdateISVResPoolResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateISVResPool400ApplicationProblemPlusJSONResponse struct {
	N400ApplicationProblemPlusJSONResponse
}

func (response UpdateISVResPool400ApplicationProblemPlusJSONResponse) VisitUpdateISVResPoolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateISVResPool401ApplicationProblemPlusJSONResponse struct {
	N401ApplicationProblemPlusJSONResponse
}

func (response UpdateISVResPool401ApplicationProblemPlusJSONResponse) VisitUpdateISVResPoolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateISVResPool404ApplicationProblemPlusJSONResponse struct {
	N404ApplicationProblemPlusJSONResponse
}

func (response UpdateISVResPool404ApplicationProblemPlusJSONResponse) VisitUpdateISVResPoolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateISVResPool409ApplicationProblemPlusJSONResponse struct {
	N409ApplicationProblemPlusJSONResponse
}

func (response UpdateISVResPool409ApplicationProblemPlusJSONResponse) VisitUpdateISVResPoolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type UpdateISVResPool422ApplicationProblemPlusJSONResponse struct {
	N422ApplicationProblemPlusJSONResponse
}

func (response UpdateISVResPool422ApplicationProblemPlusJSONResponse) VisitUpdateISVResPoolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateISVResPool500ApplicationProblemPlusJSONResponse struct {
	N500ApplicationProblemPlusJSONResponse
}

func (response UpdateISVResPool500ApplicationProblemPlusJSONResponse) VisitUpdateISVResPoolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateISVResPool503ApplicationProblemPlusJSONResponse struct {
	N503ApplicationProblemPlusJSONResponse
}

func (response UpdateISVResPool503ApplicationProblemPlusJSONResponse) VisitUpdateISVResPoolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type UpdateISVResPool520ApplicationProblemPlusJSONResponse struct {
	N520ApplicationProblemPlusJSONResponse
}

func (response UpdateISVResPool520ApplicationProblemPlusJSONResponse) VisitUpdateISVResPoolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(520)

	return json.NewEncoder(w).Encode(response)
}

type UpdateISVResPooldefaultResponse struct {
	StatusCode int
}

func (response UpdateISVResPooldefaultResponse) VisitUpdateISVResPoolResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type DeleteFederationDetailsRequestObject struct {
	FederationContextId FederationContextId `json:"federationContextId"`
}

type DeleteFederationDetailsResponseObject interface {
	VisitDeleteFederationDetailsResponse(w http.ResponseWriter) error
}

type DeleteFederationDetails200Response struct {
}

func (response DeleteFederationDetails200Response) VisitDeleteFederationDetailsResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteFederationDetails400ApplicationProblemPlusJSONResponse struct {
	N400ApplicationProblemPlusJSONResponse
}

func (response DeleteFederationDetails400ApplicationProblemPlusJSONResponse) VisitDeleteFederationDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFederationDetails401ApplicationProblemPlusJSONResponse struct {
	N401ApplicationProblemPlusJSONResponse
}

func (response DeleteFederationDetails401ApplicationProblemPlusJSONResponse) VisitDeleteFederationDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFederationDetails404ApplicationProblemPlusJSONResponse struct {
	N404ApplicationProblemPlusJSONResponse
}

func (response DeleteFederationDetails404ApplicationProblemPlusJSONResponse) VisitDeleteFederationDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFederationDetails409ApplicationProblemPlusJSONResponse struct {
	N409ApplicationProblemPlusJSONResponse
}

func (response DeleteFederationDetails409ApplicationProblemPlusJSONResponse) VisitDeleteFederationDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFederationDetails422ApplicationProblemPlusJSONResponse struct {
	N422ApplicationProblemPlusJSONResponse
}

func (response DeleteFederationDetails422ApplicationProblemPlusJSONResponse) VisitDeleteFederationDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFederationDetails500ApplicationProblemPlusJSONResponse struct {
	N500ApplicationProblemPlusJSONResponse
}

func (response DeleteFederationDetails500ApplicationProblemPlusJSONResponse) VisitDeleteFederationDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFederationDetails503ApplicationProblemPlusJSONResponse struct {
	N503ApplicationProblemPlusJSONResponse
}

func (response DeleteFederationDetails503ApplicationProblemPlusJSONResponse) VisitDeleteFederationDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFederationDetails520ApplicationProblemPlusJSONResponse struct {
	N520ApplicationProblemPlusJSONResponse
}

func (response DeleteFederationDetails520ApplicationProblemPlusJSONResponse) VisitDeleteFederationDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(520)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFederationDetailsdefaultResponse struct {
	StatusCode int
}

func (response DeleteFederationDetailsdefaultResponse) VisitDeleteFederationDetailsResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GetFederationDetailsRequestObject struct {
	FederationContextId FederationContextId `json:"federationContextId"`
}

type GetFederationDetailsResponseObject interface {
	VisitGetFederationDetailsResponse(w http.ResponseWriter) error
}

type GetFederationDetails200JSONResponse struct {
	// AllowedFixedNetworkIds List of network identifier associated with the fixed line network of the operator platform.
	AllowedFixedNetworkIds       *FixedNetworkIds  `json:"allowedFixedNetworkIds,omitempty"`
	AllowedMobileNetworkIds      *MobileNetworkIds `json:"allowedMobileNetworkIds,omitempty"`
	EdgeDiscoveryServiceEndPoint ServiceEndpoint   `json:"edgeDiscoveryServiceEndPoint"`
	LcmServiceEndPoint           ServiceEndpoint   `json:"lcmServiceEndPoint"`
	OfferedAvailabilityZones     *[]ZoneDetails    `json:"offeredAvailabilityZones,omitempty"`
}

func (response GetFederationDetails200JSONResponse) VisitGetFederationDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetFederationDetails400ApplicationProblemPlusJSONResponse struct {
	N400ApplicationProblemPlusJSONResponse
}

func (response GetFederationDetails400ApplicationProblemPlusJSONResponse) VisitGetFederationDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetFederationDetails401ApplicationProblemPlusJSONResponse struct {
	N401ApplicationProblemPlusJSONResponse
}

func (response GetFederationDetails401ApplicationProblemPlusJSONResponse) VisitGetFederationDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetFederationDetails404ApplicationProblemPlusJSONResponse struct {
	N404ApplicationProblemPlusJSONResponse
}

func (response GetFederationDetails404ApplicationProblemPlusJSONResponse) VisitGetFederationDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetFederationDetails409ApplicationProblemPlusJSONResponse struct {
	N409ApplicationProblemPlusJSONResponse
}

func (response GetFederationDetails409ApplicationProblemPlusJSONResponse) VisitGetFederationDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type GetFederationDetails422ApplicationProblemPlusJSONResponse struct {
	N422ApplicationProblemPlusJSONResponse
}

func (response GetFederationDetails422ApplicationProblemPlusJSONResponse) VisitGetFederationDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetFederationDetails500ApplicationProblemPlusJSONResponse struct {
	N500ApplicationProblemPlusJSONResponse
}

func (response GetFederationDetails500ApplicationProblemPlusJSONResponse) VisitGetFederationDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetFederationDetails503ApplicationProblemPlusJSONResponse struct {
	N503ApplicationProblemPlusJSONResponse
}

func (response GetFederationDetails503ApplicationProblemPlusJSONResponse) VisitGetFederationDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type GetFederationDetails520ApplicationProblemPlusJSONResponse struct {
	N520ApplicationProblemPlusJSONResponse
}

func (response GetFederationDetails520ApplicationProblemPlusJSONResponse) VisitGetFederationDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(520)

	return json.NewEncoder(w).Encode(response)
}

type GetFederationDetailsdefaultResponse struct {
	StatusCode int
}

func (response GetFederationDetailsdefaultResponse) VisitGetFederationDetailsResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type UpdateFederationRequestObject struct {
	FederationContextId FederationContextId `json:"federationContextId"`
	Body                *UpdateFederationJSONRequestBody
}

type UpdateFederationResponseObject interface {
	VisitUpdateFederationResponse(w http.ResponseWriter) error
}

type UpdateFederation200JSONResponse struct {
	// AllowedFixedNetworkIds List of network identifier associated with the fixed line network of the operator platform.
	AllowedFixedNetworkIds       *FixedNetworkIds  `json:"allowedFixedNetworkIds,omitempty"`
	AllowedMobileNetworkIds      *MobileNetworkIds `json:"allowedMobileNetworkIds,omitempty"`
	EdgeDiscoveryServiceEndPoint ServiceEndpoint   `json:"edgeDiscoveryServiceEndPoint"`
	LcmServiceEndPoint           ServiceEndpoint   `json:"lcmServiceEndPoint"`
	OfferedAvailabilityZones     *[]ZoneDetails    `json:"offeredAvailabilityZones,omitempty"`
}

func (response UpdateFederation200JSONResponse) VisitUpdateFederationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFederation400ApplicationProblemPlusJSONResponse struct {
	N400ApplicationProblemPlusJSONResponse
}

func (response UpdateFederation400ApplicationProblemPlusJSONResponse) VisitUpdateFederationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFederation401ApplicationProblemPlusJSONResponse struct {
	N401ApplicationProblemPlusJSONResponse
}

func (response UpdateFederation401ApplicationProblemPlusJSONResponse) VisitUpdateFederationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFederation404ApplicationProblemPlusJSONResponse struct {
	N404ApplicationProblemPlusJSONResponse
}

func (response UpdateFederation404ApplicationProblemPlusJSONResponse) VisitUpdateFederationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFederation409ApplicationProblemPlusJSONResponse struct {
	N409ApplicationProblemPlusJSONResponse
}

func (response UpdateFederation409ApplicationProblemPlusJSONResponse) VisitUpdateFederationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFederation422ApplicationProblemPlusJSONResponse struct {
	N422ApplicationProblemPlusJSONResponse
}

func (response UpdateFederation422ApplicationProblemPlusJSONResponse) VisitUpdateFederationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFederation500ApplicationProblemPlusJSONResponse struct {
	N500ApplicationProblemPlusJSONResponse
}

func (response UpdateFederation500ApplicationProblemPlusJSONResponse) VisitUpdateFederationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFederation503ApplicationProblemPlusJSONResponse struct {
	N503ApplicationProblemPlusJSONResponse
}

func (response UpdateFederation503ApplicationProblemPlusJSONResponse) VisitUpdateFederationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFederation520ApplicationProblemPlusJSONResponse struct {
	N520ApplicationProblemPlusJSONResponse
}

func (response UpdateFederation520ApplicationProblemPlusJSONResponse) VisitUpdateFederationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(520)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFederationdefaultResponse struct {
	StatusCode int
}

func (response UpdateFederationdefaultResponse) VisitUpdateFederationResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type AuthenticateDeviceRequestObject struct {
	FederationContextId FederationContextId `json:"federationContextId"`
	DeviceId            DeviceId            `json:"deviceId"`
	AuthToken           AuthorizationToken  `json:"authToken"`
}

type AuthenticateDeviceResponseObject interface {
	VisitAuthenticateDeviceResponse(w http.ResponseWriter) error
}

type AuthenticateDevice200Response struct {
}

func (response AuthenticateDevice200Response) VisitAuthenticateDeviceResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type AuthenticateDevice401ApplicationProblemPlusJSONResponse struct {
	N401ApplicationProblemPlusJSONResponse
}

func (response AuthenticateDevice401ApplicationProblemPlusJSONResponse) VisitAuthenticateDeviceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type AuthenticateDevice404ApplicationProblemPlusJSONResponse struct {
	N404ApplicationProblemPlusJSONResponse
}

func (response AuthenticateDevice404ApplicationProblemPlusJSONResponse) VisitAuthenticateDeviceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AuthenticateDevice422ApplicationProblemPlusJSONResponse struct {
	N422ApplicationProblemPlusJSONResponse
}

func (response AuthenticateDevice422ApplicationProblemPlusJSONResponse) VisitAuthenticateDeviceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type AuthenticateDevice500ApplicationProblemPlusJSONResponse struct {
	N500ApplicationProblemPlusJSONResponse
}

func (response AuthenticateDevice500ApplicationProblemPlusJSONResponse) VisitAuthenticateDeviceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AuthenticateDevice503ApplicationProblemPlusJSONResponse struct {
	N503ApplicationProblemPlusJSONResponse
}

func (response AuthenticateDevice503ApplicationProblemPlusJSONResponse) VisitAuthenticateDeviceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type AuthenticateDevicedefaultResponse struct {
	StatusCode int
}

func (response AuthenticateDevicedefaultResponse) VisitAuthenticateDeviceResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type ZoneSubscribeRequestObject struct {
	FederationContextId FederationContextId `json:"federationContextId"`
	Body                *ZoneSubscribeJSONRequestBody
}

type ZoneSubscribeResponseObject interface {
	VisitZoneSubscribeResponse(w http.ResponseWriter) error
}

type ZoneSubscribe200JSONResponse ZoneRegistrationResponseData

func (response ZoneSubscribe200JSONResponse) VisitZoneSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ZoneSubscribe400ApplicationProblemPlusJSONResponse struct {
	N400ApplicationProblemPlusJSONResponse
}

func (response ZoneSubscribe400ApplicationProblemPlusJSONResponse) VisitZoneSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ZoneSubscribe401ApplicationProblemPlusJSONResponse struct {
	N401ApplicationProblemPlusJSONResponse
}

func (response ZoneSubscribe401ApplicationProblemPlusJSONResponse) VisitZoneSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ZoneSubscribe404ApplicationProblemPlusJSONResponse struct {
	N404ApplicationProblemPlusJSONResponse
}

func (response ZoneSubscribe404ApplicationProblemPlusJSONResponse) VisitZoneSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ZoneSubscribe409ApplicationProblemPlusJSONResponse struct {
	N409ApplicationProblemPlusJSONResponse
}

func (response ZoneSubscribe409ApplicationProblemPlusJSONResponse) VisitZoneSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ZoneSubscribe422ApplicationProblemPlusJSONResponse struct {
	N422ApplicationProblemPlusJSONResponse
}

func (response ZoneSubscribe422ApplicationProblemPlusJSONResponse) VisitZoneSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type ZoneSubscribe500ApplicationProblemPlusJSONResponse struct {
	N500ApplicationProblemPlusJSONResponse
}

func (response ZoneSubscribe500ApplicationProblemPlusJSONResponse) VisitZoneSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ZoneSubscribe503ApplicationProblemPlusJSONResponse struct {
	N503ApplicationProblemPlusJSONResponse
}

func (response ZoneSubscribe503ApplicationProblemPlusJSONResponse) VisitZoneSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type ZoneSubscribe520ApplicationProblemPlusJSONResponse struct {
	N520ApplicationProblemPlusJSONResponse
}

func (response ZoneSubscribe520ApplicationProblemPlusJSONResponse) VisitZoneSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(520)

	return json.NewEncoder(w).Encode(response)
}

type ZoneSubscribedefaultResponse struct {
	StatusCode int
}

func (response ZoneSubscribedefaultResponse) VisitZoneSubscribeResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type ZoneUnsubscribeRequestObject struct {
	FederationContextId FederationContextId `json:"federationContextId"`
	ZoneId              ZoneIdentifier      `json:"zoneId"`
}

type ZoneUnsubscribeResponseObject interface {
	VisitZoneUnsubscribeResponse(w http.ResponseWriter) error
}

type ZoneUnsubscribe200Response struct {
}

func (response ZoneUnsubscribe200Response) VisitZoneUnsubscribeResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ZoneUnsubscribe400ApplicationProblemPlusJSONResponse struct {
	N400ApplicationProblemPlusJSONResponse
}

func (response ZoneUnsubscribe400ApplicationProblemPlusJSONResponse) VisitZoneUnsubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ZoneUnsubscribe401ApplicationProblemPlusJSONResponse struct {
	N401ApplicationProblemPlusJSONResponse
}

func (response ZoneUnsubscribe401ApplicationProblemPlusJSONResponse) VisitZoneUnsubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ZoneUnsubscribe404ApplicationProblemPlusJSONResponse struct {
	N404ApplicationProblemPlusJSONResponse
}

func (response ZoneUnsubscribe404ApplicationProblemPlusJSONResponse) VisitZoneUnsubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ZoneUnsubscribe409ApplicationProblemPlusJSONResponse struct {
	N409ApplicationProblemPlusJSONResponse
}

func (response ZoneUnsubscribe409ApplicationProblemPlusJSONResponse) VisitZoneUnsubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ZoneUnsubscribe422ApplicationProblemPlusJSONResponse struct {
	N422ApplicationProblemPlusJSONResponse
}

func (response ZoneUnsubscribe422ApplicationProblemPlusJSONResponse) VisitZoneUnsubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type ZoneUnsubscribe500ApplicationProblemPlusJSONResponse struct {
	N500ApplicationProblemPlusJSONResponse
}

func (response ZoneUnsubscribe500ApplicationProblemPlusJSONResponse) VisitZoneUnsubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ZoneUnsubscribe503ApplicationProblemPlusJSONResponse struct {
	N503ApplicationProblemPlusJSONResponse
}

func (response ZoneUnsubscribe503ApplicationProblemPlusJSONResponse) VisitZoneUnsubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type ZoneUnsubscribe520ApplicationProblemPlusJSONResponse struct {
	N520ApplicationProblemPlusJSONResponse
}

func (response ZoneUnsubscribe520ApplicationProblemPlusJSONResponse) VisitZoneUnsubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(520)

	return json.NewEncoder(w).Encode(response)
}

type ZoneUnsubscribedefaultResponse struct {
	StatusCode int
}

func (response ZoneUnsubscribedefaultResponse) VisitZoneUnsubscribeResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GetZoneDataRequestObject struct {
	FederationContextId FederationContextId `json:"federationContextId"`
	ZoneId              ZoneIdentifier      `json:"zoneId"`
}

type GetZoneDataResponseObject interface {
	VisitGetZoneDataResponse(w http.ResponseWriter) error
}

type GetZoneData200JSONResponse ZoneRegisteredData

func (response GetZoneData200JSONResponse) VisitGetZoneDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetZoneData400ApplicationProblemPlusJSONResponse struct {
	N400ApplicationProblemPlusJSONResponse
}

func (response GetZoneData400ApplicationProblemPlusJSONResponse) VisitGetZoneDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetZoneData401ApplicationProblemPlusJSONResponse struct {
	N401ApplicationProblemPlusJSONResponse
}

func (response GetZoneData401ApplicationProblemPlusJSONResponse) VisitGetZoneDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetZoneData404ApplicationProblemPlusJSONResponse struct {
	N404ApplicationProblemPlusJSONResponse
}

func (response GetZoneData404ApplicationProblemPlusJSONResponse) VisitGetZoneDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetZoneData409ApplicationProblemPlusJSONResponse struct {
	N409ApplicationProblemPlusJSONResponse
}

func (response GetZoneData409ApplicationProblemPlusJSONResponse) VisitGetZoneDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type GetZoneData422ApplicationProblemPlusJSONResponse struct {
	N422ApplicationProblemPlusJSONResponse
}

func (response GetZoneData422ApplicationProblemPlusJSONResponse) VisitGetZoneDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetZoneData500ApplicationProblemPlusJSONResponse struct {
	N500ApplicationProblemPlusJSONResponse
}

func (response GetZoneData500ApplicationProblemPlusJSONResponse) VisitGetZoneDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetZoneData503ApplicationProblemPlusJSONResponse struct {
	N503ApplicationProblemPlusJSONResponse
}

func (response GetZoneData503ApplicationProblemPlusJSONResponse) VisitGetZoneDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type GetZoneData520ApplicationProblemPlusJSONResponse struct {
	N520ApplicationProblemPlusJSONResponse
}

func (response GetZoneData520ApplicationProblemPlusJSONResponse) VisitGetZoneDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(520)

	return json.NewEncoder(w).Encode(response)
}

type GetZoneDatadefaultResponse struct {
	StatusCode int
}

func (response GetZoneDatadefaultResponse) VisitGetZoneDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Creates one direction federation with partner operator platform.
	// (POST /partner)
	CreateFederation(ctx context.Context, request CreateFederationRequestObject) (CreateFederationResponseObject, error)

	// (POST /{federationCallbackId}/appInstCallbackLink)
	AppInstCallbackLink(ctx context.Context, request AppInstCallbackLinkRequestObject) (AppInstCallbackLinkResponseObject, error)

	// (POST /{federationCallbackId}/appStatusCallbackLink)
	AppStatusCallbackLink(ctx context.Context, request AppStatusCallbackLinkRequestObject) (AppStatusCallbackLinkResponseObject, error)

	// (POST /{federationCallbackId}/availZoneNotifLink)
	AvailZoneNotifLink(ctx context.Context, request AvailZoneNotifLinkRequestObject) (AvailZoneNotifLinkResponseObject, error)

	// (POST /{federationCallbackId}/partnerStatusLink)
	PartnerStatusLink(ctx context.Context, request PartnerStatusLinkRequestObject) (PartnerStatusLinkResponseObject, error)

	// (POST /{federationCallbackId}/resourceReservationCallbackLink)
	ResourceReservationCallbackLink(ctx context.Context, request ResourceReservationCallbackLinkRequestObject) (ResourceReservationCallbackLinkResponseObject, error)
	// Instantiates an application on a partner OP zone.
	// (POST /{federationContextId}/application/lcm)
	InstallApp(ctx context.Context, request InstallAppRequestObject) (InstallAppResponseObject, error)
	// Retrieves all application instance of partner OP
	// (GET /{federationContextId}/application/lcm/app/{appId}/appProvider/{appProviderId})
	GetAllAppInstances(ctx context.Context, request GetAllAppInstancesRequestObject) (GetAllAppInstancesResponseObject, error)
	// Terminate an application instance on a partner OP zone.
	// (DELETE /{federationContextId}/application/lcm/app/{appId}/instance/{appInstanceId}/zone/{zoneId})
	RemoveApp(ctx context.Context, request RemoveAppRequestObject) (RemoveAppResponseObject, error)
	// Retrieves an application instance details from partner OP.
	// (GET /{federationContextId}/application/lcm/app/{appId}/instance/{appInstanceId}/zone/{zoneId})
	GetAppInstanceDetails(ctx context.Context, request GetAppInstanceDetailsRequestObject) (GetAppInstanceDetailsResponseObject, error)
	// Submits an application details to a partner OP. Based on the details provided,  partner OP shall do bookkeeping, resource validation and other pre-deployment operations.
	// (POST /{federationContextId}/application/onboarding)
	OnboardApplication(ctx context.Context, request OnboardApplicationRequestObject) (OnboardApplicationResponseObject, error)
	// Deboards the application from any zones, if any, and deletes the App.
	// (DELETE /{federationContextId}/application/onboarding/app/{appId})
	DeleteApp(ctx context.Context, request DeleteAppRequestObject) (DeleteAppResponseObject, error)
	// Retrieves application details from partner OP
	// (GET /{federationContextId}/application/onboarding/app/{appId})
	ViewApplication(ctx context.Context, request ViewApplicationRequestObject) (ViewApplicationResponseObject, error)
	// Updates partner OP about changes in application compute resource requirements, QOS Profile, associated descriptor or change in associated components
	// (PATCH /{federationContextId}/application/onboarding/app/{appId})
	UpdateApplication(ctx context.Context, request UpdateApplicationRequestObject) (UpdateApplicationResponseObject, error)
	// Onboards an existing application to a new zone within partner OP.
	// (POST /{federationContextId}/application/onboarding/app/{appId}/additionalZones)
	OnboardExistingAppNewZones(ctx context.Context, request OnboardExistingAppNewZonesRequestObject) (OnboardExistingAppNewZonesResponseObject, error)
	// Deboards an application from partner OP zones
	// (DELETE /{federationContextId}/application/onboarding/app/{appId}/zone/{zoneId})
	DeboardApplication(ctx context.Context, request DeboardApplicationRequestObject) (DeboardApplicationResponseObject, error)
	// Forbid/allow application instantiation on a partner zone
	// (POST /{federationContextId}/application/onboarding/app/{appId}/zoneForbid)
	LockUnlockApplicationZone(ctx context.Context, request LockUnlockApplicationZoneRequestObject) (LockUnlockApplicationZoneResponseObject, error)
	// Uploads application artefact on partner OP. Artefact is a zip file containing scripts and/or packaging files like Terraform or Helm which are required to create an instance of an application.
	// (POST /{federationContextId}/artefact)
	UploadArtefact(ctx context.Context, request UploadArtefactRequestObject) (UploadArtefactResponseObject, error)
	// Removes an artefact from partner OP.
	// (DELETE /{federationContextId}/artefact/{artefactId})
	RemoveArtefact(ctx context.Context, request RemoveArtefactRequestObject) (RemoveArtefactResponseObject, error)
	// Retrieves details about an artefact.
	// (GET /{federationContextId}/artefact/{artefactId})
	GetArtefact(ctx context.Context, request GetArtefactRequestObject) (GetArtefactResponseObject, error)
	// Edge discovery procedures towards partner OP over E/WBI. Originating OP request partner OP to provide a list of candidate zones where an application instance can be created. Partner OP applies a set of filtering criteria's to select candidate zones.
	// (POST /{federationContextId}/edgenodesharing/edgeDiscovery)
	GetCandidateZones(ctx context.Context, request GetCandidateZonesRequestObject) (GetCandidateZonesResponseObject, error)
	// Uploads an image file. Originating OP uses this api to onboard an application image to partner OP.
	// (POST /{federationContextId}/files)
	UploadFile(ctx context.Context, request UploadFileRequestObject) (UploadFileResponseObject, error)
	// Removes an image file from partner OP.
	// (DELETE /{federationContextId}/files/{fileId})
	RemoveFile(ctx context.Context, request RemoveFileRequestObject) (RemoveFileResponseObject, error)
	// View an image file from partner OP.
	// (GET /{federationContextId}/files/{fileId})
	ViewFile(ctx context.Context, request ViewFileRequestObject) (ViewFileResponseObject, error)
	// Retrieves the resource pool reserved by an ISV
	// (GET /{federationContextId}/isv/resource/zone/{zoneId}/appProvider/{appProviderId})
	ViewISVResPool(ctx context.Context, request ViewISVResPoolRequestObject) (ViewISVResPoolResponseObject, error)
	// Reserves resources (compute, network and storage)  on a partner OP zone. ISVs registered with home OP reserves resources on a partner OP zone.
	// (POST /{federationContextId}/isv/resource/zone/{zoneId}/appProvider/{appProviderId})
	CreateResourcePools(ctx context.Context, request CreateResourcePoolsRequestObject) (CreateResourcePoolsResponseObject, error)
	// Deletes the resource pool reserved by an ISV
	// (DELETE /{federationContextId}/isv/resource/zone/{zoneId}/appProvider/{appProviderId}/pool/{poolId})
	RemoveISVResPool(ctx context.Context, request RemoveISVResPoolRequestObject) (RemoveISVResPoolResponseObject, error)
	// Updates resources reserved for a pool by an ISV
	// (PATCH /{federationContextId}/isv/resource/zone/{zoneId}/appProvider/{appProviderId}/pool/{poolId})
	UpdateISVResPool(ctx context.Context, request UpdateISVResPoolRequestObject) (UpdateISVResPoolResponseObject, error)
	// Remove existing federation with the partner OP
	// (DELETE /{federationContextId}/partner)
	DeleteFederationDetails(ctx context.Context, request DeleteFederationDetailsRequestObject) (DeleteFederationDetailsResponseObject, error)
	// Retrieves details about the federation context with the partner OP. The response shall provide info about the zones offered by the partner, partner OP network codes, information about edge discovery and LCM service etc.
	// (GET /{federationContextId}/partner)
	GetFederationDetails(ctx context.Context, request GetFederationDetailsRequestObject) (GetFederationDetailsResponseObject, error)
	// API used by the Originating OP towards the partner OP, to update the parameters associated to the existing federation
	// (PATCH /{federationContextId}/partner)
	UpdateFederation(ctx context.Context, request UpdateFederationRequestObject) (UpdateFederationResponseObject, error)
	// Validates the authenticity of a roaming user from home OP
	// (GET /{federationContextId}/roaminguserauth/device/{deviceId}/token/{authToken})
	AuthenticateDevice(ctx context.Context, request AuthenticateDeviceRequestObject) (AuthenticateDeviceResponseObject, error)
	// Originating OP informs partner OP that it is willing to access the specified zones and partner OP shall reserve compute and network resources for these zones.
	// (POST /{federationContextId}/zones)
	ZoneSubscribe(ctx context.Context, request ZoneSubscribeRequestObject) (ZoneSubscribeResponseObject, error)
	// Assert usage of a partner OP zone. Originating OP informs partner OP that it will no longer access the specified zone.
	// (DELETE /{federationContextId}/zones/{zoneId})
	ZoneUnsubscribe(ctx context.Context, request ZoneUnsubscribeRequestObject) (ZoneUnsubscribeResponseObject, error)
	// Retrieves details about the computation and network resources that partner OP has reserved for this zone.
	// (GET /{federationContextId}/zones/{zoneId})
	GetZoneData(ctx context.Context, request GetZoneDataRequestObject) (GetZoneDataResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// CreateFederation operation middleware
func (sh *strictHandler) CreateFederation(ctx echo.Context) error {
	var request CreateFederationRequestObject

	var body CreateFederationJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateFederation(ctx.Request().Context(), request.(CreateFederationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateFederation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateFederationResponseObject); ok {
		return validResponse.VisitCreateFederationResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AppInstCallbackLink operation middleware
func (sh *strictHandler) AppInstCallbackLink(ctx echo.Context, federationCallbackId FederationCallbackId) error {
	var request AppInstCallbackLinkRequestObject

	request.FederationCallbackId = federationCallbackId

	var body AppInstCallbackLinkJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AppInstCallbackLink(ctx.Request().Context(), request.(AppInstCallbackLinkRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AppInstCallbackLink")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AppInstCallbackLinkResponseObject); ok {
		return validResponse.VisitAppInstCallbackLinkResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AppStatusCallbackLink operation middleware
func (sh *strictHandler) AppStatusCallbackLink(ctx echo.Context, federationCallbackId FederationCallbackId) error {
	var request AppStatusCallbackLinkRequestObject

	request.FederationCallbackId = federationCallbackId

	var body AppStatusCallbackLinkJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AppStatusCallbackLink(ctx.Request().Context(), request.(AppStatusCallbackLinkRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AppStatusCallbackLink")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AppStatusCallbackLinkResponseObject); ok {
		return validResponse.VisitAppStatusCallbackLinkResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AvailZoneNotifLink operation middleware
func (sh *strictHandler) AvailZoneNotifLink(ctx echo.Context, federationCallbackId FederationCallbackId) error {
	var request AvailZoneNotifLinkRequestObject

	request.FederationCallbackId = federationCallbackId

	var body AvailZoneNotifLinkJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AvailZoneNotifLink(ctx.Request().Context(), request.(AvailZoneNotifLinkRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AvailZoneNotifLink")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AvailZoneNotifLinkResponseObject); ok {
		return validResponse.VisitAvailZoneNotifLinkResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PartnerStatusLink operation middleware
func (sh *strictHandler) PartnerStatusLink(ctx echo.Context, federationCallbackId FederationCallbackId) error {
	var request PartnerStatusLinkRequestObject

	request.FederationCallbackId = federationCallbackId

	var body PartnerStatusLinkJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PartnerStatusLink(ctx.Request().Context(), request.(PartnerStatusLinkRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PartnerStatusLink")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PartnerStatusLinkResponseObject); ok {
		return validResponse.VisitPartnerStatusLinkResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ResourceReservationCallbackLink operation middleware
func (sh *strictHandler) ResourceReservationCallbackLink(ctx echo.Context, federationCallbackId FederationCallbackId) error {
	var request ResourceReservationCallbackLinkRequestObject

	request.FederationCallbackId = federationCallbackId

	var body ResourceReservationCallbackLinkJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ResourceReservationCallbackLink(ctx.Request().Context(), request.(ResourceReservationCallbackLinkRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ResourceReservationCallbackLink")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ResourceReservationCallbackLinkResponseObject); ok {
		return validResponse.VisitResourceReservationCallbackLinkResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// InstallApp operation middleware
func (sh *strictHandler) InstallApp(ctx echo.Context, federationContextId FederationContextId) error {
	var request InstallAppRequestObject

	request.FederationContextId = federationContextId

	var body InstallAppJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.InstallApp(ctx.Request().Context(), request.(InstallAppRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "InstallApp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(InstallAppResponseObject); ok {
		return validResponse.VisitInstallAppResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetAllAppInstances operation middleware
func (sh *strictHandler) GetAllAppInstances(ctx echo.Context, federationContextId FederationContextId, appId AppIdentifier, appProviderId AppProviderId) error {
	var request GetAllAppInstancesRequestObject

	request.FederationContextId = federationContextId
	request.AppId = appId
	request.AppProviderId = appProviderId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllAppInstances(ctx.Request().Context(), request.(GetAllAppInstancesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllAppInstances")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAllAppInstancesResponseObject); ok {
		return validResponse.VisitGetAllAppInstancesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// RemoveApp operation middleware
func (sh *strictHandler) RemoveApp(ctx echo.Context, federationContextId FederationContextId, appId AppIdentifier, appInstanceId InstanceIdentifier, zoneId ZoneIdentifier) error {
	var request RemoveAppRequestObject

	request.FederationContextId = federationContextId
	request.AppId = appId
	request.AppInstanceId = appInstanceId
	request.ZoneId = zoneId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RemoveApp(ctx.Request().Context(), request.(RemoveAppRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RemoveApp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RemoveAppResponseObject); ok {
		return validResponse.VisitRemoveAppResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetAppInstanceDetails operation middleware
func (sh *strictHandler) GetAppInstanceDetails(ctx echo.Context, federationContextId FederationContextId, appId AppIdentifier, appInstanceId InstanceIdentifier, zoneId ZoneIdentifier) error {
	var request GetAppInstanceDetailsRequestObject

	request.FederationContextId = federationContextId
	request.AppId = appId
	request.AppInstanceId = appInstanceId
	request.ZoneId = zoneId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAppInstanceDetails(ctx.Request().Context(), request.(GetAppInstanceDetailsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAppInstanceDetails")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAppInstanceDetailsResponseObject); ok {
		return validResponse.VisitGetAppInstanceDetailsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// OnboardApplication operation middleware
func (sh *strictHandler) OnboardApplication(ctx echo.Context, federationContextId FederationContextId) error {
	var request OnboardApplicationRequestObject

	request.FederationContextId = federationContextId

	var body OnboardApplicationJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.OnboardApplication(ctx.Request().Context(), request.(OnboardApplicationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OnboardApplication")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(OnboardApplicationResponseObject); ok {
		return validResponse.VisitOnboardApplicationResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteApp operation middleware
func (sh *strictHandler) DeleteApp(ctx echo.Context, federationContextId FederationContextId, appId AppIdentifier) error {
	var request DeleteAppRequestObject

	request.FederationContextId = federationContextId
	request.AppId = appId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteApp(ctx.Request().Context(), request.(DeleteAppRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteApp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteAppResponseObject); ok {
		return validResponse.VisitDeleteAppResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ViewApplication operation middleware
func (sh *strictHandler) ViewApplication(ctx echo.Context, federationContextId FederationContextId, appId AppIdentifier) error {
	var request ViewApplicationRequestObject

	request.FederationContextId = federationContextId
	request.AppId = appId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ViewApplication(ctx.Request().Context(), request.(ViewApplicationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ViewApplication")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ViewApplicationResponseObject); ok {
		return validResponse.VisitViewApplicationResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateApplication operation middleware
func (sh *strictHandler) UpdateApplication(ctx echo.Context, federationContextId FederationContextId, appId AppIdentifier) error {
	var request UpdateApplicationRequestObject

	request.FederationContextId = federationContextId
	request.AppId = appId

	var body UpdateApplicationJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateApplication(ctx.Request().Context(), request.(UpdateApplicationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateApplication")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateApplicationResponseObject); ok {
		return validResponse.VisitUpdateApplicationResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// OnboardExistingAppNewZones operation middleware
func (sh *strictHandler) OnboardExistingAppNewZones(ctx echo.Context, federationContextId FederationContextId, appId AppIdentifier) error {
	var request OnboardExistingAppNewZonesRequestObject

	request.FederationContextId = federationContextId
	request.AppId = appId

	var body OnboardExistingAppNewZonesJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.OnboardExistingAppNewZones(ctx.Request().Context(), request.(OnboardExistingAppNewZonesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OnboardExistingAppNewZones")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(OnboardExistingAppNewZonesResponseObject); ok {
		return validResponse.VisitOnboardExistingAppNewZonesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeboardApplication operation middleware
func (sh *strictHandler) DeboardApplication(ctx echo.Context, federationContextId FederationContextId, appId AppIdentifier, zoneId ZoneIdentifier) error {
	var request DeboardApplicationRequestObject

	request.FederationContextId = federationContextId
	request.AppId = appId
	request.ZoneId = zoneId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeboardApplication(ctx.Request().Context(), request.(DeboardApplicationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeboardApplication")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeboardApplicationResponseObject); ok {
		return validResponse.VisitDeboardApplicationResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// LockUnlockApplicationZone operation middleware
func (sh *strictHandler) LockUnlockApplicationZone(ctx echo.Context, federationContextId FederationContextId, appId AppIdentifier) error {
	var request LockUnlockApplicationZoneRequestObject

	request.FederationContextId = federationContextId
	request.AppId = appId

	var body LockUnlockApplicationZoneJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.LockUnlockApplicationZone(ctx.Request().Context(), request.(LockUnlockApplicationZoneRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LockUnlockApplicationZone")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(LockUnlockApplicationZoneResponseObject); ok {
		return validResponse.VisitLockUnlockApplicationZoneResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UploadArtefact operation middleware
func (sh *strictHandler) UploadArtefact(ctx echo.Context, federationContextId FederationContextId) error {
	var request UploadArtefactRequestObject

	request.FederationContextId = federationContextId

	if reader, err := ctx.Request().MultipartReader(); err != nil {
		return err
	} else {
		request.Body = reader
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UploadArtefact(ctx.Request().Context(), request.(UploadArtefactRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UploadArtefact")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UploadArtefactResponseObject); ok {
		return validResponse.VisitUploadArtefactResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// RemoveArtefact operation middleware
func (sh *strictHandler) RemoveArtefact(ctx echo.Context, federationContextId FederationContextId, artefactId ArtefactId) error {
	var request RemoveArtefactRequestObject

	request.FederationContextId = federationContextId
	request.ArtefactId = artefactId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RemoveArtefact(ctx.Request().Context(), request.(RemoveArtefactRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RemoveArtefact")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RemoveArtefactResponseObject); ok {
		return validResponse.VisitRemoveArtefactResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetArtefact operation middleware
func (sh *strictHandler) GetArtefact(ctx echo.Context, federationContextId FederationContextId, artefactId ArtefactId) error {
	var request GetArtefactRequestObject

	request.FederationContextId = federationContextId
	request.ArtefactId = artefactId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetArtefact(ctx.Request().Context(), request.(GetArtefactRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetArtefact")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetArtefactResponseObject); ok {
		return validResponse.VisitGetArtefactResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetCandidateZones operation middleware
func (sh *strictHandler) GetCandidateZones(ctx echo.Context, federationContextId FederationContextId) error {
	var request GetCandidateZonesRequestObject

	request.FederationContextId = federationContextId

	var body GetCandidateZonesJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCandidateZones(ctx.Request().Context(), request.(GetCandidateZonesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCandidateZones")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCandidateZonesResponseObject); ok {
		return validResponse.VisitGetCandidateZonesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UploadFile operation middleware
func (sh *strictHandler) UploadFile(ctx echo.Context, federationContextId FederationContextId) error {
	var request UploadFileRequestObject

	request.FederationContextId = federationContextId

	if reader, err := ctx.Request().MultipartReader(); err != nil {
		return err
	} else {
		request.Body = reader
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UploadFile(ctx.Request().Context(), request.(UploadFileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UploadFile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UploadFileResponseObject); ok {
		return validResponse.VisitUploadFileResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// RemoveFile operation middleware
func (sh *strictHandler) RemoveFile(ctx echo.Context, federationContextId FederationContextId, fileId FileId) error {
	var request RemoveFileRequestObject

	request.FederationContextId = federationContextId
	request.FileId = fileId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RemoveFile(ctx.Request().Context(), request.(RemoveFileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RemoveFile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RemoveFileResponseObject); ok {
		return validResponse.VisitRemoveFileResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ViewFile operation middleware
func (sh *strictHandler) ViewFile(ctx echo.Context, federationContextId FederationContextId, fileId FileId) error {
	var request ViewFileRequestObject

	request.FederationContextId = federationContextId
	request.FileId = fileId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ViewFile(ctx.Request().Context(), request.(ViewFileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ViewFile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ViewFileResponseObject); ok {
		return validResponse.VisitViewFileResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ViewISVResPool operation middleware
func (sh *strictHandler) ViewISVResPool(ctx echo.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, appProviderId AppProviderId) error {
	var request ViewISVResPoolRequestObject

	request.FederationContextId = federationContextId
	request.ZoneId = zoneId
	request.AppProviderId = appProviderId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ViewISVResPool(ctx.Request().Context(), request.(ViewISVResPoolRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ViewISVResPool")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ViewISVResPoolResponseObject); ok {
		return validResponse.VisitViewISVResPoolResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateResourcePools operation middleware
func (sh *strictHandler) CreateResourcePools(ctx echo.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, appProviderId AppProviderId) error {
	var request CreateResourcePoolsRequestObject

	request.FederationContextId = federationContextId
	request.ZoneId = zoneId
	request.AppProviderId = appProviderId

	var body CreateResourcePoolsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateResourcePools(ctx.Request().Context(), request.(CreateResourcePoolsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateResourcePools")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateResourcePoolsResponseObject); ok {
		return validResponse.VisitCreateResourcePoolsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// RemoveISVResPool operation middleware
func (sh *strictHandler) RemoveISVResPool(ctx echo.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, appProviderId AppProviderId, poolId PoolId) error {
	var request RemoveISVResPoolRequestObject

	request.FederationContextId = federationContextId
	request.ZoneId = zoneId
	request.AppProviderId = appProviderId
	request.PoolId = poolId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RemoveISVResPool(ctx.Request().Context(), request.(RemoveISVResPoolRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RemoveISVResPool")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RemoveISVResPoolResponseObject); ok {
		return validResponse.VisitRemoveISVResPoolResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateISVResPool operation middleware
func (sh *strictHandler) UpdateISVResPool(ctx echo.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, appProviderId AppProviderId, poolId PoolId) error {
	var request UpdateISVResPoolRequestObject

	request.FederationContextId = federationContextId
	request.ZoneId = zoneId
	request.AppProviderId = appProviderId
	request.PoolId = poolId

	var body UpdateISVResPoolJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateISVResPool(ctx.Request().Context(), request.(UpdateISVResPoolRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateISVResPool")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateISVResPoolResponseObject); ok {
		return validResponse.VisitUpdateISVResPoolResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteFederationDetails operation middleware
func (sh *strictHandler) DeleteFederationDetails(ctx echo.Context, federationContextId FederationContextId) error {
	var request DeleteFederationDetailsRequestObject

	request.FederationContextId = federationContextId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteFederationDetails(ctx.Request().Context(), request.(DeleteFederationDetailsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteFederationDetails")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteFederationDetailsResponseObject); ok {
		return validResponse.VisitDeleteFederationDetailsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetFederationDetails operation middleware
func (sh *strictHandler) GetFederationDetails(ctx echo.Context, federationContextId FederationContextId) error {
	var request GetFederationDetailsRequestObject

	request.FederationContextId = federationContextId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetFederationDetails(ctx.Request().Context(), request.(GetFederationDetailsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFederationDetails")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetFederationDetailsResponseObject); ok {
		return validResponse.VisitGetFederationDetailsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateFederation operation middleware
func (sh *strictHandler) UpdateFederation(ctx echo.Context, federationContextId FederationContextId) error {
	var request UpdateFederationRequestObject

	request.FederationContextId = federationContextId

	var body UpdateFederationJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateFederation(ctx.Request().Context(), request.(UpdateFederationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateFederation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateFederationResponseObject); ok {
		return validResponse.VisitUpdateFederationResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AuthenticateDevice operation middleware
func (sh *strictHandler) AuthenticateDevice(ctx echo.Context, federationContextId FederationContextId, deviceId DeviceId, authToken AuthorizationToken) error {
	var request AuthenticateDeviceRequestObject

	request.FederationContextId = federationContextId
	request.DeviceId = deviceId
	request.AuthToken = authToken

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthenticateDevice(ctx.Request().Context(), request.(AuthenticateDeviceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthenticateDevice")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AuthenticateDeviceResponseObject); ok {
		return validResponse.VisitAuthenticateDeviceResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ZoneSubscribe operation middleware
func (sh *strictHandler) ZoneSubscribe(ctx echo.Context, federationContextId FederationContextId) error {
	var request ZoneSubscribeRequestObject

	request.FederationContextId = federationContextId

	var body ZoneSubscribeJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ZoneSubscribe(ctx.Request().Context(), request.(ZoneSubscribeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ZoneSubscribe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ZoneSubscribeResponseObject); ok {
		return validResponse.VisitZoneSubscribeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ZoneUnsubscribe operation middleware
func (sh *strictHandler) ZoneUnsubscribe(ctx echo.Context, federationContextId FederationContextId, zoneId ZoneIdentifier) error {
	var request ZoneUnsubscribeRequestObject

	request.FederationContextId = federationContextId
	request.ZoneId = zoneId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ZoneUnsubscribe(ctx.Request().Context(), request.(ZoneUnsubscribeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ZoneUnsubscribe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ZoneUnsubscribeResponseObject); ok {
		return validResponse.VisitZoneUnsubscribeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetZoneData operation middleware
func (sh *strictHandler) GetZoneData(ctx echo.Context, federationContextId FederationContextId, zoneId ZoneIdentifier) error {
	var request GetZoneDataRequestObject

	request.FederationContextId = federationContextId
	request.ZoneId = zoneId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetZoneData(ctx.Request().Context(), request.(GetZoneDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetZoneData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetZoneDataResponseObject); ok {
		return validResponse.VisitGetZoneDataResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
