// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	. "github.com/nbycomp/neonephos-opg-ewbi-api/api/federation/models"
	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CreateFederationWithBody request with any body
	CreateFederationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateFederation(ctx context.Context, body CreateFederationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppInstCallbackLinkWithBody request with any body
	AppInstCallbackLinkWithBody(ctx context.Context, federationCallbackId FederationCallbackId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AppInstCallbackLink(ctx context.Context, federationCallbackId FederationCallbackId, body AppInstCallbackLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppStatusCallbackLinkWithBody request with any body
	AppStatusCallbackLinkWithBody(ctx context.Context, federationCallbackId FederationCallbackId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AppStatusCallbackLink(ctx context.Context, federationCallbackId FederationCallbackId, body AppStatusCallbackLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AvailZoneNotifLinkWithBody request with any body
	AvailZoneNotifLinkWithBody(ctx context.Context, federationCallbackId FederationCallbackId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AvailZoneNotifLink(ctx context.Context, federationCallbackId FederationCallbackId, body AvailZoneNotifLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PartnerStatusLinkWithBody request with any body
	PartnerStatusLinkWithBody(ctx context.Context, federationCallbackId FederationCallbackId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PartnerStatusLink(ctx context.Context, federationCallbackId FederationCallbackId, body PartnerStatusLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResourceReservationCallbackLinkWithBody request with any body
	ResourceReservationCallbackLinkWithBody(ctx context.Context, federationCallbackId FederationCallbackId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ResourceReservationCallbackLink(ctx context.Context, federationCallbackId FederationCallbackId, body ResourceReservationCallbackLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InstallAppWithBody request with any body
	InstallAppWithBody(ctx context.Context, federationContextId FederationContextId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InstallApp(ctx context.Context, federationContextId FederationContextId, body InstallAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllAppInstances request
	GetAllAppInstances(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, appProviderId AppProviderId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveApp request
	RemoveApp(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, appInstanceId InstanceIdentifier, zoneId ZoneIdentifier, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAppInstanceDetails request
	GetAppInstanceDetails(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, appInstanceId InstanceIdentifier, zoneId ZoneIdentifier, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OnboardApplicationWithBody request with any body
	OnboardApplicationWithBody(ctx context.Context, federationContextId FederationContextId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OnboardApplication(ctx context.Context, federationContextId FederationContextId, body OnboardApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApp request
	DeleteApp(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ViewApplication request
	ViewApplication(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateApplicationWithBody request with any body
	UpdateApplicationWithBody(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateApplication(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, body UpdateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OnboardExistingAppNewZonesWithBody request with any body
	OnboardExistingAppNewZonesWithBody(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OnboardExistingAppNewZones(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, body OnboardExistingAppNewZonesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeboardApplication request
	DeboardApplication(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, zoneId ZoneIdentifier, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LockUnlockApplicationZoneWithBody request with any body
	LockUnlockApplicationZoneWithBody(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LockUnlockApplicationZone(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, body LockUnlockApplicationZoneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadArtefactWithBody request with any body
	UploadArtefactWithBody(ctx context.Context, federationContextId FederationContextId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveArtefact request
	RemoveArtefact(ctx context.Context, federationContextId FederationContextId, artefactId ArtefactId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtefact request
	GetArtefact(ctx context.Context, federationContextId FederationContextId, artefactId ArtefactId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCandidateZonesWithBody request with any body
	GetCandidateZonesWithBody(ctx context.Context, federationContextId FederationContextId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetCandidateZones(ctx context.Context, federationContextId FederationContextId, body GetCandidateZonesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadFileWithBody request with any body
	UploadFileWithBody(ctx context.Context, federationContextId FederationContextId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveFile request
	RemoveFile(ctx context.Context, federationContextId FederationContextId, fileId FileId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ViewFile request
	ViewFile(ctx context.Context, federationContextId FederationContextId, fileId FileId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ViewISVResPool request
	ViewISVResPool(ctx context.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, appProviderId AppProviderId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateResourcePoolsWithBody request with any body
	CreateResourcePoolsWithBody(ctx context.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, appProviderId AppProviderId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateResourcePools(ctx context.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, appProviderId AppProviderId, body CreateResourcePoolsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveISVResPool request
	RemoveISVResPool(ctx context.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, appProviderId AppProviderId, poolId PoolId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateISVResPoolWithBody request with any body
	UpdateISVResPoolWithBody(ctx context.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, appProviderId AppProviderId, poolId PoolId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateISVResPool(ctx context.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, appProviderId AppProviderId, poolId PoolId, body UpdateISVResPoolJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFederationDetails request
	DeleteFederationDetails(ctx context.Context, federationContextId FederationContextId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFederationDetails request
	GetFederationDetails(ctx context.Context, federationContextId FederationContextId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateFederationWithBody request with any body
	UpdateFederationWithBody(ctx context.Context, federationContextId FederationContextId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateFederation(ctx context.Context, federationContextId FederationContextId, body UpdateFederationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthenticateDevice request
	AuthenticateDevice(ctx context.Context, federationContextId FederationContextId, deviceId DeviceId, authToken AuthorizationToken, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ZoneSubscribeWithBody request with any body
	ZoneSubscribeWithBody(ctx context.Context, federationContextId FederationContextId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ZoneSubscribe(ctx context.Context, federationContextId FederationContextId, body ZoneSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ZoneUnsubscribe request
	ZoneUnsubscribe(ctx context.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetZoneData request
	GetZoneData(ctx context.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CreateFederationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFederationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFederation(ctx context.Context, body CreateFederationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFederationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppInstCallbackLinkWithBody(ctx context.Context, federationCallbackId FederationCallbackId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppInstCallbackLinkRequestWithBody(c.Server, federationCallbackId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppInstCallbackLink(ctx context.Context, federationCallbackId FederationCallbackId, body AppInstCallbackLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppInstCallbackLinkRequest(c.Server, federationCallbackId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStatusCallbackLinkWithBody(ctx context.Context, federationCallbackId FederationCallbackId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStatusCallbackLinkRequestWithBody(c.Server, federationCallbackId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStatusCallbackLink(ctx context.Context, federationCallbackId FederationCallbackId, body AppStatusCallbackLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStatusCallbackLinkRequest(c.Server, federationCallbackId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AvailZoneNotifLinkWithBody(ctx context.Context, federationCallbackId FederationCallbackId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAvailZoneNotifLinkRequestWithBody(c.Server, federationCallbackId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AvailZoneNotifLink(ctx context.Context, federationCallbackId FederationCallbackId, body AvailZoneNotifLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAvailZoneNotifLinkRequest(c.Server, federationCallbackId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PartnerStatusLinkWithBody(ctx context.Context, federationCallbackId FederationCallbackId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPartnerStatusLinkRequestWithBody(c.Server, federationCallbackId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PartnerStatusLink(ctx context.Context, federationCallbackId FederationCallbackId, body PartnerStatusLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPartnerStatusLinkRequest(c.Server, federationCallbackId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResourceReservationCallbackLinkWithBody(ctx context.Context, federationCallbackId FederationCallbackId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResourceReservationCallbackLinkRequestWithBody(c.Server, federationCallbackId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResourceReservationCallbackLink(ctx context.Context, federationCallbackId FederationCallbackId, body ResourceReservationCallbackLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResourceReservationCallbackLinkRequest(c.Server, federationCallbackId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstallAppWithBody(ctx context.Context, federationContextId FederationContextId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstallAppRequestWithBody(c.Server, federationContextId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstallApp(ctx context.Context, federationContextId FederationContextId, body InstallAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstallAppRequest(c.Server, federationContextId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllAppInstances(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, appProviderId AppProviderId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllAppInstancesRequest(c.Server, federationContextId, appId, appProviderId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveApp(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, appInstanceId InstanceIdentifier, zoneId ZoneIdentifier, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveAppRequest(c.Server, federationContextId, appId, appInstanceId, zoneId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAppInstanceDetails(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, appInstanceId InstanceIdentifier, zoneId ZoneIdentifier, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAppInstanceDetailsRequest(c.Server, federationContextId, appId, appInstanceId, zoneId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OnboardApplicationWithBody(ctx context.Context, federationContextId FederationContextId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOnboardApplicationRequestWithBody(c.Server, federationContextId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OnboardApplication(ctx context.Context, federationContextId FederationContextId, body OnboardApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOnboardApplicationRequest(c.Server, federationContextId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApp(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAppRequest(c.Server, federationContextId, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ViewApplication(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewViewApplicationRequest(c.Server, federationContextId, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateApplicationWithBody(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApplicationRequestWithBody(c.Server, federationContextId, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateApplication(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, body UpdateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApplicationRequest(c.Server, federationContextId, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OnboardExistingAppNewZonesWithBody(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOnboardExistingAppNewZonesRequestWithBody(c.Server, federationContextId, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OnboardExistingAppNewZones(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, body OnboardExistingAppNewZonesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOnboardExistingAppNewZonesRequest(c.Server, federationContextId, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeboardApplication(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, zoneId ZoneIdentifier, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeboardApplicationRequest(c.Server, federationContextId, appId, zoneId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LockUnlockApplicationZoneWithBody(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLockUnlockApplicationZoneRequestWithBody(c.Server, federationContextId, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LockUnlockApplicationZone(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, body LockUnlockApplicationZoneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLockUnlockApplicationZoneRequest(c.Server, federationContextId, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadArtefactWithBody(ctx context.Context, federationContextId FederationContextId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadArtefactRequestWithBody(c.Server, federationContextId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveArtefact(ctx context.Context, federationContextId FederationContextId, artefactId ArtefactId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveArtefactRequest(c.Server, federationContextId, artefactId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtefact(ctx context.Context, federationContextId FederationContextId, artefactId ArtefactId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtefactRequest(c.Server, federationContextId, artefactId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCandidateZonesWithBody(ctx context.Context, federationContextId FederationContextId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCandidateZonesRequestWithBody(c.Server, federationContextId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCandidateZones(ctx context.Context, federationContextId FederationContextId, body GetCandidateZonesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCandidateZonesRequest(c.Server, federationContextId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadFileWithBody(ctx context.Context, federationContextId FederationContextId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadFileRequestWithBody(c.Server, federationContextId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveFile(ctx context.Context, federationContextId FederationContextId, fileId FileId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveFileRequest(c.Server, federationContextId, fileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ViewFile(ctx context.Context, federationContextId FederationContextId, fileId FileId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewViewFileRequest(c.Server, federationContextId, fileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ViewISVResPool(ctx context.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, appProviderId AppProviderId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewViewISVResPoolRequest(c.Server, federationContextId, zoneId, appProviderId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateResourcePoolsWithBody(ctx context.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, appProviderId AppProviderId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateResourcePoolsRequestWithBody(c.Server, federationContextId, zoneId, appProviderId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateResourcePools(ctx context.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, appProviderId AppProviderId, body CreateResourcePoolsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateResourcePoolsRequest(c.Server, federationContextId, zoneId, appProviderId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveISVResPool(ctx context.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, appProviderId AppProviderId, poolId PoolId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveISVResPoolRequest(c.Server, federationContextId, zoneId, appProviderId, poolId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateISVResPoolWithBody(ctx context.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, appProviderId AppProviderId, poolId PoolId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateISVResPoolRequestWithBody(c.Server, federationContextId, zoneId, appProviderId, poolId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateISVResPool(ctx context.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, appProviderId AppProviderId, poolId PoolId, body UpdateISVResPoolJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateISVResPoolRequest(c.Server, federationContextId, zoneId, appProviderId, poolId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFederationDetails(ctx context.Context, federationContextId FederationContextId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFederationDetailsRequest(c.Server, federationContextId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFederationDetails(ctx context.Context, federationContextId FederationContextId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFederationDetailsRequest(c.Server, federationContextId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFederationWithBody(ctx context.Context, federationContextId FederationContextId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFederationRequestWithBody(c.Server, federationContextId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFederation(ctx context.Context, federationContextId FederationContextId, body UpdateFederationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFederationRequest(c.Server, federationContextId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthenticateDevice(ctx context.Context, federationContextId FederationContextId, deviceId DeviceId, authToken AuthorizationToken, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthenticateDeviceRequest(c.Server, federationContextId, deviceId, authToken)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ZoneSubscribeWithBody(ctx context.Context, federationContextId FederationContextId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewZoneSubscribeRequestWithBody(c.Server, federationContextId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ZoneSubscribe(ctx context.Context, federationContextId FederationContextId, body ZoneSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewZoneSubscribeRequest(c.Server, federationContextId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ZoneUnsubscribe(ctx context.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewZoneUnsubscribeRequest(c.Server, federationContextId, zoneId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetZoneData(ctx context.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetZoneDataRequest(c.Server, federationContextId, zoneId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCreateFederationRequest calls the generic CreateFederation builder with application/json body
func NewCreateFederationRequest(server string, body CreateFederationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateFederationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateFederationRequestWithBody generates requests for CreateFederation with any type of body
func NewCreateFederationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partner")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAppInstCallbackLinkRequest calls the generic AppInstCallbackLink builder with application/json body
func NewAppInstCallbackLinkRequest(server string, federationCallbackId FederationCallbackId, body AppInstCallbackLinkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAppInstCallbackLinkRequestWithBody(server, federationCallbackId, "application/json", bodyReader)
}

// NewAppInstCallbackLinkRequestWithBody generates requests for AppInstCallbackLink with any type of body
func NewAppInstCallbackLinkRequestWithBody(server string, federationCallbackId FederationCallbackId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "federationCallbackId", runtime.ParamLocationPath, federationCallbackId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/appInstCallbackLink", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAppStatusCallbackLinkRequest calls the generic AppStatusCallbackLink builder with application/json body
func NewAppStatusCallbackLinkRequest(server string, federationCallbackId FederationCallbackId, body AppStatusCallbackLinkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAppStatusCallbackLinkRequestWithBody(server, federationCallbackId, "application/json", bodyReader)
}

// NewAppStatusCallbackLinkRequestWithBody generates requests for AppStatusCallbackLink with any type of body
func NewAppStatusCallbackLinkRequestWithBody(server string, federationCallbackId FederationCallbackId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "federationCallbackId", runtime.ParamLocationPath, federationCallbackId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/appStatusCallbackLink", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAvailZoneNotifLinkRequest calls the generic AvailZoneNotifLink builder with application/json body
func NewAvailZoneNotifLinkRequest(server string, federationCallbackId FederationCallbackId, body AvailZoneNotifLinkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAvailZoneNotifLinkRequestWithBody(server, federationCallbackId, "application/json", bodyReader)
}

// NewAvailZoneNotifLinkRequestWithBody generates requests for AvailZoneNotifLink with any type of body
func NewAvailZoneNotifLinkRequestWithBody(server string, federationCallbackId FederationCallbackId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "federationCallbackId", runtime.ParamLocationPath, federationCallbackId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/availZoneNotifLink", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPartnerStatusLinkRequest calls the generic PartnerStatusLink builder with application/json body
func NewPartnerStatusLinkRequest(server string, federationCallbackId FederationCallbackId, body PartnerStatusLinkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPartnerStatusLinkRequestWithBody(server, federationCallbackId, "application/json", bodyReader)
}

// NewPartnerStatusLinkRequestWithBody generates requests for PartnerStatusLink with any type of body
func NewPartnerStatusLinkRequestWithBody(server string, federationCallbackId FederationCallbackId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "federationCallbackId", runtime.ParamLocationPath, federationCallbackId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/partnerStatusLink", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewResourceReservationCallbackLinkRequest calls the generic ResourceReservationCallbackLink builder with application/json body
func NewResourceReservationCallbackLinkRequest(server string, federationCallbackId FederationCallbackId, body ResourceReservationCallbackLinkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewResourceReservationCallbackLinkRequestWithBody(server, federationCallbackId, "application/json", bodyReader)
}

// NewResourceReservationCallbackLinkRequestWithBody generates requests for ResourceReservationCallbackLink with any type of body
func NewResourceReservationCallbackLinkRequestWithBody(server string, federationCallbackId FederationCallbackId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "federationCallbackId", runtime.ParamLocationPath, federationCallbackId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/resourceReservationCallbackLink", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInstallAppRequest calls the generic InstallApp builder with application/json body
func NewInstallAppRequest(server string, federationContextId FederationContextId, body InstallAppJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInstallAppRequestWithBody(server, federationContextId, "application/json", bodyReader)
}

// NewInstallAppRequestWithBody generates requests for InstallApp with any type of body
func NewInstallAppRequestWithBody(server string, federationContextId FederationContextId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, federationContextId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/application/lcm", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllAppInstancesRequest generates requests for GetAllAppInstances
func NewGetAllAppInstancesRequest(server string, federationContextId FederationContextId, appId AppIdentifier, appProviderId AppProviderId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, federationContextId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "appProviderId", runtime.ParamLocationPath, appProviderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/application/lcm/app/%s/appProvider/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemoveAppRequest generates requests for RemoveApp
func NewRemoveAppRequest(server string, federationContextId FederationContextId, appId AppIdentifier, appInstanceId InstanceIdentifier, zoneId ZoneIdentifier) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, federationContextId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "appInstanceId", runtime.ParamLocationPath, appInstanceId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/application/lcm/app/%s/instance/%s/zone/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAppInstanceDetailsRequest generates requests for GetAppInstanceDetails
func NewGetAppInstanceDetailsRequest(server string, federationContextId FederationContextId, appId AppIdentifier, appInstanceId InstanceIdentifier, zoneId ZoneIdentifier) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, federationContextId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "appInstanceId", runtime.ParamLocationPath, appInstanceId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/application/lcm/app/%s/instance/%s/zone/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOnboardApplicationRequest calls the generic OnboardApplication builder with application/json body
func NewOnboardApplicationRequest(server string, federationContextId FederationContextId, body OnboardApplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOnboardApplicationRequestWithBody(server, federationContextId, "application/json", bodyReader)
}

// NewOnboardApplicationRequestWithBody generates requests for OnboardApplication with any type of body
func NewOnboardApplicationRequestWithBody(server string, federationContextId FederationContextId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, federationContextId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/application/onboarding", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAppRequest generates requests for DeleteApp
func NewDeleteAppRequest(server string, federationContextId FederationContextId, appId AppIdentifier) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, federationContextId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/application/onboarding/app/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewViewApplicationRequest generates requests for ViewApplication
func NewViewApplicationRequest(server string, federationContextId FederationContextId, appId AppIdentifier) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, federationContextId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/application/onboarding/app/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateApplicationRequest calls the generic UpdateApplication builder with application/json body
func NewUpdateApplicationRequest(server string, federationContextId FederationContextId, appId AppIdentifier, body UpdateApplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateApplicationRequestWithBody(server, federationContextId, appId, "application/json", bodyReader)
}

// NewUpdateApplicationRequestWithBody generates requests for UpdateApplication with any type of body
func NewUpdateApplicationRequestWithBody(server string, federationContextId FederationContextId, appId AppIdentifier, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, federationContextId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/application/onboarding/app/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOnboardExistingAppNewZonesRequest calls the generic OnboardExistingAppNewZones builder with application/json body
func NewOnboardExistingAppNewZonesRequest(server string, federationContextId FederationContextId, appId AppIdentifier, body OnboardExistingAppNewZonesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOnboardExistingAppNewZonesRequestWithBody(server, federationContextId, appId, "application/json", bodyReader)
}

// NewOnboardExistingAppNewZonesRequestWithBody generates requests for OnboardExistingAppNewZones with any type of body
func NewOnboardExistingAppNewZonesRequestWithBody(server string, federationContextId FederationContextId, appId AppIdentifier, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, federationContextId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/application/onboarding/app/%s/additionalZones", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeboardApplicationRequest generates requests for DeboardApplication
func NewDeboardApplicationRequest(server string, federationContextId FederationContextId, appId AppIdentifier, zoneId ZoneIdentifier) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, federationContextId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/application/onboarding/app/%s/zone/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLockUnlockApplicationZoneRequest calls the generic LockUnlockApplicationZone builder with application/json body
func NewLockUnlockApplicationZoneRequest(server string, federationContextId FederationContextId, appId AppIdentifier, body LockUnlockApplicationZoneJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLockUnlockApplicationZoneRequestWithBody(server, federationContextId, appId, "application/json", bodyReader)
}

// NewLockUnlockApplicationZoneRequestWithBody generates requests for LockUnlockApplicationZone with any type of body
func NewLockUnlockApplicationZoneRequestWithBody(server string, federationContextId FederationContextId, appId AppIdentifier, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, federationContextId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/application/onboarding/app/%s/zoneForbid", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUploadArtefactRequestWithBody generates requests for UploadArtefact with any type of body
func NewUploadArtefactRequestWithBody(server string, federationContextId FederationContextId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, federationContextId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/artefact", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveArtefactRequest generates requests for RemoveArtefact
func NewRemoveArtefactRequest(server string, federationContextId FederationContextId, artefactId ArtefactId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, federationContextId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "artefactId", runtime.ParamLocationPath, artefactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/artefact/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArtefactRequest generates requests for GetArtefact
func NewGetArtefactRequest(server string, federationContextId FederationContextId, artefactId ArtefactId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, federationContextId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "artefactId", runtime.ParamLocationPath, artefactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/artefact/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCandidateZonesRequest calls the generic GetCandidateZones builder with application/json body
func NewGetCandidateZonesRequest(server string, federationContextId FederationContextId, body GetCandidateZonesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetCandidateZonesRequestWithBody(server, federationContextId, "application/json", bodyReader)
}

// NewGetCandidateZonesRequestWithBody generates requests for GetCandidateZones with any type of body
func NewGetCandidateZonesRequestWithBody(server string, federationContextId FederationContextId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, federationContextId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/edgenodesharing/edgeDiscovery", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUploadFileRequestWithBody generates requests for UploadFile with any type of body
func NewUploadFileRequestWithBody(server string, federationContextId FederationContextId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, federationContextId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/files", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveFileRequest generates requests for RemoveFile
func NewRemoveFileRequest(server string, federationContextId FederationContextId, fileId FileId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, federationContextId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "fileId", runtime.ParamLocationPath, fileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/files/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewViewFileRequest generates requests for ViewFile
func NewViewFileRequest(server string, federationContextId FederationContextId, fileId FileId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, federationContextId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "fileId", runtime.ParamLocationPath, fileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/files/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewViewISVResPoolRequest generates requests for ViewISVResPool
func NewViewISVResPoolRequest(server string, federationContextId FederationContextId, zoneId ZoneIdentifier, appProviderId AppProviderId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, federationContextId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "appProviderId", runtime.ParamLocationPath, appProviderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/isv/resource/zone/%s/appProvider/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateResourcePoolsRequest calls the generic CreateResourcePools builder with application/json body
func NewCreateResourcePoolsRequest(server string, federationContextId FederationContextId, zoneId ZoneIdentifier, appProviderId AppProviderId, body CreateResourcePoolsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateResourcePoolsRequestWithBody(server, federationContextId, zoneId, appProviderId, "application/json", bodyReader)
}

// NewCreateResourcePoolsRequestWithBody generates requests for CreateResourcePools with any type of body
func NewCreateResourcePoolsRequestWithBody(server string, federationContextId FederationContextId, zoneId ZoneIdentifier, appProviderId AppProviderId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, federationContextId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "appProviderId", runtime.ParamLocationPath, appProviderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/isv/resource/zone/%s/appProvider/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveISVResPoolRequest generates requests for RemoveISVResPool
func NewRemoveISVResPoolRequest(server string, federationContextId FederationContextId, zoneId ZoneIdentifier, appProviderId AppProviderId, poolId PoolId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, federationContextId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "appProviderId", runtime.ParamLocationPath, appProviderId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "poolId", runtime.ParamLocationPath, poolId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/isv/resource/zone/%s/appProvider/%s/pool/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateISVResPoolRequest calls the generic UpdateISVResPool builder with application/json body
func NewUpdateISVResPoolRequest(server string, federationContextId FederationContextId, zoneId ZoneIdentifier, appProviderId AppProviderId, poolId PoolId, body UpdateISVResPoolJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateISVResPoolRequestWithBody(server, federationContextId, zoneId, appProviderId, poolId, "application/json", bodyReader)
}

// NewUpdateISVResPoolRequestWithBody generates requests for UpdateISVResPool with any type of body
func NewUpdateISVResPoolRequestWithBody(server string, federationContextId FederationContextId, zoneId ZoneIdentifier, appProviderId AppProviderId, poolId PoolId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, federationContextId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "appProviderId", runtime.ParamLocationPath, appProviderId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "poolId", runtime.ParamLocationPath, poolId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/isv/resource/zone/%s/appProvider/%s/pool/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFederationDetailsRequest generates requests for DeleteFederationDetails
func NewDeleteFederationDetailsRequest(server string, federationContextId FederationContextId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, federationContextId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/partner", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFederationDetailsRequest generates requests for GetFederationDetails
func NewGetFederationDetailsRequest(server string, federationContextId FederationContextId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, federationContextId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/partner", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateFederationRequest calls the generic UpdateFederation builder with application/json body
func NewUpdateFederationRequest(server string, federationContextId FederationContextId, body UpdateFederationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateFederationRequestWithBody(server, federationContextId, "application/json", bodyReader)
}

// NewUpdateFederationRequestWithBody generates requests for UpdateFederation with any type of body
func NewUpdateFederationRequestWithBody(server string, federationContextId FederationContextId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, federationContextId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/partner", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthenticateDeviceRequest generates requests for AuthenticateDevice
func NewAuthenticateDeviceRequest(server string, federationContextId FederationContextId, deviceId DeviceId, authToken AuthorizationToken) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, federationContextId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "authToken", runtime.ParamLocationPath, authToken)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roaminguserauth/device/%s/token/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewZoneSubscribeRequest calls the generic ZoneSubscribe builder with application/json body
func NewZoneSubscribeRequest(server string, federationContextId FederationContextId, body ZoneSubscribeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewZoneSubscribeRequestWithBody(server, federationContextId, "application/json", bodyReader)
}

// NewZoneSubscribeRequestWithBody generates requests for ZoneSubscribe with any type of body
func NewZoneSubscribeRequestWithBody(server string, federationContextId FederationContextId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, federationContextId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/zones", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewZoneUnsubscribeRequest generates requests for ZoneUnsubscribe
func NewZoneUnsubscribeRequest(server string, federationContextId FederationContextId, zoneId ZoneIdentifier) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, federationContextId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/zones/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetZoneDataRequest generates requests for GetZoneData
func NewGetZoneDataRequest(server string, federationContextId FederationContextId, zoneId ZoneIdentifier) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, federationContextId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/zones/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreateFederationWithBodyWithResponse request with any body
	CreateFederationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFederationResponse, error)

	CreateFederationWithResponse(ctx context.Context, body CreateFederationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFederationResponse, error)

	// AppInstCallbackLinkWithBodyWithResponse request with any body
	AppInstCallbackLinkWithBodyWithResponse(ctx context.Context, federationCallbackId FederationCallbackId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppInstCallbackLinkResponse, error)

	AppInstCallbackLinkWithResponse(ctx context.Context, federationCallbackId FederationCallbackId, body AppInstCallbackLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*AppInstCallbackLinkResponse, error)

	// AppStatusCallbackLinkWithBodyWithResponse request with any body
	AppStatusCallbackLinkWithBodyWithResponse(ctx context.Context, federationCallbackId FederationCallbackId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppStatusCallbackLinkResponse, error)

	AppStatusCallbackLinkWithResponse(ctx context.Context, federationCallbackId FederationCallbackId, body AppStatusCallbackLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*AppStatusCallbackLinkResponse, error)

	// AvailZoneNotifLinkWithBodyWithResponse request with any body
	AvailZoneNotifLinkWithBodyWithResponse(ctx context.Context, federationCallbackId FederationCallbackId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AvailZoneNotifLinkResponse, error)

	AvailZoneNotifLinkWithResponse(ctx context.Context, federationCallbackId FederationCallbackId, body AvailZoneNotifLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*AvailZoneNotifLinkResponse, error)

	// PartnerStatusLinkWithBodyWithResponse request with any body
	PartnerStatusLinkWithBodyWithResponse(ctx context.Context, federationCallbackId FederationCallbackId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PartnerStatusLinkResponse, error)

	PartnerStatusLinkWithResponse(ctx context.Context, federationCallbackId FederationCallbackId, body PartnerStatusLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*PartnerStatusLinkResponse, error)

	// ResourceReservationCallbackLinkWithBodyWithResponse request with any body
	ResourceReservationCallbackLinkWithBodyWithResponse(ctx context.Context, federationCallbackId FederationCallbackId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResourceReservationCallbackLinkResponse, error)

	ResourceReservationCallbackLinkWithResponse(ctx context.Context, federationCallbackId FederationCallbackId, body ResourceReservationCallbackLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*ResourceReservationCallbackLinkResponse, error)

	// InstallAppWithBodyWithResponse request with any body
	InstallAppWithBodyWithResponse(ctx context.Context, federationContextId FederationContextId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InstallAppResponse, error)

	InstallAppWithResponse(ctx context.Context, federationContextId FederationContextId, body InstallAppJSONRequestBody, reqEditors ...RequestEditorFn) (*InstallAppResponse, error)

	// GetAllAppInstancesWithResponse request
	GetAllAppInstancesWithResponse(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, appProviderId AppProviderId, reqEditors ...RequestEditorFn) (*GetAllAppInstancesResponse, error)

	// RemoveAppWithResponse request
	RemoveAppWithResponse(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, appInstanceId InstanceIdentifier, zoneId ZoneIdentifier, reqEditors ...RequestEditorFn) (*RemoveAppResponse, error)

	// GetAppInstanceDetailsWithResponse request
	GetAppInstanceDetailsWithResponse(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, appInstanceId InstanceIdentifier, zoneId ZoneIdentifier, reqEditors ...RequestEditorFn) (*GetAppInstanceDetailsResponse, error)

	// OnboardApplicationWithBodyWithResponse request with any body
	OnboardApplicationWithBodyWithResponse(ctx context.Context, federationContextId FederationContextId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OnboardApplicationResponse, error)

	OnboardApplicationWithResponse(ctx context.Context, federationContextId FederationContextId, body OnboardApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*OnboardApplicationResponse, error)

	// DeleteAppWithResponse request
	DeleteAppWithResponse(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, reqEditors ...RequestEditorFn) (*DeleteAppResponse, error)

	// ViewApplicationWithResponse request
	ViewApplicationWithResponse(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, reqEditors ...RequestEditorFn) (*ViewApplicationResponse, error)

	// UpdateApplicationWithBodyWithResponse request with any body
	UpdateApplicationWithBodyWithResponse(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApplicationResponse, error)

	UpdateApplicationWithResponse(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, body UpdateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateApplicationResponse, error)

	// OnboardExistingAppNewZonesWithBodyWithResponse request with any body
	OnboardExistingAppNewZonesWithBodyWithResponse(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OnboardExistingAppNewZonesResponse, error)

	OnboardExistingAppNewZonesWithResponse(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, body OnboardExistingAppNewZonesJSONRequestBody, reqEditors ...RequestEditorFn) (*OnboardExistingAppNewZonesResponse, error)

	// DeboardApplicationWithResponse request
	DeboardApplicationWithResponse(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, zoneId ZoneIdentifier, reqEditors ...RequestEditorFn) (*DeboardApplicationResponse, error)

	// LockUnlockApplicationZoneWithBodyWithResponse request with any body
	LockUnlockApplicationZoneWithBodyWithResponse(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LockUnlockApplicationZoneResponse, error)

	LockUnlockApplicationZoneWithResponse(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, body LockUnlockApplicationZoneJSONRequestBody, reqEditors ...RequestEditorFn) (*LockUnlockApplicationZoneResponse, error)

	// UploadArtefactWithBodyWithResponse request with any body
	UploadArtefactWithBodyWithResponse(ctx context.Context, federationContextId FederationContextId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadArtefactResponse, error)

	// RemoveArtefactWithResponse request
	RemoveArtefactWithResponse(ctx context.Context, federationContextId FederationContextId, artefactId ArtefactId, reqEditors ...RequestEditorFn) (*RemoveArtefactResponse, error)

	// GetArtefactWithResponse request
	GetArtefactWithResponse(ctx context.Context, federationContextId FederationContextId, artefactId ArtefactId, reqEditors ...RequestEditorFn) (*GetArtefactResponse, error)

	// GetCandidateZonesWithBodyWithResponse request with any body
	GetCandidateZonesWithBodyWithResponse(ctx context.Context, federationContextId FederationContextId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetCandidateZonesResponse, error)

	GetCandidateZonesWithResponse(ctx context.Context, federationContextId FederationContextId, body GetCandidateZonesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetCandidateZonesResponse, error)

	// UploadFileWithBodyWithResponse request with any body
	UploadFileWithBodyWithResponse(ctx context.Context, federationContextId FederationContextId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadFileResponse, error)

	// RemoveFileWithResponse request
	RemoveFileWithResponse(ctx context.Context, federationContextId FederationContextId, fileId FileId, reqEditors ...RequestEditorFn) (*RemoveFileResponse, error)

	// ViewFileWithResponse request
	ViewFileWithResponse(ctx context.Context, federationContextId FederationContextId, fileId FileId, reqEditors ...RequestEditorFn) (*ViewFileResponse, error)

	// ViewISVResPoolWithResponse request
	ViewISVResPoolWithResponse(ctx context.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, appProviderId AppProviderId, reqEditors ...RequestEditorFn) (*ViewISVResPoolResponse, error)

	// CreateResourcePoolsWithBodyWithResponse request with any body
	CreateResourcePoolsWithBodyWithResponse(ctx context.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, appProviderId AppProviderId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateResourcePoolsResponse, error)

	CreateResourcePoolsWithResponse(ctx context.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, appProviderId AppProviderId, body CreateResourcePoolsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateResourcePoolsResponse, error)

	// RemoveISVResPoolWithResponse request
	RemoveISVResPoolWithResponse(ctx context.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, appProviderId AppProviderId, poolId PoolId, reqEditors ...RequestEditorFn) (*RemoveISVResPoolResponse, error)

	// UpdateISVResPoolWithBodyWithResponse request with any body
	UpdateISVResPoolWithBodyWithResponse(ctx context.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, appProviderId AppProviderId, poolId PoolId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateISVResPoolResponse, error)

	UpdateISVResPoolWithResponse(ctx context.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, appProviderId AppProviderId, poolId PoolId, body UpdateISVResPoolJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateISVResPoolResponse, error)

	// DeleteFederationDetailsWithResponse request
	DeleteFederationDetailsWithResponse(ctx context.Context, federationContextId FederationContextId, reqEditors ...RequestEditorFn) (*DeleteFederationDetailsResponse, error)

	// GetFederationDetailsWithResponse request
	GetFederationDetailsWithResponse(ctx context.Context, federationContextId FederationContextId, reqEditors ...RequestEditorFn) (*GetFederationDetailsResponse, error)

	// UpdateFederationWithBodyWithResponse request with any body
	UpdateFederationWithBodyWithResponse(ctx context.Context, federationContextId FederationContextId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFederationResponse, error)

	UpdateFederationWithResponse(ctx context.Context, federationContextId FederationContextId, body UpdateFederationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFederationResponse, error)

	// AuthenticateDeviceWithResponse request
	AuthenticateDeviceWithResponse(ctx context.Context, federationContextId FederationContextId, deviceId DeviceId, authToken AuthorizationToken, reqEditors ...RequestEditorFn) (*AuthenticateDeviceResponse, error)

	// ZoneSubscribeWithBodyWithResponse request with any body
	ZoneSubscribeWithBodyWithResponse(ctx context.Context, federationContextId FederationContextId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ZoneSubscribeResponse, error)

	ZoneSubscribeWithResponse(ctx context.Context, federationContextId FederationContextId, body ZoneSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*ZoneSubscribeResponse, error)

	// ZoneUnsubscribeWithResponse request
	ZoneUnsubscribeWithResponse(ctx context.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, reqEditors ...RequestEditorFn) (*ZoneUnsubscribeResponse, error)

	// GetZoneDataWithResponse request
	GetZoneDataWithResponse(ctx context.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, reqEditors ...RequestEditorFn) (*GetZoneDataResponse, error)
}

type CreateFederationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *FederationResponseData
	ApplicationproblemJSON400 *N400
	ApplicationproblemJSON401 *N401
	ApplicationproblemJSON404 *N404
	ApplicationproblemJSON409 *N409
	ApplicationproblemJSON422 *N422
	ApplicationproblemJSON500 *N500
	ApplicationproblemJSON503 *N503
	ApplicationproblemJSON520 *N520
}

// Status returns HTTPResponse.Status
func (r CreateFederationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFederationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppInstCallbackLinkResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *N400
	ApplicationproblemJSON401 *N401
	ApplicationproblemJSON404 *N404
	ApplicationproblemJSON409 *N409
	ApplicationproblemJSON422 *N422
	ApplicationproblemJSON500 *N500
	ApplicationproblemJSON503 *N503
	ApplicationproblemJSON520 *N520
}

// Status returns HTTPResponse.Status
func (r AppInstCallbackLinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppInstCallbackLinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppStatusCallbackLinkResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *N400
	ApplicationproblemJSON401 *N401
	ApplicationproblemJSON404 *N404
	ApplicationproblemJSON409 *N409
	ApplicationproblemJSON422 *N422
	ApplicationproblemJSON500 *N500
	ApplicationproblemJSON503 *N503
	ApplicationproblemJSON520 *N520
}

// Status returns HTTPResponse.Status
func (r AppStatusCallbackLinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppStatusCallbackLinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AvailZoneNotifLinkResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *N400
	ApplicationproblemJSON401 *N401
	ApplicationproblemJSON404 *N404
	ApplicationproblemJSON409 *N409
	ApplicationproblemJSON422 *N422
	ApplicationproblemJSON500 *N500
	ApplicationproblemJSON503 *N503
	ApplicationproblemJSON520 *N520
}

// Status returns HTTPResponse.Status
func (r AvailZoneNotifLinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AvailZoneNotifLinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PartnerStatusLinkResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *N400
	ApplicationproblemJSON401 *N401
	ApplicationproblemJSON404 *N404
	ApplicationproblemJSON409 *N409
	ApplicationproblemJSON422 *N422
	ApplicationproblemJSON500 *N500
	ApplicationproblemJSON503 *N503
	ApplicationproblemJSON520 *N520
}

// Status returns HTTPResponse.Status
func (r PartnerStatusLinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PartnerStatusLinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResourceReservationCallbackLinkResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *N400
	ApplicationproblemJSON401 *N401
	ApplicationproblemJSON404 *N404
	ApplicationproblemJSON409 *N409
	ApplicationproblemJSON422 *N422
	ApplicationproblemJSON500 *N500
	ApplicationproblemJSON503 *N503
	ApplicationproblemJSON520 *N520
}

// Status returns HTTPResponse.Status
func (r ResourceReservationCallbackLinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResourceReservationCallbackLinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InstallAppResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *N400
	ApplicationproblemJSON401 *N401
	ApplicationproblemJSON404 *N404
	ApplicationproblemJSON409 *N409
	ApplicationproblemJSON422 *N422
	ApplicationproblemJSON500 *N500
	ApplicationproblemJSON503 *N503
	ApplicationproblemJSON520 *N520
}

// Status returns HTTPResponse.Status
func (r InstallAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InstallAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllAppInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		AppInstanceInfo []struct {
			// AppInstIdentifier Unique identifier generated by the partner OP to identify an instance of the application on a specific zone.
			AppInstIdentifier InstanceIdentifier `json:"appInstIdentifier"`

			// AppInstanceState Running status of the application instance.
			AppInstanceState InstanceState `json:"appInstanceState"`
		} `json:"appInstanceInfo"`

		// ZoneId Human readable name of the zone.
		ZoneId ZoneIdentifier `json:"zoneId"`
	}
	ApplicationproblemJSON400 *N400
	ApplicationproblemJSON401 *N401
	ApplicationproblemJSON404 *N404
	ApplicationproblemJSON409 *N409
	ApplicationproblemJSON422 *N422
	ApplicationproblemJSON500 *N500
	ApplicationproblemJSON503 *N503
	ApplicationproblemJSON520 *N520
}

// Status returns HTTPResponse.Status
func (r GetAllAppInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllAppInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveAppResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *N400
	ApplicationproblemJSON401 *N401
	ApplicationproblemJSON404 *N404
	ApplicationproblemJSON409 *N409
	ApplicationproblemJSON422 *N422
	ApplicationproblemJSON500 *N500
	ApplicationproblemJSON503 *N503
	ApplicationproblemJSON520 *N520
}

// Status returns HTTPResponse.Status
func (r RemoveAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAppInstanceDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// AccesspointInfo Information about the IP and Port exposed by the OP. Application clients shall use these access points to reach this application instance.
		AccesspointInfo *AccessPointInfo `json:"accesspointInfo,omitempty"`

		// AppInstanceState Running status of the application instance.
		AppInstanceState *InstanceState `json:"appInstanceState,omitempty"`
	}
	ApplicationproblemJSON400 *N400
	ApplicationproblemJSON401 *N401
	ApplicationproblemJSON404 *N404
	ApplicationproblemJSON409 *N409
	ApplicationproblemJSON422 *N422
	ApplicationproblemJSON500 *N500
	ApplicationproblemJSON503 *N503
	ApplicationproblemJSON520 *N520
}

// Status returns HTTPResponse.Status
func (r GetAppInstanceDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAppInstanceDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OnboardApplicationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *N400
	ApplicationproblemJSON401 *N401
	ApplicationproblemJSON404 *N404
	ApplicationproblemJSON409 *N409
	ApplicationproblemJSON422 *N422
	ApplicationproblemJSON500 *N500
	ApplicationproblemJSON503 *N503
	ApplicationproblemJSON520 *N520
}

// Status returns HTTPResponse.Status
func (r OnboardApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OnboardApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAppResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *N400
	ApplicationproblemJSON401 *N401
	ApplicationproblemJSON404 *N404
	ApplicationproblemJSON409 *N409
	ApplicationproblemJSON422 *N422
	ApplicationproblemJSON500 *N500
	ApplicationproblemJSON503 *N503
	ApplicationproblemJSON520 *N520
}

// Status returns HTTPResponse.Status
func (r DeleteAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ViewApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// AppComponentSpecs An application may consist of more than one component. Each component is associated with a descriptor and may exposes its services externally or internally. App providers are required to provide details about all these components, their associated descriptors and their DNS names.
		AppComponentSpecs AppComponentSpecs `json:"appComponentSpecs"`

		// AppDeploymentZones Details about partner OP zones where the application should be made available. This field when specified will instruct the OP to restrict application instantiation only on the listed zones.
		AppDeploymentZones []ZoneIdentifier `json:"appDeploymentZones"`

		// AppId Identifier used to refer to an application.
		AppId AppIdentifier `json:"appId"`

		// AppMetaData Application metadata details
		AppMetaData AppMetaData `json:"appMetaData"`

		// AppProviderId UserId of the app provider. Identifier is relevant only in context of this federation.
		AppProviderId AppProviderId `json:"appProviderId"`

		// AppQoSProfile Parameters corresponding to the performance constraints, tenancy details etc.
		AppQoSProfile AppQoSProfile `json:"appQoSProfile"`
	}
	ApplicationproblemJSON400 *N400
	ApplicationproblemJSON401 *N401
	ApplicationproblemJSON404 *N404
	ApplicationproblemJSON409 *N409
	ApplicationproblemJSON422 *N422
	ApplicationproblemJSON500 *N500
	ApplicationproblemJSON503 *N503
	ApplicationproblemJSON520 *N520
}

// Status returns HTTPResponse.Status
func (r ViewApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ViewApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateApplicationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *N400
	ApplicationproblemJSON401 *N401
	ApplicationproblemJSON404 *N404
	ApplicationproblemJSON409 *N409
	ApplicationproblemJSON422 *N422
	ApplicationproblemJSON500 *N500
	ApplicationproblemJSON503 *N503
	ApplicationproblemJSON520 *N520
}

// Status returns HTTPResponse.Status
func (r UpdateApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OnboardExistingAppNewZonesResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *N400
	ApplicationproblemJSON401 *N401
	ApplicationproblemJSON404 *N404
	ApplicationproblemJSON409 *N409
	ApplicationproblemJSON422 *N422
	ApplicationproblemJSON500 *N500
	ApplicationproblemJSON503 *N503
	ApplicationproblemJSON520 *N520
}

// Status returns HTTPResponse.Status
func (r OnboardExistingAppNewZonesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OnboardExistingAppNewZonesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeboardApplicationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *N400
	ApplicationproblemJSON401 *N401
	ApplicationproblemJSON404 *N404
	ApplicationproblemJSON409 *N409
	ApplicationproblemJSON422 *N422
	ApplicationproblemJSON500 *N500
	ApplicationproblemJSON503 *N503
	ApplicationproblemJSON520 *N520
}

// Status returns HTTPResponse.Status
func (r DeboardApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeboardApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LockUnlockApplicationZoneResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *N400
	ApplicationproblemJSON401 *N401
	ApplicationproblemJSON404 *N404
	ApplicationproblemJSON409 *N409
	ApplicationproblemJSON422 *N422
	ApplicationproblemJSON500 *N500
	ApplicationproblemJSON503 *N503
	ApplicationproblemJSON520 *N520
}

// Status returns HTTPResponse.Status
func (r LockUnlockApplicationZoneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LockUnlockApplicationZoneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadArtefactResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *N400
	ApplicationproblemJSON401 *N401
	ApplicationproblemJSON404 *N404
	ApplicationproblemJSON409 *N409
	ApplicationproblemJSON422 *N422
	ApplicationproblemJSON500 *N500
	ApplicationproblemJSON503 *N503
	ApplicationproblemJSON520 *N520
}

// Status returns HTTPResponse.Status
func (r UploadArtefactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadArtefactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveArtefactResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *N400
	ApplicationproblemJSON401 *N401
	ApplicationproblemJSON404 *N404
	ApplicationproblemJSON409 *N409
	ApplicationproblemJSON422 *N422
	ApplicationproblemJSON500 *N500
	ApplicationproblemJSON503 *N503
	ApplicationproblemJSON520 *N520
}

// Status returns HTTPResponse.Status
func (r RemoveArtefactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveArtefactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtefactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// AppProviderId UserId of the app provider. Identifier is relevant only in context of this federation.
		AppProviderId AppProviderId `json:"appProviderId"`

		// ArtefactDescription Brief description of the artefact by the application provider
		ArtefactDescription *string `json:"artefactDescription,omitempty"`

		// ArtefactDescriptorType Type of descriptor present in the artefact. App provider can either define either a Helm chart or a Terraform script or container spec.
		ArtefactDescriptorType UploadArtefactMultipartBodyArtefactDescriptorType `json:"artefactDescriptorType"`

		// ArtefactFileFormat Artefacts like Helm charts or Terraform scripts may need compressed format.
		ArtefactFileFormat *UploadArtefactMultipartBodyArtefactFileFormat `json:"artefactFileFormat,omitempty"`

		// ArtefactFileName Name of the file.
		ArtefactFileName *string `json:"artefactFileName,omitempty"`

		// ArtefactId A globally unique identifier associated with the artefact. Originating OP generates this identifier when artefact is submitted over NBI.
		ArtefactId ArtefactId `json:"artefactId"`

		// ArtefactName Name of the artefact.
		ArtefactName         ArtefactName        `json:"artefactName"`
		ArtefactRepoLocation *ObjectRepoLocation `json:"artefactRepoLocation,omitempty"`

		// ArtefactVersionInfo Artefact version information
		ArtefactVersionInfo string               `json:"artefactVersionInfo"`
		ArtefactVirtType    UploadArtefactMultipartBodyArtefactVirtType `json:"artefactVirtType"`

		// ComponentSpec Details about compute, networking and storage requirements for each component of the application. App provider should define all information needed to instantiate the component. If artefact is being defined at component level this section should have information just about the component. In case the artefact is being defined at application level the section should provide details about all the components.
		ComponentSpec *[]ComponentSpec `json:"componentSpec,omitempty"`

		// RepoType Artefact or file repository location. PUBLICREPO is used of public URLs like GitHub, Helm repo, docker registry etc., PRIVATEREPO is used for private repo managed by the application developer, UPLOAD is for the case when artefact/file is uploaded from MEC web portal. OP should pull the image from ‘repoUrl' immediately after receiving the request and then send back the response. In case the repoURL corresponds to a docker registry, use docker v2 http api to do the pull.
		RepoType *UploadArtefactMultipartBodyRepoType `json:"repoType,omitempty"`
	}
	ApplicationproblemJSON400 *N400
	ApplicationproblemJSON401 *N401
	ApplicationproblemJSON404 *N404
	ApplicationproblemJSON409 *N409
	ApplicationproblemJSON422 *N422
	ApplicationproblemJSON500 *N500
	ApplicationproblemJSON503 *N503
	ApplicationproblemJSON520 *N520
}

// Status returns HTTPResponse.Status
func (r GetArtefactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtefactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCandidateZonesResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *DiscoveredEdgeNodes
	ApplicationproblemJSON400 *N400
	ApplicationproblemJSON401 *N401
	ApplicationproblemJSON404 *N404
	ApplicationproblemJSON422 *N422
	ApplicationproblemJSON500 *N500
}

// Status returns HTTPResponse.Status
func (r GetCandidateZonesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCandidateZonesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadFileResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *N400
	ApplicationproblemJSON401 *N401
	ApplicationproblemJSON404 *N404
	ApplicationproblemJSON409 *N409
	ApplicationproblemJSON422 *N422
	ApplicationproblemJSON500 *N500
	ApplicationproblemJSON503 *N503
	ApplicationproblemJSON520 *N520
}

// Status returns HTTPResponse.Status
func (r UploadFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveFileResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *N400
	ApplicationproblemJSON401 *N401
	ApplicationproblemJSON404 *N404
	ApplicationproblemJSON409 *N409
	ApplicationproblemJSON422 *N422
	ApplicationproblemJSON500 *N500
	ApplicationproblemJSON503 *N503
	ApplicationproblemJSON520 *N520
}

// Status returns HTTPResponse.Status
func (r RemoveFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ViewFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// AppProviderId UserId of the app provider. Identifier is relevant only in context of this federation.
		AppProviderId AppProviderId `json:"appProviderId"`

		// Checksum MD5 checksum for VM and file-based images, sha256 digest for containers
		Checksum *string `json:"checksum,omitempty"`

		// FileDescription Brief description about the image file.
		FileDescription *string `json:"fileDescription,omitempty"`

		// FileId A globally unique identifier associated with the image file. Originating OP generates this identifier when file is uploaded over NBI.
		FileId FileId `json:"fileId"`

		// FileName Name of the image file.
		FileName         FileName            `json:"fileName"`
		FileRepoLocation *ObjectRepoLocation `json:"fileRepoLocation,omitempty"`

		// FileType Indicate if the file is Container image or VM image (QCOW2, OVA)
		FileType VirtImageType `json:"fileType"`

		// FileVersionInfo File version information
		FileVersionInfo string `json:"fileVersionInfo"`

		// ImgInsSetArch CPU Instruction Set Architecture (ISA) E.g., Intel, Arm etc.
		ImgInsSetArch CPUArchType `json:"imgInsSetArch"`
		ImgOSType     OSType      `json:"imgOSType"`

		// RepoType Artefact or file repository location. PUBLICREPO is used of public URLs like GitHub, Helm repo, docker registry etc., PRIVATEREPO is used for private repo managed by the application developer, UPLOAD is for the case when artefact/file is uploaded from MEC web portal. OP should pull the image from ‘repoUrl' immediately after receiving the request and then send back the response. In case the repoURL corresponds to a docker registry, use docker v2 http api to do the pull.
		RepoType *UploadArtefactMultipartBodyRepoType `json:"repoType,omitempty"`
	}
	ApplicationproblemJSON400 *N400
	ApplicationproblemJSON401 *N401
	ApplicationproblemJSON404 *N404
	ApplicationproblemJSON409 *N409
	ApplicationproblemJSON422 *N422
	ApplicationproblemJSON500 *N500
	ApplicationproblemJSON503 *N503
	ApplicationproblemJSON520 *N520
}

// Status returns HTTPResponse.Status
func (r ViewFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ViewFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ViewISVResPoolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		// PoolName ISV defined name of the resource pool.
		PoolName PoolName `json:"poolName"`

		// ReservationTime Date and time when resources were reserved in UTC format
		ReservationTime *time.Time `json:"reservationTime,omitempty"`

		// ReserveDuration Time period for which resources are to be reserved starting from now
		ReserveDuration  *ResourceReservationDuration `json:"reserveDuration,omitempty"`
		ReservedFlavours []struct {
			// Count Total number of flavours reserved
			Count int32 `json:"count"`

			// FlavourId An identifier to refer to a specific combination of compute resources.
			FlavourId FlavourId `json:"flavourId"`
		} `json:"reservedFlavours"`

		// ReservedPoolId OP defined Identifier for the pool reserved for the ISV. It should be unique with an OP.
		ReservedPoolId PoolId `json:"reservedPoolId"`
	}
	ApplicationproblemJSON400 *N400
	ApplicationproblemJSON401 *N401
	ApplicationproblemJSON404 *N404
	ApplicationproblemJSON409 *N409
	ApplicationproblemJSON422 *N422
	ApplicationproblemJSON500 *N500
	ApplicationproblemJSON503 *N503
	ApplicationproblemJSON520 *N520
}

// Status returns HTTPResponse.Status
func (r ViewISVResPoolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ViewISVResPoolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateResourcePoolsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *N400
	ApplicationproblemJSON401 *N401
	ApplicationproblemJSON404 *N404
	ApplicationproblemJSON409 *N409
	ApplicationproblemJSON422 *N422
	ApplicationproblemJSON500 *N500
	ApplicationproblemJSON503 *N503
	ApplicationproblemJSON520 *N520
}

// Status returns HTTPResponse.Status
func (r CreateResourcePoolsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateResourcePoolsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveISVResPoolResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *N400
	ApplicationproblemJSON401 *N401
	ApplicationproblemJSON404 *N404
	ApplicationproblemJSON409 *N409
	ApplicationproblemJSON422 *N422
	ApplicationproblemJSON500 *N500
	ApplicationproblemJSON503 *N503
	ApplicationproblemJSON520 *N520
}

// Status returns HTTPResponse.Status
func (r RemoveISVResPoolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveISVResPoolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateISVResPoolResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *N400
	ApplicationproblemJSON401 *N401
	ApplicationproblemJSON404 *N404
	ApplicationproblemJSON409 *N409
	ApplicationproblemJSON422 *N422
	ApplicationproblemJSON500 *N500
	ApplicationproblemJSON503 *N503
	ApplicationproblemJSON520 *N520
}

// Status returns HTTPResponse.Status
func (r UpdateISVResPoolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateISVResPoolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFederationDetailsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *N400
	ApplicationproblemJSON401 *N401
	ApplicationproblemJSON404 *N404
	ApplicationproblemJSON409 *N409
	ApplicationproblemJSON422 *N422
	ApplicationproblemJSON500 *N500
	ApplicationproblemJSON503 *N503
	ApplicationproblemJSON520 *N520
}

// Status returns HTTPResponse.Status
func (r DeleteFederationDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFederationDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFederationDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// AllowedFixedNetworkIds List of network identifier associated with the fixed line network of the operator platform.
		AllowedFixedNetworkIds       *FixedNetworkIds  `json:"allowedFixedNetworkIds,omitempty"`
		AllowedMobileNetworkIds      *MobileNetworkIds `json:"allowedMobileNetworkIds,omitempty"`
		EdgeDiscoveryServiceEndPoint ServiceEndpoint   `json:"edgeDiscoveryServiceEndPoint"`
		LcmServiceEndPoint           ServiceEndpoint   `json:"lcmServiceEndPoint"`
		OfferedAvailabilityZones     *[]ZoneDetails    `json:"offeredAvailabilityZones,omitempty"`
	}
	ApplicationproblemJSON400 *N400
	ApplicationproblemJSON401 *N401
	ApplicationproblemJSON404 *N404
	ApplicationproblemJSON409 *N409
	ApplicationproblemJSON422 *N422
	ApplicationproblemJSON500 *N500
	ApplicationproblemJSON503 *N503
	ApplicationproblemJSON520 *N520
}

// Status returns HTTPResponse.Status
func (r GetFederationDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFederationDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFederationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// AllowedFixedNetworkIds List of network identifier associated with the fixed line network of the operator platform.
		AllowedFixedNetworkIds       *FixedNetworkIds  `json:"allowedFixedNetworkIds,omitempty"`
		AllowedMobileNetworkIds      *MobileNetworkIds `json:"allowedMobileNetworkIds,omitempty"`
		EdgeDiscoveryServiceEndPoint ServiceEndpoint   `json:"edgeDiscoveryServiceEndPoint"`
		LcmServiceEndPoint           ServiceEndpoint   `json:"lcmServiceEndPoint"`
		OfferedAvailabilityZones     *[]ZoneDetails    `json:"offeredAvailabilityZones,omitempty"`
	}
	ApplicationproblemJSON400 *N400
	ApplicationproblemJSON401 *N401
	ApplicationproblemJSON404 *N404
	ApplicationproblemJSON409 *N409
	ApplicationproblemJSON422 *N422
	ApplicationproblemJSON500 *N500
	ApplicationproblemJSON503 *N503
	ApplicationproblemJSON520 *N520
}

// Status returns HTTPResponse.Status
func (r UpdateFederationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFederationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthenticateDeviceResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON401 *N401
	ApplicationproblemJSON404 *N404
	ApplicationproblemJSON422 *N422
	ApplicationproblemJSON500 *N500
	ApplicationproblemJSON503 *N503
}

// Status returns HTTPResponse.Status
func (r AuthenticateDeviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthenticateDeviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ZoneSubscribeResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ZoneRegistrationResponseData
	ApplicationproblemJSON400 *N400
	ApplicationproblemJSON401 *N401
	ApplicationproblemJSON404 *N404
	ApplicationproblemJSON409 *N409
	ApplicationproblemJSON422 *N422
	ApplicationproblemJSON500 *N500
	ApplicationproblemJSON503 *N503
	ApplicationproblemJSON520 *N520
}

// Status returns HTTPResponse.Status
func (r ZoneSubscribeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ZoneSubscribeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ZoneUnsubscribeResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *N400
	ApplicationproblemJSON401 *N401
	ApplicationproblemJSON404 *N404
	ApplicationproblemJSON409 *N409
	ApplicationproblemJSON422 *N422
	ApplicationproblemJSON500 *N500
	ApplicationproblemJSON503 *N503
	ApplicationproblemJSON520 *N520
}

// Status returns HTTPResponse.Status
func (r ZoneUnsubscribeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ZoneUnsubscribeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetZoneDataResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ZoneRegisteredData
	ApplicationproblemJSON400 *N400
	ApplicationproblemJSON401 *N401
	ApplicationproblemJSON404 *N404
	ApplicationproblemJSON409 *N409
	ApplicationproblemJSON422 *N422
	ApplicationproblemJSON500 *N500
	ApplicationproblemJSON503 *N503
	ApplicationproblemJSON520 *N520
}

// Status returns HTTPResponse.Status
func (r GetZoneDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetZoneDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreateFederationWithBodyWithResponse request with arbitrary body returning *CreateFederationResponse
func (c *ClientWithResponses) CreateFederationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFederationResponse, error) {
	rsp, err := c.CreateFederationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFederationResponse(rsp)
}

func (c *ClientWithResponses) CreateFederationWithResponse(ctx context.Context, body CreateFederationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFederationResponse, error) {
	rsp, err := c.CreateFederation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFederationResponse(rsp)
}

// AppInstCallbackLinkWithBodyWithResponse request with arbitrary body returning *AppInstCallbackLinkResponse
func (c *ClientWithResponses) AppInstCallbackLinkWithBodyWithResponse(ctx context.Context, federationCallbackId FederationCallbackId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppInstCallbackLinkResponse, error) {
	rsp, err := c.AppInstCallbackLinkWithBody(ctx, federationCallbackId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppInstCallbackLinkResponse(rsp)
}

func (c *ClientWithResponses) AppInstCallbackLinkWithResponse(ctx context.Context, federationCallbackId FederationCallbackId, body AppInstCallbackLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*AppInstCallbackLinkResponse, error) {
	rsp, err := c.AppInstCallbackLink(ctx, federationCallbackId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppInstCallbackLinkResponse(rsp)
}

// AppStatusCallbackLinkWithBodyWithResponse request with arbitrary body returning *AppStatusCallbackLinkResponse
func (c *ClientWithResponses) AppStatusCallbackLinkWithBodyWithResponse(ctx context.Context, federationCallbackId FederationCallbackId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppStatusCallbackLinkResponse, error) {
	rsp, err := c.AppStatusCallbackLinkWithBody(ctx, federationCallbackId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStatusCallbackLinkResponse(rsp)
}

func (c *ClientWithResponses) AppStatusCallbackLinkWithResponse(ctx context.Context, federationCallbackId FederationCallbackId, body AppStatusCallbackLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*AppStatusCallbackLinkResponse, error) {
	rsp, err := c.AppStatusCallbackLink(ctx, federationCallbackId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStatusCallbackLinkResponse(rsp)
}

// AvailZoneNotifLinkWithBodyWithResponse request with arbitrary body returning *AvailZoneNotifLinkResponse
func (c *ClientWithResponses) AvailZoneNotifLinkWithBodyWithResponse(ctx context.Context, federationCallbackId FederationCallbackId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AvailZoneNotifLinkResponse, error) {
	rsp, err := c.AvailZoneNotifLinkWithBody(ctx, federationCallbackId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAvailZoneNotifLinkResponse(rsp)
}

func (c *ClientWithResponses) AvailZoneNotifLinkWithResponse(ctx context.Context, federationCallbackId FederationCallbackId, body AvailZoneNotifLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*AvailZoneNotifLinkResponse, error) {
	rsp, err := c.AvailZoneNotifLink(ctx, federationCallbackId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAvailZoneNotifLinkResponse(rsp)
}

// PartnerStatusLinkWithBodyWithResponse request with arbitrary body returning *PartnerStatusLinkResponse
func (c *ClientWithResponses) PartnerStatusLinkWithBodyWithResponse(ctx context.Context, federationCallbackId FederationCallbackId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PartnerStatusLinkResponse, error) {
	rsp, err := c.PartnerStatusLinkWithBody(ctx, federationCallbackId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePartnerStatusLinkResponse(rsp)
}

func (c *ClientWithResponses) PartnerStatusLinkWithResponse(ctx context.Context, federationCallbackId FederationCallbackId, body PartnerStatusLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*PartnerStatusLinkResponse, error) {
	rsp, err := c.PartnerStatusLink(ctx, federationCallbackId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePartnerStatusLinkResponse(rsp)
}

// ResourceReservationCallbackLinkWithBodyWithResponse request with arbitrary body returning *ResourceReservationCallbackLinkResponse
func (c *ClientWithResponses) ResourceReservationCallbackLinkWithBodyWithResponse(ctx context.Context, federationCallbackId FederationCallbackId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResourceReservationCallbackLinkResponse, error) {
	rsp, err := c.ResourceReservationCallbackLinkWithBody(ctx, federationCallbackId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResourceReservationCallbackLinkResponse(rsp)
}

func (c *ClientWithResponses) ResourceReservationCallbackLinkWithResponse(ctx context.Context, federationCallbackId FederationCallbackId, body ResourceReservationCallbackLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*ResourceReservationCallbackLinkResponse, error) {
	rsp, err := c.ResourceReservationCallbackLink(ctx, federationCallbackId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResourceReservationCallbackLinkResponse(rsp)
}

// InstallAppWithBodyWithResponse request with arbitrary body returning *InstallAppResponse
func (c *ClientWithResponses) InstallAppWithBodyWithResponse(ctx context.Context, federationContextId FederationContextId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InstallAppResponse, error) {
	rsp, err := c.InstallAppWithBody(ctx, federationContextId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInstallAppResponse(rsp)
}

func (c *ClientWithResponses) InstallAppWithResponse(ctx context.Context, federationContextId FederationContextId, body InstallAppJSONRequestBody, reqEditors ...RequestEditorFn) (*InstallAppResponse, error) {
	rsp, err := c.InstallApp(ctx, federationContextId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInstallAppResponse(rsp)
}

// GetAllAppInstancesWithResponse request returning *GetAllAppInstancesResponse
func (c *ClientWithResponses) GetAllAppInstancesWithResponse(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, appProviderId AppProviderId, reqEditors ...RequestEditorFn) (*GetAllAppInstancesResponse, error) {
	rsp, err := c.GetAllAppInstances(ctx, federationContextId, appId, appProviderId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllAppInstancesResponse(rsp)
}

// RemoveAppWithResponse request returning *RemoveAppResponse
func (c *ClientWithResponses) RemoveAppWithResponse(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, appInstanceId InstanceIdentifier, zoneId ZoneIdentifier, reqEditors ...RequestEditorFn) (*RemoveAppResponse, error) {
	rsp, err := c.RemoveApp(ctx, federationContextId, appId, appInstanceId, zoneId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveAppResponse(rsp)
}

// GetAppInstanceDetailsWithResponse request returning *GetAppInstanceDetailsResponse
func (c *ClientWithResponses) GetAppInstanceDetailsWithResponse(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, appInstanceId InstanceIdentifier, zoneId ZoneIdentifier, reqEditors ...RequestEditorFn) (*GetAppInstanceDetailsResponse, error) {
	rsp, err := c.GetAppInstanceDetails(ctx, federationContextId, appId, appInstanceId, zoneId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAppInstanceDetailsResponse(rsp)
}

// OnboardApplicationWithBodyWithResponse request with arbitrary body returning *OnboardApplicationResponse
func (c *ClientWithResponses) OnboardApplicationWithBodyWithResponse(ctx context.Context, federationContextId FederationContextId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OnboardApplicationResponse, error) {
	rsp, err := c.OnboardApplicationWithBody(ctx, federationContextId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOnboardApplicationResponse(rsp)
}

func (c *ClientWithResponses) OnboardApplicationWithResponse(ctx context.Context, federationContextId FederationContextId, body OnboardApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*OnboardApplicationResponse, error) {
	rsp, err := c.OnboardApplication(ctx, federationContextId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOnboardApplicationResponse(rsp)
}

// DeleteAppWithResponse request returning *DeleteAppResponse
func (c *ClientWithResponses) DeleteAppWithResponse(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, reqEditors ...RequestEditorFn) (*DeleteAppResponse, error) {
	rsp, err := c.DeleteApp(ctx, federationContextId, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAppResponse(rsp)
}

// ViewApplicationWithResponse request returning *ViewApplicationResponse
func (c *ClientWithResponses) ViewApplicationWithResponse(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, reqEditors ...RequestEditorFn) (*ViewApplicationResponse, error) {
	rsp, err := c.ViewApplication(ctx, federationContextId, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseViewApplicationResponse(rsp)
}

// UpdateApplicationWithBodyWithResponse request with arbitrary body returning *UpdateApplicationResponse
func (c *ClientWithResponses) UpdateApplicationWithBodyWithResponse(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApplicationResponse, error) {
	rsp, err := c.UpdateApplicationWithBody(ctx, federationContextId, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApplicationResponse(rsp)
}

func (c *ClientWithResponses) UpdateApplicationWithResponse(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, body UpdateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateApplicationResponse, error) {
	rsp, err := c.UpdateApplication(ctx, federationContextId, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApplicationResponse(rsp)
}

// OnboardExistingAppNewZonesWithBodyWithResponse request with arbitrary body returning *OnboardExistingAppNewZonesResponse
func (c *ClientWithResponses) OnboardExistingAppNewZonesWithBodyWithResponse(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OnboardExistingAppNewZonesResponse, error) {
	rsp, err := c.OnboardExistingAppNewZonesWithBody(ctx, federationContextId, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOnboardExistingAppNewZonesResponse(rsp)
}

func (c *ClientWithResponses) OnboardExistingAppNewZonesWithResponse(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, body OnboardExistingAppNewZonesJSONRequestBody, reqEditors ...RequestEditorFn) (*OnboardExistingAppNewZonesResponse, error) {
	rsp, err := c.OnboardExistingAppNewZones(ctx, federationContextId, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOnboardExistingAppNewZonesResponse(rsp)
}

// DeboardApplicationWithResponse request returning *DeboardApplicationResponse
func (c *ClientWithResponses) DeboardApplicationWithResponse(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, zoneId ZoneIdentifier, reqEditors ...RequestEditorFn) (*DeboardApplicationResponse, error) {
	rsp, err := c.DeboardApplication(ctx, federationContextId, appId, zoneId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeboardApplicationResponse(rsp)
}

// LockUnlockApplicationZoneWithBodyWithResponse request with arbitrary body returning *LockUnlockApplicationZoneResponse
func (c *ClientWithResponses) LockUnlockApplicationZoneWithBodyWithResponse(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LockUnlockApplicationZoneResponse, error) {
	rsp, err := c.LockUnlockApplicationZoneWithBody(ctx, federationContextId, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLockUnlockApplicationZoneResponse(rsp)
}

func (c *ClientWithResponses) LockUnlockApplicationZoneWithResponse(ctx context.Context, federationContextId FederationContextId, appId AppIdentifier, body LockUnlockApplicationZoneJSONRequestBody, reqEditors ...RequestEditorFn) (*LockUnlockApplicationZoneResponse, error) {
	rsp, err := c.LockUnlockApplicationZone(ctx, federationContextId, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLockUnlockApplicationZoneResponse(rsp)
}

// UploadArtefactWithBodyWithResponse request with arbitrary body returning *UploadArtefactResponse
func (c *ClientWithResponses) UploadArtefactWithBodyWithResponse(ctx context.Context, federationContextId FederationContextId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadArtefactResponse, error) {
	rsp, err := c.UploadArtefactWithBody(ctx, federationContextId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadArtefactResponse(rsp)
}

// RemoveArtefactWithResponse request returning *RemoveArtefactResponse
func (c *ClientWithResponses) RemoveArtefactWithResponse(ctx context.Context, federationContextId FederationContextId, artefactId ArtefactId, reqEditors ...RequestEditorFn) (*RemoveArtefactResponse, error) {
	rsp, err := c.RemoveArtefact(ctx, federationContextId, artefactId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveArtefactResponse(rsp)
}

// GetArtefactWithResponse request returning *GetArtefactResponse
func (c *ClientWithResponses) GetArtefactWithResponse(ctx context.Context, federationContextId FederationContextId, artefactId ArtefactId, reqEditors ...RequestEditorFn) (*GetArtefactResponse, error) {
	rsp, err := c.GetArtefact(ctx, federationContextId, artefactId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtefactResponse(rsp)
}

// GetCandidateZonesWithBodyWithResponse request with arbitrary body returning *GetCandidateZonesResponse
func (c *ClientWithResponses) GetCandidateZonesWithBodyWithResponse(ctx context.Context, federationContextId FederationContextId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetCandidateZonesResponse, error) {
	rsp, err := c.GetCandidateZonesWithBody(ctx, federationContextId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCandidateZonesResponse(rsp)
}

func (c *ClientWithResponses) GetCandidateZonesWithResponse(ctx context.Context, federationContextId FederationContextId, body GetCandidateZonesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetCandidateZonesResponse, error) {
	rsp, err := c.GetCandidateZones(ctx, federationContextId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCandidateZonesResponse(rsp)
}

// UploadFileWithBodyWithResponse request with arbitrary body returning *UploadFileResponse
func (c *ClientWithResponses) UploadFileWithBodyWithResponse(ctx context.Context, federationContextId FederationContextId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadFileResponse, error) {
	rsp, err := c.UploadFileWithBody(ctx, federationContextId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadFileResponse(rsp)
}

// RemoveFileWithResponse request returning *RemoveFileResponse
func (c *ClientWithResponses) RemoveFileWithResponse(ctx context.Context, federationContextId FederationContextId, fileId FileId, reqEditors ...RequestEditorFn) (*RemoveFileResponse, error) {
	rsp, err := c.RemoveFile(ctx, federationContextId, fileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveFileResponse(rsp)
}

// ViewFileWithResponse request returning *ViewFileResponse
func (c *ClientWithResponses) ViewFileWithResponse(ctx context.Context, federationContextId FederationContextId, fileId FileId, reqEditors ...RequestEditorFn) (*ViewFileResponse, error) {
	rsp, err := c.ViewFile(ctx, federationContextId, fileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseViewFileResponse(rsp)
}

// ViewISVResPoolWithResponse request returning *ViewISVResPoolResponse
func (c *ClientWithResponses) ViewISVResPoolWithResponse(ctx context.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, appProviderId AppProviderId, reqEditors ...RequestEditorFn) (*ViewISVResPoolResponse, error) {
	rsp, err := c.ViewISVResPool(ctx, federationContextId, zoneId, appProviderId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseViewISVResPoolResponse(rsp)
}

// CreateResourcePoolsWithBodyWithResponse request with arbitrary body returning *CreateResourcePoolsResponse
func (c *ClientWithResponses) CreateResourcePoolsWithBodyWithResponse(ctx context.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, appProviderId AppProviderId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateResourcePoolsResponse, error) {
	rsp, err := c.CreateResourcePoolsWithBody(ctx, federationContextId, zoneId, appProviderId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateResourcePoolsResponse(rsp)
}

func (c *ClientWithResponses) CreateResourcePoolsWithResponse(ctx context.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, appProviderId AppProviderId, body CreateResourcePoolsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateResourcePoolsResponse, error) {
	rsp, err := c.CreateResourcePools(ctx, federationContextId, zoneId, appProviderId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateResourcePoolsResponse(rsp)
}

// RemoveISVResPoolWithResponse request returning *RemoveISVResPoolResponse
func (c *ClientWithResponses) RemoveISVResPoolWithResponse(ctx context.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, appProviderId AppProviderId, poolId PoolId, reqEditors ...RequestEditorFn) (*RemoveISVResPoolResponse, error) {
	rsp, err := c.RemoveISVResPool(ctx, federationContextId, zoneId, appProviderId, poolId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveISVResPoolResponse(rsp)
}

// UpdateISVResPoolWithBodyWithResponse request with arbitrary body returning *UpdateISVResPoolResponse
func (c *ClientWithResponses) UpdateISVResPoolWithBodyWithResponse(ctx context.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, appProviderId AppProviderId, poolId PoolId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateISVResPoolResponse, error) {
	rsp, err := c.UpdateISVResPoolWithBody(ctx, federationContextId, zoneId, appProviderId, poolId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateISVResPoolResponse(rsp)
}

func (c *ClientWithResponses) UpdateISVResPoolWithResponse(ctx context.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, appProviderId AppProviderId, poolId PoolId, body UpdateISVResPoolJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateISVResPoolResponse, error) {
	rsp, err := c.UpdateISVResPool(ctx, federationContextId, zoneId, appProviderId, poolId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateISVResPoolResponse(rsp)
}

// DeleteFederationDetailsWithResponse request returning *DeleteFederationDetailsResponse
func (c *ClientWithResponses) DeleteFederationDetailsWithResponse(ctx context.Context, federationContextId FederationContextId, reqEditors ...RequestEditorFn) (*DeleteFederationDetailsResponse, error) {
	rsp, err := c.DeleteFederationDetails(ctx, federationContextId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFederationDetailsResponse(rsp)
}

// GetFederationDetailsWithResponse request returning *GetFederationDetailsResponse
func (c *ClientWithResponses) GetFederationDetailsWithResponse(ctx context.Context, federationContextId FederationContextId, reqEditors ...RequestEditorFn) (*GetFederationDetailsResponse, error) {
	rsp, err := c.GetFederationDetails(ctx, federationContextId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFederationDetailsResponse(rsp)
}

// UpdateFederationWithBodyWithResponse request with arbitrary body returning *UpdateFederationResponse
func (c *ClientWithResponses) UpdateFederationWithBodyWithResponse(ctx context.Context, federationContextId FederationContextId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFederationResponse, error) {
	rsp, err := c.UpdateFederationWithBody(ctx, federationContextId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFederationResponse(rsp)
}

func (c *ClientWithResponses) UpdateFederationWithResponse(ctx context.Context, federationContextId FederationContextId, body UpdateFederationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFederationResponse, error) {
	rsp, err := c.UpdateFederation(ctx, federationContextId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFederationResponse(rsp)
}

// AuthenticateDeviceWithResponse request returning *AuthenticateDeviceResponse
func (c *ClientWithResponses) AuthenticateDeviceWithResponse(ctx context.Context, federationContextId FederationContextId, deviceId DeviceId, authToken AuthorizationToken, reqEditors ...RequestEditorFn) (*AuthenticateDeviceResponse, error) {
	rsp, err := c.AuthenticateDevice(ctx, federationContextId, deviceId, authToken, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthenticateDeviceResponse(rsp)
}

// ZoneSubscribeWithBodyWithResponse request with arbitrary body returning *ZoneSubscribeResponse
func (c *ClientWithResponses) ZoneSubscribeWithBodyWithResponse(ctx context.Context, federationContextId FederationContextId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ZoneSubscribeResponse, error) {
	rsp, err := c.ZoneSubscribeWithBody(ctx, federationContextId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseZoneSubscribeResponse(rsp)
}

func (c *ClientWithResponses) ZoneSubscribeWithResponse(ctx context.Context, federationContextId FederationContextId, body ZoneSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*ZoneSubscribeResponse, error) {
	rsp, err := c.ZoneSubscribe(ctx, federationContextId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseZoneSubscribeResponse(rsp)
}

// ZoneUnsubscribeWithResponse request returning *ZoneUnsubscribeResponse
func (c *ClientWithResponses) ZoneUnsubscribeWithResponse(ctx context.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, reqEditors ...RequestEditorFn) (*ZoneUnsubscribeResponse, error) {
	rsp, err := c.ZoneUnsubscribe(ctx, federationContextId, zoneId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseZoneUnsubscribeResponse(rsp)
}

// GetZoneDataWithResponse request returning *GetZoneDataResponse
func (c *ClientWithResponses) GetZoneDataWithResponse(ctx context.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, reqEditors ...RequestEditorFn) (*GetZoneDataResponse, error) {
	rsp, err := c.GetZoneData(ctx, federationContextId, zoneId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetZoneDataResponse(rsp)
}

// ParseCreateFederationResponse parses an HTTP response from a CreateFederationWithResponse call
func ParseCreateFederationResponse(rsp *http.Response) (*CreateFederationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFederationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FederationResponseData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 520:
		var dest N520
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON520 = &dest

	}

	return response, nil
}

// ParseAppInstCallbackLinkResponse parses an HTTP response from a AppInstCallbackLinkWithResponse call
func ParseAppInstCallbackLinkResponse(rsp *http.Response) (*AppInstCallbackLinkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppInstCallbackLinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 520:
		var dest N520
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON520 = &dest

	}

	return response, nil
}

// ParseAppStatusCallbackLinkResponse parses an HTTP response from a AppStatusCallbackLinkWithResponse call
func ParseAppStatusCallbackLinkResponse(rsp *http.Response) (*AppStatusCallbackLinkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppStatusCallbackLinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 520:
		var dest N520
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON520 = &dest

	}

	return response, nil
}

// ParseAvailZoneNotifLinkResponse parses an HTTP response from a AvailZoneNotifLinkWithResponse call
func ParseAvailZoneNotifLinkResponse(rsp *http.Response) (*AvailZoneNotifLinkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AvailZoneNotifLinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 520:
		var dest N520
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON520 = &dest

	}

	return response, nil
}

// ParsePartnerStatusLinkResponse parses an HTTP response from a PartnerStatusLinkWithResponse call
func ParsePartnerStatusLinkResponse(rsp *http.Response) (*PartnerStatusLinkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PartnerStatusLinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 520:
		var dest N520
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON520 = &dest

	}

	return response, nil
}

// ParseResourceReservationCallbackLinkResponse parses an HTTP response from a ResourceReservationCallbackLinkWithResponse call
func ParseResourceReservationCallbackLinkResponse(rsp *http.Response) (*ResourceReservationCallbackLinkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResourceReservationCallbackLinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 520:
		var dest N520
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON520 = &dest

	}

	return response, nil
}

// ParseInstallAppResponse parses an HTTP response from a InstallAppWithResponse call
func ParseInstallAppResponse(rsp *http.Response) (*InstallAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InstallAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 520:
		var dest N520
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON520 = &dest

	}

	return response, nil
}

// ParseGetAllAppInstancesResponse parses an HTTP response from a GetAllAppInstancesWithResponse call
func ParseGetAllAppInstancesResponse(rsp *http.Response) (*GetAllAppInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllAppInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			AppInstanceInfo []struct {
				// AppInstIdentifier Unique identifier generated by the partner OP to identify an instance of the application on a specific zone.
				AppInstIdentifier InstanceIdentifier `json:"appInstIdentifier"`

				// AppInstanceState Running status of the application instance.
				AppInstanceState InstanceState `json:"appInstanceState"`
			} `json:"appInstanceInfo"`

			// ZoneId Human readable name of the zone.
			ZoneId ZoneIdentifier `json:"zoneId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 520:
		var dest N520
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON520 = &dest

	}

	return response, nil
}

// ParseRemoveAppResponse parses an HTTP response from a RemoveAppWithResponse call
func ParseRemoveAppResponse(rsp *http.Response) (*RemoveAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 520:
		var dest N520
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON520 = &dest

	}

	return response, nil
}

// ParseGetAppInstanceDetailsResponse parses an HTTP response from a GetAppInstanceDetailsWithResponse call
func ParseGetAppInstanceDetailsResponse(rsp *http.Response) (*GetAppInstanceDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAppInstanceDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// AccesspointInfo Information about the IP and Port exposed by the OP. Application clients shall use these access points to reach this application instance.
			AccesspointInfo *AccessPointInfo `json:"accesspointInfo,omitempty"`

			// AppInstanceState Running status of the application instance.
			AppInstanceState *InstanceState `json:"appInstanceState,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 520:
		var dest N520
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON520 = &dest

	}

	return response, nil
}

// ParseOnboardApplicationResponse parses an HTTP response from a OnboardApplicationWithResponse call
func ParseOnboardApplicationResponse(rsp *http.Response) (*OnboardApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OnboardApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 520:
		var dest N520
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON520 = &dest

	}

	return response, nil
}

// ParseDeleteAppResponse parses an HTTP response from a DeleteAppWithResponse call
func ParseDeleteAppResponse(rsp *http.Response) (*DeleteAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 520:
		var dest N520
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON520 = &dest

	}

	return response, nil
}

// ParseViewApplicationResponse parses an HTTP response from a ViewApplicationWithResponse call
func ParseViewApplicationResponse(rsp *http.Response) (*ViewApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ViewApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// AppComponentSpecs An application may consist of more than one component. Each component is associated with a descriptor and may exposes its services externally or internally. App providers are required to provide details about all these components, their associated descriptors and their DNS names.
			AppComponentSpecs AppComponentSpecs `json:"appComponentSpecs"`

			// AppDeploymentZones Details about partner OP zones where the application should be made available. This field when specified will instruct the OP to restrict application instantiation only on the listed zones.
			AppDeploymentZones []ZoneIdentifier `json:"appDeploymentZones"`

			// AppId Identifier used to refer to an application.
			AppId AppIdentifier `json:"appId"`

			// AppMetaData Application metadata details
			AppMetaData AppMetaData `json:"appMetaData"`

			// AppProviderId UserId of the app provider. Identifier is relevant only in context of this federation.
			AppProviderId AppProviderId `json:"appProviderId"`

			// AppQoSProfile Parameters corresponding to the performance constraints, tenancy details etc.
			AppQoSProfile AppQoSProfile `json:"appQoSProfile"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 520:
		var dest N520
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON520 = &dest

	}

	return response, nil
}

// ParseUpdateApplicationResponse parses an HTTP response from a UpdateApplicationWithResponse call
func ParseUpdateApplicationResponse(rsp *http.Response) (*UpdateApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 520:
		var dest N520
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON520 = &dest

	}

	return response, nil
}

// ParseOnboardExistingAppNewZonesResponse parses an HTTP response from a OnboardExistingAppNewZonesWithResponse call
func ParseOnboardExistingAppNewZonesResponse(rsp *http.Response) (*OnboardExistingAppNewZonesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OnboardExistingAppNewZonesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 520:
		var dest N520
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON520 = &dest

	}

	return response, nil
}

// ParseDeboardApplicationResponse parses an HTTP response from a DeboardApplicationWithResponse call
func ParseDeboardApplicationResponse(rsp *http.Response) (*DeboardApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeboardApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 520:
		var dest N520
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON520 = &dest

	}

	return response, nil
}

// ParseLockUnlockApplicationZoneResponse parses an HTTP response from a LockUnlockApplicationZoneWithResponse call
func ParseLockUnlockApplicationZoneResponse(rsp *http.Response) (*LockUnlockApplicationZoneResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LockUnlockApplicationZoneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 520:
		var dest N520
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON520 = &dest

	}

	return response, nil
}

// ParseUploadArtefactResponse parses an HTTP response from a UploadArtefactWithResponse call
func ParseUploadArtefactResponse(rsp *http.Response) (*UploadArtefactResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadArtefactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 520:
		var dest N520
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON520 = &dest

	}

	return response, nil
}

// ParseRemoveArtefactResponse parses an HTTP response from a RemoveArtefactWithResponse call
func ParseRemoveArtefactResponse(rsp *http.Response) (*RemoveArtefactResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveArtefactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 520:
		var dest N520
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON520 = &dest

	}

	return response, nil
}

// ParseGetArtefactResponse parses an HTTP response from a GetArtefactWithResponse call
func ParseGetArtefactResponse(rsp *http.Response) (*GetArtefactResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtefactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// AppProviderId UserId of the app provider. Identifier is relevant only in context of this federation.
			AppProviderId AppProviderId `json:"appProviderId"`

			// ArtefactDescription Brief description of the artefact by the application provider
			ArtefactDescription *string `json:"artefactDescription,omitempty"`

			// ArtefactDescriptorType Type of descriptor present in the artefact. App provider can either define either a Helm chart or a Terraform script or container spec.
			ArtefactDescriptorType UploadArtefactMultipartBodyArtefactDescriptorType `json:"artefactDescriptorType"`

			// ArtefactFileFormat Artefacts like Helm charts or Terraform scripts may need compressed format.
			ArtefactFileFormat *UploadArtefactMultipartBodyArtefactFileFormat `json:"artefactFileFormat,omitempty"`

			// ArtefactFileName Name of the file.
			ArtefactFileName *string `json:"artefactFileName,omitempty"`

			// ArtefactId A globally unique identifier associated with the artefact. Originating OP generates this identifier when artefact is submitted over NBI.
			ArtefactId ArtefactId `json:"artefactId"`

			// ArtefactName Name of the artefact.
			ArtefactName         ArtefactName        `json:"artefactName"`
			ArtefactRepoLocation *ObjectRepoLocation `json:"artefactRepoLocation,omitempty"`

			// ArtefactVersionInfo Artefact version information
			ArtefactVersionInfo string               `json:"artefactVersionInfo"`
			ArtefactVirtType    UploadArtefactMultipartBodyArtefactVirtType `json:"artefactVirtType"`

			// ComponentSpec Details about compute, networking and storage requirements for each component of the application. App provider should define all information needed to instantiate the component. If artefact is being defined at component level this section should have information just about the component. In case the artefact is being defined at application level the section should provide details about all the components.
			ComponentSpec *[]ComponentSpec `json:"componentSpec,omitempty"`

			// RepoType Artefact or file repository location. PUBLICREPO is used of public URLs like GitHub, Helm repo, docker registry etc., PRIVATEREPO is used for private repo managed by the application developer, UPLOAD is for the case when artefact/file is uploaded from MEC web portal. OP should pull the image from ‘repoUrl' immediately after receiving the request and then send back the response. In case the repoURL corresponds to a docker registry, use docker v2 http api to do the pull.
			RepoType *UploadArtefactMultipartBodyRepoType `json:"repoType,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 520:
		var dest N520
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON520 = &dest

	}

	return response, nil
}

// ParseGetCandidateZonesResponse parses an HTTP response from a GetCandidateZonesWithResponse call
func ParseGetCandidateZonesResponse(rsp *http.Response) (*GetCandidateZonesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCandidateZonesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DiscoveredEdgeNodes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseUploadFileResponse parses an HTTP response from a UploadFileWithResponse call
func ParseUploadFileResponse(rsp *http.Response) (*UploadFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 520:
		var dest N520
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON520 = &dest

	}

	return response, nil
}

// ParseRemoveFileResponse parses an HTTP response from a RemoveFileWithResponse call
func ParseRemoveFileResponse(rsp *http.Response) (*RemoveFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 520:
		var dest N520
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON520 = &dest

	}

	return response, nil
}

// ParseViewFileResponse parses an HTTP response from a ViewFileWithResponse call
func ParseViewFileResponse(rsp *http.Response) (*ViewFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ViewFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// AppProviderId UserId of the app provider. Identifier is relevant only in context of this federation.
			AppProviderId AppProviderId `json:"appProviderId"`

			// Checksum MD5 checksum for VM and file-based images, sha256 digest for containers
			Checksum *string `json:"checksum,omitempty"`

			// FileDescription Brief description about the image file.
			FileDescription *string `json:"fileDescription,omitempty"`

			// FileId A globally unique identifier associated with the image file. Originating OP generates this identifier when file is uploaded over NBI.
			FileId FileId `json:"fileId"`

			// FileName Name of the image file.
			FileName         FileName            `json:"fileName"`
			FileRepoLocation *ObjectRepoLocation `json:"fileRepoLocation,omitempty"`

			// FileType Indicate if the file is Container image or VM image (QCOW2, OVA)
			FileType VirtImageType `json:"fileType"`

			// FileVersionInfo File version information
			FileVersionInfo string `json:"fileVersionInfo"`

			// ImgInsSetArch CPU Instruction Set Architecture (ISA) E.g., Intel, Arm etc.
			ImgInsSetArch CPUArchType `json:"imgInsSetArch"`
			ImgOSType     OSType      `json:"imgOSType"`

			// RepoType Artefact or file repository location. PUBLICREPO is used of public URLs like GitHub, Helm repo, docker registry etc., PRIVATEREPO is used for private repo managed by the application developer, UPLOAD is for the case when artefact/file is uploaded from MEC web portal. OP should pull the image from ‘repoUrl' immediately after receiving the request and then send back the response. In case the repoURL corresponds to a docker registry, use docker v2 http api to do the pull.
			RepoType *UploadArtefactMultipartBodyRepoType `json:"repoType,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 520:
		var dest N520
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON520 = &dest

	}

	return response, nil
}

// ParseViewISVResPoolResponse parses an HTTP response from a ViewISVResPoolWithResponse call
func ParseViewISVResPoolResponse(rsp *http.Response) (*ViewISVResPoolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ViewISVResPoolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			// PoolName ISV defined name of the resource pool.
			PoolName PoolName `json:"poolName"`

			// ReservationTime Date and time when resources were reserved in UTC format
			ReservationTime *time.Time `json:"reservationTime,omitempty"`

			// ReserveDuration Time period for which resources are to be reserved starting from now
			ReserveDuration  *ResourceReservationDuration `json:"reserveDuration,omitempty"`
			ReservedFlavours []struct {
				// Count Total number of flavours reserved
				Count int32 `json:"count"`

				// FlavourId An identifier to refer to a specific combination of compute resources.
				FlavourId FlavourId `json:"flavourId"`
			} `json:"reservedFlavours"`

			// ReservedPoolId OP defined Identifier for the pool reserved for the ISV. It should be unique with an OP.
			ReservedPoolId PoolId `json:"reservedPoolId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 520:
		var dest N520
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON520 = &dest

	}

	return response, nil
}

// ParseCreateResourcePoolsResponse parses an HTTP response from a CreateResourcePoolsWithResponse call
func ParseCreateResourcePoolsResponse(rsp *http.Response) (*CreateResourcePoolsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateResourcePoolsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 520:
		var dest N520
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON520 = &dest

	}

	return response, nil
}

// ParseRemoveISVResPoolResponse parses an HTTP response from a RemoveISVResPoolWithResponse call
func ParseRemoveISVResPoolResponse(rsp *http.Response) (*RemoveISVResPoolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveISVResPoolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 520:
		var dest N520
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON520 = &dest

	}

	return response, nil
}

// ParseUpdateISVResPoolResponse parses an HTTP response from a UpdateISVResPoolWithResponse call
func ParseUpdateISVResPoolResponse(rsp *http.Response) (*UpdateISVResPoolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateISVResPoolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 520:
		var dest N520
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON520 = &dest

	}

	return response, nil
}

// ParseDeleteFederationDetailsResponse parses an HTTP response from a DeleteFederationDetailsWithResponse call
func ParseDeleteFederationDetailsResponse(rsp *http.Response) (*DeleteFederationDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFederationDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 520:
		var dest N520
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON520 = &dest

	}

	return response, nil
}

// ParseGetFederationDetailsResponse parses an HTTP response from a GetFederationDetailsWithResponse call
func ParseGetFederationDetailsResponse(rsp *http.Response) (*GetFederationDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFederationDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// AllowedFixedNetworkIds List of network identifier associated with the fixed line network of the operator platform.
			AllowedFixedNetworkIds       *FixedNetworkIds  `json:"allowedFixedNetworkIds,omitempty"`
			AllowedMobileNetworkIds      *MobileNetworkIds `json:"allowedMobileNetworkIds,omitempty"`
			EdgeDiscoveryServiceEndPoint ServiceEndpoint   `json:"edgeDiscoveryServiceEndPoint"`
			LcmServiceEndPoint           ServiceEndpoint   `json:"lcmServiceEndPoint"`
			OfferedAvailabilityZones     *[]ZoneDetails    `json:"offeredAvailabilityZones,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 520:
		var dest N520
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON520 = &dest

	}

	return response, nil
}

// ParseUpdateFederationResponse parses an HTTP response from a UpdateFederationWithResponse call
func ParseUpdateFederationResponse(rsp *http.Response) (*UpdateFederationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateFederationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// AllowedFixedNetworkIds List of network identifier associated with the fixed line network of the operator platform.
			AllowedFixedNetworkIds       *FixedNetworkIds  `json:"allowedFixedNetworkIds,omitempty"`
			AllowedMobileNetworkIds      *MobileNetworkIds `json:"allowedMobileNetworkIds,omitempty"`
			EdgeDiscoveryServiceEndPoint ServiceEndpoint   `json:"edgeDiscoveryServiceEndPoint"`
			LcmServiceEndPoint           ServiceEndpoint   `json:"lcmServiceEndPoint"`
			OfferedAvailabilityZones     *[]ZoneDetails    `json:"offeredAvailabilityZones,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 520:
		var dest N520
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON520 = &dest

	}

	return response, nil
}

// ParseAuthenticateDeviceResponse parses an HTTP response from a AuthenticateDeviceWithResponse call
func ParseAuthenticateDeviceResponse(rsp *http.Response) (*AuthenticateDeviceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthenticateDeviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	}

	return response, nil
}

// ParseZoneSubscribeResponse parses an HTTP response from a ZoneSubscribeWithResponse call
func ParseZoneSubscribeResponse(rsp *http.Response) (*ZoneSubscribeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ZoneSubscribeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ZoneRegistrationResponseData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 520:
		var dest N520
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON520 = &dest

	}

	return response, nil
}

// ParseZoneUnsubscribeResponse parses an HTTP response from a ZoneUnsubscribeWithResponse call
func ParseZoneUnsubscribeResponse(rsp *http.Response) (*ZoneUnsubscribeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ZoneUnsubscribeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 520:
		var dest N520
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON520 = &dest

	}

	return response, nil
}

// ParseGetZoneDataResponse parses an HTTP response from a GetZoneDataWithResponse call
func ParseGetZoneDataResponse(rsp *http.Response) (*GetZoneDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetZoneDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ZoneRegisteredData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 520:
		var dest N520
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON520 = &dest

	}

	return response, nil
}
